{"ast":null,"code":"import _classCallCheck from \"/home/amy/mystery-function/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/amy/mystery-function/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar IsPalindrome =\n/*#__PURE__*/\nfunction () {\n  function IsPalindrome() {\n    _classCallCheck(this, IsPalindrome);\n  }\n\n  _createClass(IsPalindrome, null, [{\n    key: \"answerText\",\n    value: function answerText() {\n      return \"This function returns whether or not the given list is palindromic - if reversing the list would yield the same list.\";\n    }\n  }, {\n    key: \"validListInput\",\n    value: function validListInput(input, elemEval) {\n      var as_list;\n\n      try {\n        // Parse string as a list, with brackets required\n        if (input.trim()[0] !== \"[\") {\n          return false;\n        }\n\n        as_list = JSON.parse(input);\n\n        if (as_list.length > 0) {\n          for (var i = 0; i < as_list.length; i++) {\n            // Make sure item types are same as passed in param\n            if (!elemEval(as_list[i])) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      } catch (_unused) {\n        return false;\n      }\n    }\n  }, {\n    key: \"validOutput\",\n    value: function validOutput(input) {\n      var trimmed = input.trim();\n      return trimmed === 'true' || trimmed === 'false';\n    }\n  }, {\n    key: \"parseInput\",\n    value: function parseInput(input) {\n      return JSON.parse(input);\n    }\n  }, {\n    key: \"parseOutput\",\n    value: function parseOutput(output) {\n      var as_str = String(output).trim();\n      return as_str === 'true';\n    }\n  }, {\n    key: \"function\",\n    value: function _function(items) {\n      if (items.length < 2) {\n        return true;\n      }\n\n      var start = 0;\n      var end = items.length - 1;\n\n      while (start < end) {\n        if (items[start] !== items[end]) {\n          return false;\n        }\n\n        start += 1;\n        end -= 1;\n      }\n\n      return true;\n    }\n  }]);\n\n  return IsPalindrome;\n}();\n\nexport default IsPalindrome;","map":{"version":3,"sources":["/home/amy/mystery-function/src/functions/IsPalindrome.ts"],"names":["IsPalindrome","input","elemEval","as_list","trim","JSON","parse","length","i","trimmed","output","as_str","String","items","start","end"],"mappings":";;;IAAMA,Y;;;;;;;;;iCACwB;AAC1B,aAAO,uHAAP;AACD;;;mCAEqBC,K,EAAYC,Q,EAA6B;AAC7D,UAAIC,OAAJ;;AACA,UAAI;AACF;AACA,YAAIF,KAAK,CAACG,IAAN,GAAa,CAAb,MAAoB,GAAxB,EAA6B;AAC3B,iBAAO,KAAP;AACD;;AACDD,QAAAA,OAAO,GAAGE,IAAI,CAACC,KAAL,CAAWL,KAAX,CAAV;;AACA,YAAIE,OAAO,CAACI,MAAR,GAAiB,CAArB,EAAwB;AACtB,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAAO,CAACI,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACvC;AACA,gBAAI,CAACN,QAAQ,CAACC,OAAO,CAACK,CAAD,CAAR,CAAb,EAA2B;AACzB,qBAAO,KAAP;AACD;AACF;AACF;;AACD,eAAO,IAAP;AACD,OAfD,CAeE,gBAAM;AACN,eAAO,KAAP;AACD;AACF;;;gCAEkBP,K,EAAqB;AACtC,UAAIQ,OAAO,GAAGR,KAAK,CAACG,IAAN,EAAd;AACA,aAAOK,OAAO,KAAK,MAAZ,IAAsBA,OAAO,KAAK,OAAzC;AACD;;;+BAEiBR,K,EAAmB;AACnC,aAAOI,IAAI,CAACC,KAAL,CAAWL,KAAX,CAAP;AACD;;;gCAEkBS,M,EAAsB;AACvC,UAAIC,MAAM,GAAGC,MAAM,CAACF,MAAD,CAAN,CAAeN,IAAf,EAAb;AACA,aAAOO,MAAM,KAAK,MAAlB;AACD;;;8BAEeE,K,EAAuB;AACrC,UAAIA,KAAK,CAACN,MAAN,GAAe,CAAnB,EAAsB;AACpB,eAAO,IAAP;AACD;;AACD,UAAIO,KAAK,GAAG,CAAZ;AACA,UAAIC,GAAG,GAAGF,KAAK,CAACN,MAAN,GAAe,CAAzB;;AACA,aAAOO,KAAK,GAAGC,GAAf,EAAoB;AAClB,YAAIF,KAAK,CAACC,KAAD,CAAL,KAAiBD,KAAK,CAACE,GAAD,CAA1B,EAAiC;AAC/B,iBAAO,KAAP;AACD;;AACDD,QAAAA,KAAK,IAAI,CAAT;AACAC,QAAAA,GAAG,IAAI,CAAP;AACD;;AACD,aAAO,IAAP;AACD;;;;;;AAGH,eAAef,YAAf","sourcesContent":["class IsPalindrome {\n  static answerText(): string {\n    return \"This function returns whether or not the given list is palindromic - if reversing the list would yield the same list.\";\n  }\n\n  static validListInput(input: any, elemEval: Function): boolean {\n    var as_list;\n    try {\n      // Parse string as a list, with brackets required\n      if (input.trim()[0] !== \"[\") {\n        return false;\n      }\n      as_list = JSON.parse(input);\n      if (as_list.length > 0) {\n        for (var i = 0; i < as_list.length; i++) {\n          // Make sure item types are same as passed in param\n          if (!elemEval(as_list[i])) {\n            return false;\n          }\n        }\n      }\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  static validOutput(input: any): boolean {\n    var trimmed = input.trim();\n    return trimmed === 'true' || trimmed === 'false';\n  }\n\n  static parseInput(input: any): any[] {\n    return JSON.parse(input);\n  }\n\n  static parseOutput(output: any): boolean {\n    var as_str = String(output).trim();\n    return as_str === 'true';\n  }\n\n  static function(items: any[]): boolean {\n    if (items.length < 2) {\n      return true;\n    }\n    var start = 0;\n    var end = items.length - 1;\n    while (start < end) {\n      if (items[start] !== items[end]) {\n        return false;\n      }\n      start += 1;\n      end -= 1;\n    }\n    return true;\n  }\n}\n\nexport default IsPalindrome;"]},"metadata":{},"sourceType":"module"}