{"ast":null,"code":"import _classCallCheck from \"/home/amy/mystery-function/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/amy/mystery-function/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/amy/mystery-function/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/amy/mystery-function/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/amy/mystery-function/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/amy/mystery-function/src/components/EvalGuessLine.js\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Grid, Typography, createMuiTheme, MuiThemeProvider } from '@material-ui/core';\nimport withStyles from '@material-ui/styles/withStyles';\nimport { green, red } from '@material-ui/core/colors';\n\nvar styles = function styles(theme) {\n  return {\n    text: {\n      fontSize: 14\n    },\n    boldText: {\n      fontSize: 14,\n      fontWeight: \"300\"\n    }\n  };\n};\n\nvar EvalGuessLine =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EvalGuessLine, _Component);\n\n  function EvalGuessLine() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EvalGuessLine);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EvalGuessLine)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.theme = createMuiTheme({\n      palette: {\n        primary: {\n          main: green['A700']\n        },\n        secondary: {\n          main: red['A700']\n        }\n      }\n    });\n    return _this;\n  }\n\n  _createClass(EvalGuessLine, [{\n    key: \"render\",\n    value: function render() {\n      var classes = this.props;\n      var resultStyle;\n\n      if (classes.result === \"YES\") {\n        resultStyle = \"primary\";\n      } else {\n        resultStyle = \"secondary\";\n      }\n\n      return React.createElement(MuiThemeProvider, {\n        theme: this.theme,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        direction: \"row\",\n        spacing: 2,\n        justify: \"flex-start\",\n        height: 20,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: classes.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Does\")), React.createElement(Grid, {\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: classes.boldText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, JSON.stringify(classes.in))), React.createElement(Grid, {\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: classes.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"evaluate to\")), React.createElement(Grid, {\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: classes.boldText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, JSON.stringify(classes.out))), React.createElement(Grid, {\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: classes.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"?\")), React.createElement(Grid, {\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        color: resultStyle,\n        className: classes.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, classes.result)), React.createElement(Grid, {\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: classes.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, JSON.stringify(classes.reason)))));\n    }\n  }]);\n\n  return EvalGuessLine;\n}(Component);\n\nexport default withRouter(withStyles(styles)(EvalGuessLine));","map":{"version":3,"sources":["/home/amy/mystery-function/src/components/EvalGuessLine.js"],"names":["React","Component","withRouter","Grid","Typography","createMuiTheme","MuiThemeProvider","withStyles","green","red","styles","theme","text","fontSize","boldText","fontWeight","EvalGuessLine","palette","primary","main","secondary","classes","props","resultStyle","result","JSON","stringify","in","out","reason"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Grid, Typography, createMuiTheme, MuiThemeProvider } from '@material-ui/core';\nimport withStyles from '@material-ui/styles/withStyles';\nimport { green, red } from '@material-ui/core/colors';\n\nconst styles = theme => ({\n  text: {\n    fontSize: 14,\n  },\n  boldText: {\n    fontSize: 14,\n    fontWeight: \"300\"\n  }\n});\n\nclass EvalGuessLine extends Component {\n  theme = createMuiTheme({\n    palette: {\n      primary: {\n        main: green['A700'],\n      },\n      secondary: {\n        main: red['A700'],\n      }\n    }\n  })\n\n  render() {\n    var classes = this.props;\n    var resultStyle;\n    if (classes.result === \"YES\") {\n      resultStyle = \"primary\";\n    } else {\n      resultStyle = \"secondary\";\n    }\n    return (\n      <MuiThemeProvider theme={this.theme}>\n        <Grid container direction=\"row\" spacing={2} justify=\"flex-start\" height={20}>\n          <Grid item>\n            <Typography className={classes.text}>Does</Typography>\n          </Grid>\n          <Grid item>\n            <Typography className={classes.boldText}>{JSON.stringify(classes.in)}</Typography>\n          </Grid>\n          <Grid item>\n            <Typography className={classes.text}>evaluate to</Typography>\n          </Grid>\n          <Grid item>\n            <Typography className={classes.boldText}>{JSON.stringify(classes.out)}</Typography>\n          </Grid>\n          <Grid item>\n            <Typography className={classes.text}>?</Typography>\n          </Grid>\n          <Grid item>\n            <Typography color={resultStyle} className={classes.text}>{classes.result}</Typography>\n          </Grid>\n          <Grid item>\n            <Typography className={classes.text}>{JSON.stringify(classes.reason)}</Typography>\n          </Grid>\n        </Grid>\n      </MuiThemeProvider>\n    )\n  }\n}\n\nexport default withRouter(withStyles(styles)(EvalGuessLine));"]},"metadata":{},"sourceType":"module"}