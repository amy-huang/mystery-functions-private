{"ast":null,"code":"import _classCallCheck from \"/home/amy/mystery-function/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/amy/mystery-function/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/amy/mystery-function/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/amy/mystery-function/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/amy/mystery-function/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"/home/amy/mystery-function/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/amy/mystery-function/src/components/GuessingScreen.js\";\nimport React, { Component } from 'react';\nimport withStyles from '@material-ui/styles/withStyles';\nimport { withRouter } from 'react-router-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport TabsWrapper from './TabsWrapper';\nimport Paper from '@material-ui/core/Paper';\nimport { GridList, GridListTile } from '@material-ui/core';\nimport EvalGuessLine from './EvalGuessLine';\nimport EvalInputLine from './EvalInputLine';\nimport DummyLine from './DummyLine';\nvar gridListHeight = 500;\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      flexGrow: 1,\n      backgroundColor: theme.palette.grey['100'],\n      overflow: 'hidden',\n      backgroundSize: 'cover',\n      backgroundPosition: '0 400px',\n      paddingBottom: 200\n    },\n    grid: _defineProperty({\n      width: 1200,\n      marginTop: 40\n    }, theme.breakpoints.down('sm'), {\n      width: 'calc(100% - 20px)'\n    }),\n    panel: _defineProperty({\n      width: 600,\n      marginTop: 40\n    }, theme.breakpoints.down('sm'), {\n      width: 'calc(100% - 20px)'\n    }),\n    paper: {\n      padding: theme.spacing(3),\n      textAlign: 'left',\n      color: theme.palette.text.secondary\n    },\n    rangeLabel: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      paddingTop: theme.spacing(2)\n    },\n    topBar: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      marginTop: 32\n    },\n    outlinedButtom: {\n      textTransform: 'uppercase',\n      margin: theme.spacing(1)\n    },\n    actionButtom: {\n      textTransform: 'uppercase',\n      margin: theme.spacing(1),\n      width: 152\n    },\n    blockCenter: {\n      padding: theme.spacing(2),\n      textAlign: 'center'\n    },\n    block: {\n      padding: theme.spacing(2)\n    },\n    box: {\n      marginBottom: 40,\n      height: 120\n    },\n    tallBox: {\n      marginBottom: 40,\n      height: 320\n    },\n    inlining: {\n      display: 'inline-block',\n      marginRight: 10\n    },\n    buttonBar: {\n      display: 'flex'\n    },\n    alignRight: {\n      display: 'flex',\n      justifyContent: 'flex-end'\n    },\n    noBorder: {\n      borderBottomStyle: 'hidden'\n    },\n    loadingState: {\n      opacity: 0.05\n    },\n    loadingMessage: {\n      position: 'absolute',\n      top: '40%',\n      left: '40%'\n    },\n    gridList: {\n      width: 400,\n      height: gridListHeight,\n      alignContent: 'flex-start'\n    },\n    gridListWrapper: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-around',\n      overflow: 'hidden',\n      backgroundColor: theme.palette.background.paper\n    }\n  };\n};\n\nfunction dummyTiles() {\n  var guesses = [];\n  var numTiles = gridListHeight / 80;\n\n  for (var i = -1 * numTiles; i < 0; i++) {\n    guesses.push({\n      key: i,\n      type: \"dummy_line\"\n    });\n  }\n\n  return guesses;\n}\n\nvar GuessingScreen =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GuessingScreen, _Component);\n\n  function GuessingScreen() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GuessingScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GuessingScreen)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.guesses = dummyTiles();\n    _this.scrolling = false;\n\n    _this.scrollDown = function () {\n      if (_this.gridlist === null) {\n        return;\n      }\n\n      if (_this.gridlist.scrollTop < _this.gridlist.scrollHeight - gridListHeight) {\n        _this.gridlist.scrollTop += 5;\n      } else {\n        clearInterval(_this.scrollId);\n        _this.scrolling = false;\n      }\n    };\n\n    _this.guessMade = function () {\n      _this.setState({\n        guesses: _this.guesses,\n        scrollId: _this.scrollId,\n        scrolling: _this.scrolling\n      });\n\n      if (!_this.scrolling) {\n        _this.scrollId = setInterval(_this.scrollDown, 10);\n        _this.scrolling = true;\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(GuessingScreen, [{\n    key: \"getLine\",\n    value: function getLine(tile, gridlist) {\n      if (tile.type === \"dummy_line\") {\n        return React.createElement(DummyLine, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        });\n      }\n\n      if (tile.type === \"eval_input\") {\n        return React.createElement(EvalInputLine, {\n          in: tile.in,\n          out: tile.out,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        });\n      }\n\n      if (tile.type === \"eval_guess\") {\n        return React.createElement(Grid, {\n          container: true,\n          spacing: 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }, React.createElement(Grid, {\n          item: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        }, React.createElement(EvalGuessLine, {\n          in: tile.in,\n          out: tile.out,\n          result: tile.result,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        })), React.createElement(Grid, {\n          item: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }, \"(\", tile.reason, \")\")));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var classes = this.props.classes;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(CssBaseline, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: classes.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        justify: \"center\",\n        spacing: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        item: true,\n        spacing: 4,\n        className: classes.panel,\n        alignContent: \"flex-start\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        color: \"secondary\",\n        gutterBottom: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"This mystery function takes an input of type\", React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, \"list of integers\"), \" : comma separated numbers surrounded by square brackets like so: [1,2,3,4,5]\")), \"and an output of type\", React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, \"boolean\"), \" : the strings \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, \"true\"), \" or \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, \"false\"), \", no capitalization\")))), React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(TabsWrapper, {\n        guesses: this.guesses,\n        funcObj: classes.funcObj,\n        updateFunc: this.guessMade,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }))), React.createElement(Grid, {\n        container: true,\n        item: true,\n        spacing: 4,\n        className: classes.panel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(Paper, {\n        className: classes.paper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classes.gridListWrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        spacing: 4,\n        alignContent: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(GridList, {\n        className: classes.gridList,\n        cellHeight: 60,\n        cols: 1,\n        ref: function ref(elem) {\n          _this2.gridlist = elem;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, this.guesses.map(function (tile) {\n        return React.createElement(GridListTile, {\n          key: tile.key,\n          cols: 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          },\n          __self: this\n        }, _this2.getLine(tile));\n      }))))))))));\n    }\n  }]);\n\n  return GuessingScreen;\n}(Component);\n\nexport default withRouter(withStyles(styles)(GuessingScreen));","map":{"version":3,"sources":["/home/amy/mystery-function/src/components/GuessingScreen.js"],"names":["React","Component","withStyles","withRouter","CssBaseline","Typography","Grid","TabsWrapper","Paper","GridList","GridListTile","EvalGuessLine","EvalInputLine","DummyLine","gridListHeight","styles","theme","root","flexGrow","backgroundColor","palette","grey","overflow","backgroundSize","backgroundPosition","paddingBottom","grid","width","marginTop","breakpoints","down","panel","paper","padding","spacing","textAlign","color","text","secondary","rangeLabel","display","justifyContent","paddingTop","topBar","alignItems","outlinedButtom","textTransform","margin","actionButtom","blockCenter","block","box","marginBottom","height","tallBox","inlining","marginRight","buttonBar","alignRight","noBorder","borderBottomStyle","loadingState","opacity","loadingMessage","position","top","left","gridList","alignContent","gridListWrapper","flexWrap","background","dummyTiles","guesses","numTiles","i","push","key","type","GuessingScreen","scrolling","scrollDown","gridlist","scrollTop","scrollHeight","clearInterval","scrollId","guessMade","setState","setInterval","tile","in","out","result","reason","classes","props","funcObj","elem","map","getLine"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport withStyles from '@material-ui/styles/withStyles';\nimport { withRouter } from 'react-router-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport TabsWrapper from './TabsWrapper';\nimport Paper from '@material-ui/core/Paper';\nimport { GridList, GridListTile } from '@material-ui/core';\nimport EvalGuessLine from './EvalGuessLine';\nimport EvalInputLine from './EvalInputLine';\nimport DummyLine from './DummyLine';\n\nconst gridListHeight = 500;\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.grey['100'],\n    overflow: 'hidden',\n    backgroundSize: 'cover',\n    backgroundPosition: '0 400px',\n    paddingBottom: 200\n  },\n  grid: {\n    width: 1200,\n    marginTop: 40,\n    [theme.breakpoints.down('sm')]: {\n      width: 'calc(100% - 20px)'\n    },\n  },\n  panel: {\n    width: 600,\n    marginTop: 40,\n    [theme.breakpoints.down('sm')]: {\n      width: 'calc(100% - 20px)'\n    },\n  },\n  paper: {\n    padding: theme.spacing(3),\n    textAlign: 'left',\n    color: theme.palette.text.secondary,\n  },\n  rangeLabel: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    paddingTop: theme.spacing(2)\n  },\n  topBar: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginTop: 32\n  },\n  outlinedButtom: {\n    textTransform: 'uppercase',\n    margin: theme.spacing(1)\n  },\n  actionButtom: {\n    textTransform: 'uppercase',\n    margin: theme.spacing(1),\n    width: 152\n  },\n  blockCenter: {\n    padding: theme.spacing(2),\n    textAlign: 'center'\n  },\n  block: {\n    padding: theme.spacing(2),\n  },\n  box: {\n    marginBottom: 40,\n    height: 120\n  },\n  tallBox: {\n    marginBottom: 40,\n    height: 320\n  },\n  inlining: {\n    display: 'inline-block',\n    marginRight: 10\n  },\n  buttonBar: {\n    display: 'flex'\n  },\n  alignRight: {\n    display: 'flex',\n    justifyContent: 'flex-end'\n  },\n  noBorder: {\n    borderBottomStyle: 'hidden'\n  },\n  loadingState: {\n    opacity: 0.05\n  },\n  loadingMessage: {\n    position: 'absolute',\n    top: '40%',\n    left: '40%'\n  },\n  gridList: {\n    width: 400,\n    height: gridListHeight,\n    alignContent: 'flex-start',\n  },\n  gridListWrapper: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n  },\n});\n\nfunction dummyTiles() {\n  var guesses = [];\n  var numTiles = gridListHeight / 80\n  for (var i = -1 * numTiles; i < 0; i++) {\n    guesses.push({\n      key: i,\n      type: \"dummy_line\"\n    });\n  }\n  return guesses;\n}\n\nclass GuessingScreen extends Component {\n  guesses = dummyTiles();\n  scrolling = false;\n  scrollId;\n\n  // If not at bottom of screen yet, scroll; stop repeated call if reached\n  scrollDown = () => {\n    if (this.gridlist === null) {\n      return;\n    }\n    if (this.gridlist.scrollTop < this.gridlist.scrollHeight - gridListHeight) {\n      this.gridlist.scrollTop += 5;\n    } else {\n      clearInterval(this.scrollId);\n      this.scrolling = false;\n    }\n  }\n\n  // Update the guesses list shown in the console, and scroll down to new guess\n  guessMade = () => {\n    this.setState({ guesses: this.guesses, scrollId: this.scrollId, scrolling: this.scrolling });\n    if (!this.scrolling) {\n      this.scrollId = setInterval(this.scrollDown, 10);\n      this.scrolling = true;\n    }\n  }\n\n  getLine(tile, gridlist) {\n    if (tile.type === \"dummy_line\") {\n      return (\n        <DummyLine></DummyLine>\n      );\n    }\n    if (tile.type === \"eval_input\") {\n      return (\n        <EvalInputLine in={tile.in} out={tile.out}></EvalInputLine>\n      );\n    }\n    if (tile.type === \"eval_guess\") {\n      return (\n        <Grid container spacing={1}>\n          <Grid item>\n            <EvalGuessLine in={tile.in} out={tile.out} result={tile.result}></EvalGuessLine>\n          </Grid>\n          <Grid item><i>({tile.reason})</i></Grid>\n        </Grid>\n      );\n    }\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        < div className={classes.root} >\n          {/* Center all Grids */}\n          < Grid container justify=\"center\" spacing={4}>\n\n            {/* Left half panel */}\n            < Grid container item spacing={4} className={classes.panel} alignContent=\"flex-start\" >\n              {/* Function signature */}\n              < Grid item xs={12} >\n                <Typography color='secondary' gutterBottom >\n                  This mystery function takes an input of type\n                  <ul>\n                    <li>\n                      <b>list of integers</b> :\n                    comma separated numbers surrounded by square brackets like so: [1,2,3,4,5]\n                    </li>\n                  </ul>\n                  and an output of type\n                  <ul>\n                    <li>\n                      <b>boolean</b> : the strings <b>true</b> or <b>false</b>, no capitalization\n                    </li>\n                  </ul>\n                </Typography>\n              </Grid>\n\n              <Grid item xs={12} >\n                <TabsWrapper guesses={this.guesses} funcObj={classes.funcObj} updateFunc={this.guessMade}></TabsWrapper>\n              </Grid>\n            </Grid>\n\n            <Grid container item spacing={4} className={classes.panel}>\n              <Paper className={classes.paper}>\n                <div className={classes.gridListWrapper}>\n                  <Grid container spacing={4} alignContent=\"center\">\n                    <Grid item>\n                      <GridList className={classes.gridList} cellHeight={60} cols={1} ref={(elem) => { this.gridlist = elem; }}>\n                        {this.guesses.map(tile => (\n                          <GridListTile key={tile.key} cols={1}>\n                            {this.getLine(tile)}\n                          </GridListTile>\n                        ))}\n                      </GridList>\n                    </Grid>\n                  </Grid>\n                </div>\n              </Paper>\n            </Grid>\n\n          </Grid>\n        </div>\n      </React.Fragment >\n    )\n  }\n}\n\nexport default withRouter(withStyles(styles)(GuessingScreen));"]},"metadata":{},"sourceType":"module"}