userid,fcnname,actionid,actiontype,time,input,output,quizq,actualoutput,result,finalguess,
tdelvecc,IsDag,0,eval_input,2020-04-03 14:59:28,"inst myInst {
  Node = none
  edges = none
  }",true,,,,,
tdelvecc,IsDag,1,eval_input,2020-04-03 14:59:33,"inst myInst {
  Node = A
  edges = none
  }",true,,,,,
tdelvecc,IsDag,2,eval_input,2020-04-03 14:59:39,"inst myInst {
  Node = A + B
  edges = none
  }",true,,,,,
tdelvecc,IsDag,3,eval_input,2020-04-03 14:59:46,"inst myInst {
  Node = A + B + C
  edges = none
  }",true,,,,,
tdelvecc,IsDag,4,eval_input,2020-04-03 14:59:58,"inst myInst {
  Node = A + B + C
  edges = A->A
  }",false,,,,,
tdelvecc,IsDag,5,eval_input,2020-04-03 15:00:03,"inst myInst {
  Node = A + B + C
  edges = A->B
  }",true,,,,,
tdelvecc,IsDag,6,eval_input,2020-04-03 15:00:10,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
  }",false,,,,,
tdelvecc,IsDag,7,eval_input,2020-04-03 15:00:14,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
  }",true,,,,,
tdelvecc,IsDag,8,eval_input,2020-04-03 15:00:20,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
  }",false,,,,,
tdelvecc,IsDag,9,eval_input,2020-04-03 15:00:34,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + B->A
  }",false,,,,,
tdelvecc,IsDag,10,eval_input,2020-04-03 15:01:05,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + A->D
  }",true,,,,,
tdelvecc,IsDag,11,eval_input,2020-04-03 15:01:12,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + A->D + B->D
  }",true,,,,,
tdelvecc,IsDag,12,eval_input,2020-04-03 15:01:20,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + A->D + B->D + A->C
  }",true,,,,,
tdelvecc,IsDag,13,eval_input,2020-04-03 15:01:26,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + A->D + B->D + A->C + C->C
  }",false,,,,,
tdelvecc,IsDag,14,quiz_answer,2020-04-03 15:01:54,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
tdelvecc,IsDag,15,quiz_answer,2020-04-03 15:01:58,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
tdelvecc,IsDag,16,quiz_answer,2020-04-03 15:02:02,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
tdelvecc,IsDag,17,quiz_answer,2020-04-03 15:02:09,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
tdelvecc,IsDag,18,quiz_answer,2020-04-03 15:02:14,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
tdelvecc,IsDag,19,quiz_answer,2020-04-03 15:02:23,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
tdelvecc,IsDag,20,quiz_answer,2020-04-03 15:02:27,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
tdelvecc,IsDag,21,quiz_answer,2020-04-03 15:02:33,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
tdelvecc,IsDag,22,final_answer,2020-04-03 15:02:35,,,,,,The predicate checks whether the given graph is acyclic.,
tdelvecc,ThreeCycle,23,eval_input,2020-04-03 15:03:06,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + A->D + B->D + A->C + C->C
  }",false,,,,,
tdelvecc,ThreeCycle,24,eval_input,2020-04-03 15:04:33,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
tdelvecc,ThreeCycle,25,eval_input,2020-04-03 15:05:35,"inst myInst {
  Node = A
  edges = none
}",false,,,,,
tdelvecc,ThreeCycle,26,eval_input,2020-04-03 15:05:48,"inst myInst {
  Node = none
  edges = none
}",false,,,,,
tdelvecc,ThreeCycle,27,eval_input,2020-04-03 15:05:53,"inst myInst {
  Node = A
  edges = none
}",false,,,,,
tdelvecc,ThreeCycle,28,eval_input,2020-04-03 15:06:01,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
tdelvecc,ThreeCycle,29,eval_input,2020-04-03 15:06:08,"inst myInst {
  Node = A + B
  edges = none
}",false,,,,,
tdelvecc,ThreeCycle,30,eval_input,2020-04-03 15:06:13,"inst myInst {
  Node = A + B
  edges = A->B
}",false,,,,,
tdelvecc,ThreeCycle,31,eval_input,2020-04-03 15:06:21,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
tdelvecc,ThreeCycle,32,eval_input,2020-04-03 15:06:31,"inst myInst {
  Node = A + B
  edges = A->A + B->B
}",false,,,,,
tdelvecc,ThreeCycle,33,eval_input,2020-04-03 15:06:37,"inst myInst {
  Node = A + B
  edges = A->A + B->B + A->B + B->A
}",false,,,,,
tdelvecc,ThreeCycle,34,eval_input,2020-04-03 15:06:51,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
tdelvecc,ThreeCycle,35,eval_input,2020-04-03 15:07:00,"inst myInst {
  Node = A + B + C + D
  edges = A->C
}",false,,,,,
tdelvecc,ThreeCycle,36,eval_input,2020-04-03 15:07:26,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A + B->A + C->B + D->C
}",true,,,,,
tdelvecc,ThreeCycle,37,eval_input,2020-04-03 15:07:39,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A + B->A + C->B
}",true,,,,,
tdelvecc,ThreeCycle,38,eval_input,2020-04-03 15:08:16,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A + B->A
}",true,,,,,
tdelvecc,ThreeCycle,39,eval_input,2020-04-03 15:08:21,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
}",true,,,,,
tdelvecc,ThreeCycle,40,eval_input,2020-04-03 15:08:25,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C
}",false,,,,,
tdelvecc,ThreeCycle,41,eval_input,2020-04-03 15:08:31,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->B
}",false,,,,,
tdelvecc,ThreeCycle,42,eval_input,2020-04-03 15:08:42,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->B
}",true,,,,,
tdelvecc,ThreeCycle,43,eval_input,2020-04-03 15:08:48,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",true,,,,,
tdelvecc,ThreeCycle,44,eval_input,2020-04-03 15:09:00,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A + C->C
}",true,,,,,
tdelvecc,ThreeCycle,45,eval_input,2020-04-03 15:09:15,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->C + C->A
}",true,,,,,
tdelvecc,ThreeCycle,46,eval_input,2020-04-03 15:09:28,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->A + D->E + E->F + F->D
}",true,,,,,
tdelvecc,ThreeCycle,47,eval_input,2020-04-03 15:09:32,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + E->F + F->D
}",false,,,,,
tdelvecc,ThreeCycle,48,eval_input,2020-04-03 15:09:46,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
tdelvecc,ThreeCycle,49,eval_input,2020-04-03 15:09:51,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
tdelvecc,ThreeCycle,50,eval_input,2020-04-03 15:09:56,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->D + D->E + E->F + F->A
}",false,,,,,
tdelvecc,ThreeCycle,51,eval_input,2020-04-03 15:09:57,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->D + D->E + E->F + F->A
}",false,,,,,
tdelvecc,ThreeCycle,52,eval_input,2020-04-03 15:10:03,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->D + D->E + E->F + F->A + F->D
}",true,,,,,
tdelvecc,IsDag,0,eval_input,2020-04-03 19:32:28,"inst myInst {
  Node = A
  edges = A->A
  }",false,,,,,
tdelvecc,IsDag,1,eval_input,2020-04-03 19:32:33,"inst myInst {
  Node = A + B
  edges = A->B
  }",true,,,,,
tdelvecc,IsDag,2,quiz_answer,2020-04-03 19:32:47,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
tdelvecc,IsDag,3,quiz_answer,2020-04-03 19:32:51,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
tdelvecc,IsDag,4,quiz_answer,2020-04-03 19:32:56,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
tdelvecc,IsDag,5,quiz_answer,2020-04-03 19:33:02,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
tdelvecc,IsDag,6,quiz_answer,2020-04-03 19:33:05,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
tdelvecc,IsDag,7,quiz_answer,2020-04-03 19:33:09,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
tdelvecc,IsDag,8,quiz_answer,2020-04-03 19:33:15,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
tdelvecc,IsDag,9,quiz_answer,2020-04-03 19:33:19,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
tdelvecc,IsDag,10,final_answer,2020-04-03 19:33:21,,,,,,is dag,
tdelvecc,ThreeCycle,11,eval_input,2020-04-03 19:33:34,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
  }",true,,,,,
tdelvecc,ThreeCycle,12,eval_input,2020-04-03 19:33:37,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->B
  }",false,,,,,
tdelvecc,ThreeCycle,13,quiz_answer,2020-04-03 19:34:24,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
tdelvecc,ThreeCycle,14,quiz_answer,2020-04-03 19:34:26,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
tdelvecc,ThreeCycle,15,quiz_answer,2020-04-03 19:34:28,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
tdelvecc,ThreeCycle,16,quiz_answer,2020-04-03 19:34:32,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
tdelvecc,ThreeCycle,17,quiz_answer,2020-04-03 19:34:36,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
tdelvecc,ThreeCycle,18,quiz_answer,2020-04-03 19:34:39,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
tdelvecc,ThreeCycle,19,quiz_answer,2020-04-03 19:34:43,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
tdelvecc,ThreeCycle,20,quiz_answer,2020-04-03 19:34:47,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
tdelvecc,ThreeCycle,21,final_answer,2020-04-03 19:34:48,,,,,,has three distinct nodes which form a cycle,
tdelvecc,IsBipartite,22,eval_input,2020-04-03 19:35:17,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
  }",false,,,,,
tdelvecc,IsBipartite,23,eval_input,2020-04-03 19:35:25,"inst myInst {
  Node = none
  edges = none
  }",true,,,,,
tdelvecc,IsBipartite,24,eval_input,2020-04-03 19:35:28,"inst myInst {
  Node = A
  edges = none
  }",true,,,,,
tdelvecc,IsBipartite,25,eval_input,2020-04-03 19:35:31,"inst myInst {
  Node = A + B
  edges = none
  }",true,,,,,
tdelvecc,IsBipartite,26,eval_input,2020-04-03 19:35:33,"inst myInst {
  Node = A + B + C
  edges = none
  }",true,,,,,
tdelvecc,IsBipartite,27,eval_input,2020-04-03 19:35:35,"inst myInst {
  Node = A + B + C + D
  edges = none
  }",true,,,,,
tdelvecc,IsBipartite,28,eval_input,2020-04-03 19:35:41,"inst myInst {
  Node = A
  edges = A->A
  }",false,,,,,
tdelvecc,IsBipartite,29,eval_input,2020-04-03 19:35:47,"inst myInst {
  Node = A + B
  edges = A->B
  }",true,,,,,
tdelvecc,IsBipartite,30,eval_input,2020-04-03 19:35:51,"inst myInst {
  Node = A + B
  edges = A->A
  }",false,,,,,
tdelvecc,IsBipartite,31,eval_input,2020-04-03 19:35:57,"inst myInst {
  Node = A + B
  edges = A->B + B->A
  }",true,,,,,
tdelvecc,IsBipartite,32,eval_input,2020-04-03 19:36:27,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
  }",false,,,,,
tdelvecc,IsBipartite,33,eval_input,2020-04-03 19:36:35,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
  }",true,,,,,
tdelvecc,IsBipartite,34,eval_input,2020-04-03 19:36:37,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->B
  }",false,,,,,
tdelvecc,IsBipartite,35,eval_input,2020-04-03 19:36:47,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->C
  }",false,,,,,
tdelvecc,IsBipartite,36,eval_input,2020-04-03 19:36:51,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->B
  }",true,,,,,
tdelvecc,IsBipartite,37,quiz_answer,2020-04-03 19:37:13,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
tdelvecc,IsBipartite,38,quiz_answer,2020-04-03 19:37:37,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
tdelvecc,IsBipartite,39,quiz_answer,2020-04-03 19:37:42,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
tdelvecc,IsBipartite,40,quiz_answer,2020-04-03 19:37:45,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
tdelvecc,IsBipartite,41,quiz_answer,2020-04-03 19:37:51,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
tdelvecc,IsBipartite,42,quiz_answer,2020-04-03 19:37:55,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
tdelvecc,IsBipartite,43,quiz_answer,2020-04-03 19:37:59,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
tdelvecc,IsBipartite,44,quiz_answer,2020-04-03 19:38:03,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
tdelvecc,IsBipartite,45,quiz_answer,2020-04-03 19:38:07,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
tdelvecc,IsBipartite,46,final_answer,2020-04-03 19:38:08,,,,,,has NO odd-cycle,
wschor,IsBipartite,0,eval_input,2020-04-06 10:16:24,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
wschor,IsBipartite,1,eval_input,2020-04-06 10:16:52,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
}",true,,,,,
wschor,IsBipartite,2,eval_input,2020-04-06 10:17:21,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",false,,,,,
wschor,IsBipartite,3,eval_input,2020-04-06 10:17:51,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A
}",true,,,,,
wschor,IsBipartite,4,eval_input,2020-04-06 10:18:06,"inst myInst {
  Node = A
       + B
  edges = A->B + B->A
}",true,,,,,
wschor,IsBipartite,5,eval_input,2020-04-06 10:18:33,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A 
}",true,,,,,
wschor,IsBipartite,6,eval_input,2020-04-06 10:19:11,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + A->C 
}",true,,,,,
wschor,IsBipartite,7,eval_input,2020-04-06 10:19:57,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
wschor,IsBipartite,8,eval_input,2020-04-06 10:20:30,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + D->A + A->C
}",false,,,,,
wschor,IsBipartite,9,eval_input,2020-04-06 10:21:06,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->A
}",false,,,,,
wschor,IsBipartite,10,eval_input,2020-04-06 10:22:37,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A->B + A->C + C->D + C->E + E->D
}",true,,,,,
wschor,IsBipartite,11,eval_input,2020-04-06 10:23:05,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A->B + A->C + D->E + C->E + E->D
}",true,,,,,
wschor,IsBipartite,12,eval_input,2020-04-06 10:23:52,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A->B + A->C + D->C + C->E + E->D
}",false,,,,,
wschor,IsBipartite,13,quiz_answer,2020-04-06 10:25:44,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
wschor,IsBipartite,14,eval_input,2020-04-06 10:26:22,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
wschor,IsBipartite,15,eval_input,2020-04-06 10:28:05,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
wschor,IsBipartite,16,eval_input,2020-04-06 10:28:25,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->D + D->E + E->F + F->A
}",true,,,,,
wschor,IsBipartite,17,quiz_answer,2020-04-06 10:29:05,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
wschor,IsBipartite,18,quiz_answer,2020-04-06 10:29:14,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
wschor,IsBipartite,19,quiz_answer,2020-04-06 10:29:25,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
wschor,IsBipartite,20,quiz_answer,2020-04-06 10:29:59,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
wschor,IsBipartite,21,quiz_answer,2020-04-06 10:30:20,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
wschor,IsBipartite,22,quiz_answer,2020-04-06 10:30:30,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
wschor,IsBipartite,23,quiz_answer,2020-04-06 10:30:57,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
wschor,IsBipartite,24,quiz_answer,2020-04-06 10:31:12,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
wschor,IsBipartite,25,final_answer,2020-04-06 10:31:15,,,,,,True if and only if graph does not contain an odd-sized cycle,
wschor,ThreeCycle,26,eval_input,2020-04-06 10:32:34,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
wschor,ThreeCycle,27,eval_input,2020-04-06 10:32:45,"inst myInst {
  Node = A + B
  edges = A->B
}",false,,,,,
wschor,ThreeCycle,28,eval_input,2020-04-06 10:33:02,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C
}",false,,,,,
wschor,ThreeCycle,29,eval_input,2020-04-06 10:33:15,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",true,,,,,
wschor,ThreeCycle,30,eval_input,2020-04-06 10:33:34,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A 
}",false,,,,,
wschor,ThreeCycle,31,eval_input,2020-04-06 10:34:08,"inst myInst {
  Node = A + B + C + D + E + F + G
  edges = A->B + B->C + C->A
}",true,,,,,
wschor,ThreeCycle,32,eval_input,2020-04-06 10:34:18,"inst myInst {
  Node = A + B + C + D + E + F + G
  edges = A->B + B->C + C->A + E->F
}",true,,,,,
wschor,ThreeCycle,33,eval_input,2020-04-06 10:34:51,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
wschor,ThreeCycle,34,eval_input,2020-04-06 10:35:33,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->A + D->C 
}",false,,,,,
wschor,ThreeCycle,35,eval_input,2020-04-06 10:35:41,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->A + A->C 
}",true,,,,,
wschor,ThreeCycle,36,eval_input,2020-04-06 10:36:52,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
wschor,ThreeCycle,37,eval_input,2020-04-06 10:37:21,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->A + C->A
}",true,,,,,
wschor,ThreeCycle,38,eval_input,2020-04-06 10:38:00,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
wschor,ThreeCycle,39,eval_input,2020-04-06 10:38:22,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->A + A->C
}",true,,,,,
wschor,ThreeCycle,40,eval_input,2020-04-06 10:38:37,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->A + A->C
}",true,,,,,
wschor,ThreeCycle,41,quiz_answer,2020-04-06 10:39:37,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
wschor,ThreeCycle,42,quiz_answer,2020-04-06 10:39:43,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
wschor,ThreeCycle,43,quiz_answer,2020-04-06 10:39:49,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
wschor,ThreeCycle,44,quiz_answer,2020-04-06 10:40:06,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
wschor,ThreeCycle,45,quiz_answer,2020-04-06 10:40:13,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
wschor,ThreeCycle,46,quiz_answer,2020-04-06 10:40:21,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
wschor,ThreeCycle,47,quiz_answer,2020-04-06 10:40:31,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
wschor,ThreeCycle,48,quiz_answer,2020-04-06 10:40:43,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
wschor,ThreeCycle,49,final_answer,2020-04-06 10:40:46,,,,,,True if and only if graph contains a three ring,
wschor,IsDag,50,eval_input,2020-04-06 10:41:09,"inst myInst {
  Node = A 
  edges = A->A
}",false,,,,,
wschor,IsDag,51,eval_input,2020-04-06 10:41:36,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
wschor,IsDag,52,eval_input,2020-04-06 10:41:56,"inst myInst {
  Node = A + B
  edges = A->B
}",true,,,,,
wschor,IsDag,53,eval_input,2020-04-06 10:42:03,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
wschor,IsDag,54,eval_input,2020-04-06 10:42:24,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
wschor,IsDag,55,eval_input,2020-04-06 10:42:33,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C 
}",true,,,,,
wschor,IsDag,56,eval_input,2020-04-06 10:43:02,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + C->B
}",true,,,,,
wschor,IsDag,57,quiz_answer,2020-04-06 10:43:38,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
wschor,IsDag,58,quiz_answer,2020-04-06 10:43:43,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
wschor,IsDag,59,quiz_answer,2020-04-06 10:43:51,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
wschor,IsDag,60,quiz_answer,2020-04-06 10:43:59,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
wschor,IsDag,61,quiz_answer,2020-04-06 10:44:08,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
wschor,IsDag,62,quiz_answer,2020-04-06 10:44:21,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
wschor,IsDag,63,quiz_answer,2020-04-06 10:44:31,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
wschor,IsDag,64,quiz_answer,2020-04-06 10:44:43,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
wschor,IsDag,65,final_answer,2020-04-06 10:44:46,,,,,,True iff acyclic,
yxin9,IsDag,0,eval_input,2020-04-06 11:11:06,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
yxin9,IsDag,1,eval_input,2020-04-06 11:12:55,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
yxin9,IsDag,2,eval_input,2020-04-06 11:13:02,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
yxin9,IsDag,3,eval_input,2020-04-06 11:13:10,"inst myInst {
  Node = A+B
  edges = A->B
}",true,,,,,
ptheodor,ThreeCycle,0,eval_input,2020-04-06 11:13:13,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
yxin9,IsDag,4,eval_input,2020-04-06 11:13:17,"inst myInst {
  Node = A+B+C
  edges = A->B
}",true,,,,,
yxin9,IsDag,5,eval_input,2020-04-06 11:13:26,"inst myInst {
  Node = A+B+C
  edges = A->C
}",true,,,,,
ptheodor,ThreeCycle,1,eval_input,2020-04-06 11:13:31,"inst myInst {
  Node = A
       + B
  edges = none
}",false,,,,,
yxin9,IsDag,6,eval_input,2020-04-06 11:13:32,"inst myInst {
  Node = A+B+C
  edges = A->B+B->A
}",false,,,,,
ptheodor,ThreeCycle,2,eval_input,2020-04-06 11:13:36,"inst myInst {
  Node = A
  edges = none
}",false,,,,,
yxin9,IsDag,7,eval_input,2020-04-06 11:13:36,"inst myInst {
  Node = A+B+C
  edges = A->B+B->C
}",true,,,,,
ptheodor,ThreeCycle,3,eval_input,2020-04-06 11:13:41,"inst myInst {
  Node = A
  edges = A -> A
}",false,,,,,
ptheodor,ThreeCycle,4,eval_input,2020-04-06 11:13:51,"inst myInst {
  Node = A
        + B
  edges = A -> A
}",false,,,,,
ptheodor,ThreeCycle,5,eval_input,2020-04-06 11:13:54,"inst myInst {
  Node = A
        + B
  edges = A -> B
}",false,,,,,
yxin9,IsDag,8,eval_input,2020-04-06 11:14:03,"inst myInst {
  Node = A+B+C+D
  edges = A->B+B->C
}",true,,,,,
ptheodor,ThreeCycle,6,eval_input,2020-04-06 11:14:06,"inst myInst {
  Node = A
        + B
  edges = A -> B
        + B -> A
}",false,,,,,
ptheodor,ThreeCycle,7,eval_input,2020-04-06 11:14:11,"inst myInst {
  Node = A
        + B
        + C
  edges = A -> B
        + B -> A
}",false,,,,,
ptheodor,ThreeCycle,8,eval_input,2020-04-06 11:14:15,"inst myInst {
  Node = A
        + B
        + C
  edges = A -> B
        
}",false,,,,,
yxin9,IsDag,9,eval_input,2020-04-06 11:14:18,"inst myInst {
  Node = A+B+C+D
  edges = A->A
}",false,,,,,
yxin9,IsDag,10,eval_input,2020-04-06 11:14:56,"inst myInst {
  Node = A+B+C+D
  edges = A->A
}",false,,,,,
ptheodor,ThreeCycle,9,eval_input,2020-04-06 11:15:08,"inst myInst {
  Node = A
        + B
        + C
  edges = A -> B
        + B -> C
        + B -> A
}",false,,,,,
ptheodor,ThreeCycle,10,eval_input,2020-04-06 11:15:15,"inst myInst {
  Node = A
        + B
        + C
  edges = none
}",false,,,,,
yxin9,IsDag,11,quiz_answer,2020-04-06 11:15:19,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ptheodor,ThreeCycle,11,eval_input,2020-04-06 11:15:22,"inst myInst {
  Node = A
        + B
        + C
  edges = A -> A
}",false,,,,,
yxin9,IsDag,12,quiz_answer,2020-04-06 11:15:27,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
yxin9,IsDag,13,quiz_answer,2020-04-06 11:15:32,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
ptheodor,ThreeCycle,12,eval_input,2020-04-06 11:15:38,"inst myInst {
  Node = A
        + B
        + C
  edges = B -> B
}",false,,,,,
ptheodor,ThreeCycle,13,eval_input,2020-04-06 11:15:45,"inst myInst {
  Node = A
        + B
        + C
  edges = none
}",false,,,,,
ptheodor,ThreeCycle,14,eval_input,2020-04-06 11:15:48,"inst myInst {
  Node = none
  edges = none
}",false,,,,,
ptheodor,ThreeCycle,15,eval_input,2020-04-06 11:15:56,"inst myInst {
  Node = A + B + C + D
  edges = none
}",false,,,,,
ptheodor,ThreeCycle,16,eval_input,2020-04-06 11:16:02,"inst myInst {
  Node = A + B + C + D
  edges = A -> C
}",false,,,,,
ptheodor,ThreeCycle,17,eval_input,2020-04-06 11:16:03,"inst myInst {
  Node = A + B + C + D
  edges = A -> C
}",false,,,,,
ptheodor,ThreeCycle,18,eval_input,2020-04-06 11:16:04,"inst myInst {
  Node = A + B + C + D
  edges = A -> C
}",false,,,,,
ptheodor,ThreeCycle,19,eval_input,2020-04-06 11:16:08,"inst myInst {
  Node = A + B + C + D
  edges = A -> C + C -> A
}",false,,,,,
ptheodor,ThreeCycle,20,eval_input,2020-04-06 11:16:23,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C
}",false,,,,,
ptheodor,ThreeCycle,21,eval_input,2020-04-06 11:16:24,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C
}",false,,,,,
ptheodor,ThreeCycle,22,eval_input,2020-04-06 11:16:25,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C
}",false,,,,,
ptheodor,ThreeCycle,23,eval_input,2020-04-06 11:16:32,"inst myInst {
  Node = A + B
  edges = A -> B + B -> A
}",false,,,,,
ptheodor,ThreeCycle,24,eval_input,2020-04-06 11:16:36,"inst myInst {
  Node = A + B
  edges = A -> B + B -> B
}",false,,,,,
ptheodor,ThreeCycle,25,eval_input,2020-04-06 11:16:44,"inst myInst {
  Node = A + B
  edges = A -> B + A -> A
}",false,,,,,
ptheodor,ThreeCycle,26,eval_input,2020-04-06 11:17:16,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> A + A -> C
}",false,,,,,
ptheodor,ThreeCycle,27,eval_input,2020-04-06 11:17:22,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> A + A -> C + C -> A
}",false,,,,,
ptheodor,ThreeCycle,28,eval_input,2020-04-06 11:17:36,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> A 
        + A -> C + C -> A
        + B -> C + C -> B
}",true,,,,,
yxin9,IsDag,14,quiz_answer,2020-04-06 11:17:43,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
yxin9,IsDag,15,quiz_answer,2020-04-06 11:17:57,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
ptheodor,ThreeCycle,29,eval_input,2020-04-06 11:18:11,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> A 
        + A -> C + C -> A
        + B -> C + C -> B
        + A -> D + D -> A
        + B -> D + D -> B
        + C -> D + D -> C
}",true,,,,,
yxin9,IsDag,16,quiz_answer,2020-04-06 11:18:26,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
ptheodor,ThreeCycle,30,eval_input,2020-04-06 11:18:44,"inst myInst {
  Node = A + B
  edges = A -> B + B -> A
}",false,,,,,
ptheodor,ThreeCycle,31,eval_input,2020-04-06 11:18:54,"inst myInst {
  Node = A + B
  edges = none
}",false,,,,,
ptheodor,ThreeCycle,32,eval_input,2020-04-06 11:19:14,"inst myInst {
  Node = A + B
  edges = A -> B
}",false,,,,,
ptheodor,ThreeCycle,33,eval_input,2020-04-06 11:19:32,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + C -> A
}",true,,,,,
ptheodor,ThreeCycle,34,eval_input,2020-04-06 11:19:43,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> A
}",false,,,,,
yxin9,IsDag,17,quiz_answer,2020-04-06 11:19:45,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
ptheodor,ThreeCycle,35,eval_input,2020-04-06 11:19:57,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> D + D -> A
}",true,,,,,
yxin9,IsDag,18,quiz_answer,2020-04-06 11:19:57,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
yxin9,IsDag,19,final_answer,2020-04-06 11:20:00,,,,,,returns if the given graph is acyclic,
ptheodor,ThreeCycle,36,eval_input,2020-04-06 11:20:21,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> D + D -> A
}",false,,,,,
ptheodor,ThreeCycle,37,eval_input,2020-04-06 11:20:33,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> D + D -> A
         + C -> A
}",true,,,,,
yxin9,ThreeCycle,20,eval_input,2020-04-06 11:20:49,"inst myInst {
  Node = A+B+C+D
  edges = A->A
}",false,,,,,
yxin9,ThreeCycle,21,eval_input,2020-04-06 11:21:09,"inst myInst {
  Node = A+B+C+D
  edges = none
  
}",false,,,,,
yxin9,ThreeCycle,22,eval_input,2020-04-06 11:21:15,"inst myInst {
  Node = A
  edges = none
  
}",false,,,,,
yxin9,ThreeCycle,23,eval_input,2020-04-06 11:21:28,"inst myInst {
  Node = A+B
  edges = A->B
  
}",false,,,,,
ptheodor,ThreeCycle,38,quiz_answer,2020-04-06 11:27:30,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ptheodor,ThreeCycle,39,quiz_answer,2020-04-06 11:27:35,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
ptheodor,ThreeCycle,40,quiz_answer,2020-04-06 11:27:39,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
ptheodor,ThreeCycle,41,quiz_answer,2020-04-06 11:27:51,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
ptheodor,ThreeCycle,42,quiz_answer,2020-04-06 11:27:58,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
ptheodor,ThreeCycle,43,quiz_answer,2020-04-06 11:28:03,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
ptheodor,ThreeCycle,44,quiz_answer,2020-04-06 11:28:09,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
ptheodor,ThreeCycle,45,quiz_answer,2020-04-06 11:28:15,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
ptheodor,ThreeCycle,46,final_answer,2020-04-06 11:28:18,,,,,,"--graph requires a cycle of three elements
some a,b,c: Node |  (b + c) in (a.edges + edges.a) and (b+c) in (a.^edges) and (b in (c.edges or (edges.c))",
ptheodor,IsDag,47,eval_input,2020-04-06 11:28:41,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> D + D -> A
         + C -> A
}",false,,,,,
ptheodor,IsDag,48,eval_input,2020-04-06 11:28:49,"inst myInst {
  Node = A + B + C + D
  edges = none
}",true,,,,,
ptheodor,IsDag,49,eval_input,2020-04-06 11:28:56,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
ptheodor,IsDag,50,eval_input,2020-04-06 11:29:00,"inst myInst {
  Node = A
  edges = A -> A
}",false,,,,,
ptheodor,IsDag,51,eval_input,2020-04-06 11:29:05,"inst myInst {
  Node = A + B
  edges = none
}",true,,,,,
ptheodor,IsDag,52,eval_input,2020-04-06 11:29:12,"inst myInst {
  Node = A + B
  edges = A -> B
}",true,,,,,
ptheodor,IsDag,53,eval_input,2020-04-06 11:29:17,"inst myInst {
  Node = A + B
  edges = A -> B + B-> A
}",false,,,,,
ptheodor,IsDag,54,eval_input,2020-04-06 11:29:23,"inst myInst {
  Node = A + B + C
  edges = A -> B
}",true,,,,,
ptheodor,IsDag,55,eval_input,2020-04-06 11:29:29,"inst myInst {
  Node = A + B + C
  edges = A -> B + B-> C
}",true,,,,,
ptheodor,IsDag,56,eval_input,2020-04-06 11:29:33,"inst myInst {
  Node = A + B + C
  edges = A -> B + B-> C + C -> A
}",false,,,,,
ptheodor,IsDag,57,eval_input,2020-04-06 11:29:39,"inst myInst {
  Node = A + B + C
  edges = A -> B + B-> C + C -> B
}",false,,,,,
ptheodor,IsDag,58,eval_input,2020-04-06 11:29:43,"inst myInst {
  Node = A + B + C
  edges = A -> B + B-> C
}",true,,,,,
ptheodor,IsDag,59,eval_input,2020-04-06 11:30:18,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B-> C + D -> A + A -> C 
}",true,,,,,
ptheodor,IsDag,60,eval_input,2020-04-06 11:30:27,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B-> C + D -> A + A -> C + A -> A
}",false,,,,,
ptheodor,IsDag,61,quiz_answer,2020-04-06 11:30:38,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ptheodor,IsDag,62,quiz_answer,2020-04-06 11:30:42,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
ptheodor,IsDag,63,quiz_answer,2020-04-06 11:30:46,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
ptheodor,IsDag,64,quiz_answer,2020-04-06 11:30:53,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
yxin9,ThreeCycle,24,eval_input,2020-04-06 11:30:53,"inst myInst {
  Node = none
  edges = none
  
}",false,,,,,
ptheodor,IsDag,65,quiz_answer,2020-04-06 11:31:02,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
yxin9,ThreeCycle,25,eval_input,2020-04-06 11:31:02,"inst myInst {
  Node = A
  edges = A->A
  
}",false,,,,,
ptheodor,IsDag,66,quiz_answer,2020-04-06 11:31:09,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
yxin9,ThreeCycle,26,eval_input,2020-04-06 11:31:12,"inst myInst {
  Node = A+B
  edges = A->B+B->A
  
}",false,,,,,
ptheodor,IsDag,67,quiz_answer,2020-04-06 11:31:13,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
ptheodor,IsDag,68,quiz_answer,2020-04-06 11:31:18,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
ptheodor,IsDag,69,final_answer,2020-04-06 11:31:19,,,,,,graph is acyclic,
yxin9,ThreeCycle,27,eval_input,2020-04-06 11:31:22,"inst myInst {
  Node = A+B
  edges = A->B+B->A+A->A+B->B
  
}",false,,,,,
ptheodor,IsBipartite,70,eval_input,2020-04-06 11:31:32,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B-> C + D -> A + A -> C + A -> A
}",false,,,,,
ptheodor,IsBipartite,71,eval_input,2020-04-06 11:31:36,"inst myInst {
  Node = A + B + C + D
  edges = none
}",true,,,,,
ptheodor,IsBipartite,72,eval_input,2020-04-06 11:31:42,"inst myInst {
  Node = A + B + C + D
  edges =  A-> B
}",true,,,,,
ptheodor,IsBipartite,73,eval_input,2020-04-06 11:31:48,"inst myInst {
  Node = A + B + C + D
  edges =  A-> B + B-> C
}",true,,,,,
ptheodor,IsBipartite,74,eval_input,2020-04-06 11:31:54,"inst myInst {
  Node = A + B + C + D
  edges =  A-> B + B-> C + C -> D
}",true,,,,,
yxin9,ThreeCycle,28,eval_input,2020-04-06 11:32:06,"inst myInst {
  Node = A+B
  edges = A->B+B->A
  
}",false,,,,,
ptheodor,IsBipartite,75,eval_input,2020-04-06 11:32:07,"inst myInst {
  Node = A + B + C + D
  edges =  A-> B + B-> C + C -> D + A -> D
}",true,,,,,
ptheodor,IsBipartite,76,eval_input,2020-04-06 11:32:17,"inst myInst {
  Node = A
  edges =  none
}",true,,,,,
yxin9,ThreeCycle,29,eval_input,2020-04-06 11:32:27,"inst myInst {
  Node = A+B
  edges = A->B+B->A
  
}",false,,,,,
ptheodor,IsBipartite,77,eval_input,2020-04-06 11:32:32,"inst myInst {
  Node = A
  edges =  A -> A
}",false,,,,,
ptheodor,IsBipartite,78,eval_input,2020-04-06 11:32:37,"inst myInst {
  Node = A + B
  edges =  A -> B
}",true,,,,,
ptheodor,IsBipartite,79,eval_input,2020-04-06 11:32:43,"inst myInst {
  Node = A + B
  edges =  A -> B + B -> A
}",true,,,,,
ptheodor,IsBipartite,80,eval_input,2020-04-06 11:33:14,"inst myInst {
  Node = A + B
  edges =  A -> B + B -> A
}",true,,,,,
ptheodor,IsBipartite,81,eval_input,2020-04-06 11:33:20,"inst myInst {
  Node = A + B
  edges =  A -> B + B -> A + B -> B
}",false,,,,,
ptheodor,IsBipartite,82,eval_input,2020-04-06 11:33:28,"inst myInst {
  Node = A + B + C
  edges =  A -> B + B -> A
}",true,,,,,
ptheodor,IsBipartite,83,eval_input,2020-04-06 11:33:37,"inst myInst {
  Node = A + B + C
  edges =  A -> B + B -> A + C -> A
}",true,,,,,
ptheodor,IsBipartite,84,eval_input,2020-04-06 11:33:43,"inst myInst {
  Node = A + B + C
  edges =  A -> B + B -> A + C -> A + A -> C
}",true,,,,,
yxin9,ThreeCycle,30,eval_input,2020-04-06 11:33:46,"inst myInst {
  Node = A+B+C
  edges = A->B+B->A
  
}",false,,,,,
yxin9,ThreeCycle,31,eval_input,2020-04-06 11:33:53,"inst myInst {
  Node = A+B+C
  edges = A->B+B->C
  
}",false,,,,,
ptheodor,IsBipartite,85,eval_input,2020-04-06 11:33:53,"inst myInst {
  Node = A + B + C
  edges =  A -> B + B -> A + C -> A + A -> C
       + B-> C
}",false,,,,,
ptheodor,IsBipartite,86,eval_input,2020-04-06 11:34:02,"inst myInst {
  Node = A + B + C
  edges =  A -> B + B -> A + A -> C
       + B-> C
}",true,,,,,
ptheodor,IsBipartite,87,eval_input,2020-04-06 11:35:40,"inst myInst {
  Node = A + B 
  edges =  A -> B 
}",true,,,,,
ptheodor,IsBipartite,88,eval_input,2020-04-06 11:35:44,"inst myInst {
  Node = A + B 
  edges =  none
}",true,,,,,
ptheodor,IsBipartite,89,eval_input,2020-04-06 11:35:53,"inst myInst {
  Node = A + B 
  edges =  A -> B
}",true,,,,,
ptheodor,IsBipartite,90,eval_input,2020-04-06 11:36:00,"inst myInst {
  Node = A + B 
  edges =  A -> A
}",false,,,,,
ptheodor,IsBipartite,91,eval_input,2020-04-06 11:36:12,"inst myInst {
  Node = A + B + C
  edges =  A -> B + B -> C
}",true,,,,,
ptheodor,IsBipartite,92,eval_input,2020-04-06 11:36:19,"inst myInst {
  Node = A + B + C
  edges =  A -> B + B -> C + C -> A
}",false,,,,,
ptheodor,IsBipartite,93,eval_input,2020-04-06 11:36:27,"inst myInst {
  Node = A + B + C
  edges =  A -> B + B -> C + C -> A + A -> C
}",false,,,,,
ptheodor,IsBipartite,94,eval_input,2020-04-06 11:37:56,"inst myInst {
  Node = A + B + C
  edges =  A -> B + B -> C + B -> A + C -> B
}",true,,,,,
ptheodor,IsBipartite,95,eval_input,2020-04-06 11:38:18,"inst myInst {
  Node = A + B + C
  edges =  A -> B + B -> C + B -> A + C -> B + A -> C
}",false,,,,,
yxin9,ThreeCycle,32,eval_input,2020-04-06 11:38:37,"inst myInst {
  Node = A+B+C
  edges = A->B
  
}",false,,,,,
yxin9,ThreeCycle,33,eval_input,2020-04-06 11:38:45,"inst myInst {
  Node = A+B+C
  edges = none
  
}",false,,,,,
yxin9,ThreeCycle,34,eval_input,2020-04-06 11:38:52,"inst myInst {
  Node = A
  edges = none
  
}",false,,,,,
yxin9,ThreeCycle,35,eval_input,2020-04-06 11:38:58,"inst myInst {
  Node = A
  edges = A->A
  
}",false,,,,,
ptheodor,IsBipartite,96,eval_input,2020-04-06 11:38:58,"inst myInst {
  Node = A + B + C + D
  edges =  A -> B + B -> C + C -> D + D -> A
}",true,,,,,
yxin9,ThreeCycle,36,eval_input,2020-04-06 11:39:14,"inst myInst {
  Node = A+B+C
  edges = A->B+B->C+C->A
  
}",true,,,,,
ptheodor,IsBipartite,97,eval_input,2020-04-06 11:39:19,"inst myInst {
  Node = A + B + C + D + E
  edges =  A -> B + B -> C + C -> D 
        + D -> E + E -> A
}",false,,,,,
ptheodor,IsBipartite,98,eval_input,2020-04-06 11:39:27,"inst myInst {
  Node = A + B + C + D + E
  edges =  A -> B + B -> C + C -> D 
        + D -> A + A -> E
}",true,,,,,
yxin9,ThreeCycle,37,eval_input,2020-04-06 11:39:30,"inst myInst {
  Node = A
  edges = A->A
  
}",false,,,,,
ptheodor,IsBipartite,99,eval_input,2020-04-06 11:39:40,"inst myInst {
  Node = A + B + C + D + E
  edges =  A -> B + B -> C + C -> D 
        + D -> A + A -> E + B -> E 
}",true,,,,,
yxin9,ThreeCycle,38,eval_input,2020-04-06 11:39:50,"inst myInst {
  Node = A+B+C
  edges = A->A+A->B+B->C+C->A
  
}",true,,,,,
yxin9,ThreeCycle,39,eval_input,2020-04-06 11:39:58,"inst myInst {
  Node = A+B+C+D
  edges = A->A+A->B+B->C+C->A
  
}",true,,,,,
ptheodor,IsBipartite,100,quiz_answer,2020-04-06 11:40:22,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ptheodor,IsBipartite,101,quiz_answer,2020-04-06 11:40:26,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
ptheodor,IsBipartite,102,quiz_answer,2020-04-06 11:40:29,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
ptheodor,IsBipartite,103,quiz_answer,2020-04-06 11:40:35,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
yxin9,ThreeCycle,40,quiz_answer,2020-04-06 11:40:40,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ptheodor,IsBipartite,104,quiz_answer,2020-04-06 11:40:41,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
ptheodor,IsBipartite,105,quiz_answer,2020-04-06 11:40:45,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
yxin9,ThreeCycle,41,quiz_answer,2020-04-06 11:40:45,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
ptheodor,IsBipartite,106,quiz_answer,2020-04-06 11:40:49,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
ptheodor,IsBipartite,107,quiz_answer,2020-04-06 11:40:52,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
ptheodor,IsBipartite,108,final_answer,2020-04-06 11:40:53,,,,,,"evaluates to true iff there are no odd-numbered cycles (i.e. cycles of one node, three nodes, or five nodes)",
yxin9,ThreeCycle,42,eval_input,2020-04-06 11:42:39,"inst myInst {
  Node = A+B
  edges = A->B+B->A
  
}",false,,,,,
yxin9,ThreeCycle,43,quiz_answer,2020-04-06 11:43:14,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yxin9,ThreeCycle,44,quiz_answer,2020-04-06 11:43:17,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
yxin9,ThreeCycle,45,quiz_answer,2020-04-06 11:43:21,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
yxin9,ThreeCycle,46,quiz_answer,2020-04-06 11:43:34,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
yxin9,ThreeCycle,47,quiz_answer,2020-04-06 11:43:41,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
yxin9,ThreeCycle,48,quiz_answer,2020-04-06 11:43:47,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
yxin9,ThreeCycle,49,quiz_answer,2020-04-06 11:43:59,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,false,false,,
yxin9,ThreeCycle,50,quiz_answer,2020-04-06 11:44:22,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yxin9,ThreeCycle,51,quiz_answer,2020-04-06 11:44:26,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
yxin9,ThreeCycle,52,quiz_answer,2020-04-06 11:44:29,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
yxin9,ThreeCycle,53,quiz_answer,2020-04-06 11:44:33,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
yxin9,ThreeCycle,54,quiz_answer,2020-04-06 11:44:39,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
yxin9,ThreeCycle,55,quiz_answer,2020-04-06 11:44:43,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
yxin9,ThreeCycle,56,quiz_answer,2020-04-06 11:44:52,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
yxin9,ThreeCycle,57,quiz_answer,2020-04-06 11:45:04,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
yxin9,ThreeCycle,58,final_answer,2020-04-06 11:45:09,,,,,,returns true if the directed graph has a cycle of exactly 3 nodes,
yxin9,IsBipartite,59,eval_input,2020-04-06 11:45:26,"inst myInst {
  Node = A+B
  edges = A->B+B->A
  
}",true,,,,,
yxin9,IsBipartite,60,eval_input,2020-04-06 11:45:35,"inst myInst {
  Node = A
  edges = none
  
}",true,,,,,
yxin9,IsBipartite,61,eval_input,2020-04-06 11:45:43,"inst myInst {
  Node = none
  edges = none
  
}",true,,,,,
yxin9,IsBipartite,62,eval_input,2020-04-06 11:46:45,"inst myInst {
  Node = A
  edges = none
  
}",true,,,,,
psirivib,ThreeCycle,0,eval_input,2020-04-06 11:46:53,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
psirivib,ThreeCycle,1,eval_input,2020-04-06 11:46:55,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
yxin9,IsBipartite,63,eval_input,2020-04-06 11:46:59,"inst myInst {
  Node = A+B
  edges = A->A
  
}",false,,,,,
yxin9,IsBipartite,64,eval_input,2020-04-06 11:47:08,"inst myInst {
  Node = A+B
  edges = A->B
  
}",true,,,,,
psirivib,ThreeCycle,2,eval_input,2020-04-06 11:47:14,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> B
}",false,,,,,
yxin9,IsBipartite,65,eval_input,2020-04-06 11:47:16,"inst myInst {
  Node = A+B
  edges = A->B+B->B
  
}",false,,,,,
psirivib,ThreeCycle,3,eval_input,2020-04-06 11:47:22,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> B + A-> C
}",false,,,,,
psirivib,ThreeCycle,4,eval_input,2020-04-06 11:47:35,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> B + A-> C + B -> C
}",false,,,,,
psirivib,ThreeCycle,5,eval_input,2020-04-06 11:47:57,"inst myInst {
  Node = none
  edges = none
}",false,,,,,
psirivib,ThreeCycle,6,eval_input,2020-04-06 11:48:03,"inst myInst {
  Node = A
  edges = none
}",false,,,,,
psirivib,ThreeCycle,7,eval_input,2020-04-06 11:48:12,"inst myInst {
  Node = A
  edges = A -> A
}",false,,,,,
yxin9,IsBipartite,66,quiz_answer,2020-04-06 11:48:18,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yxin9,IsBipartite,67,quiz_answer,2020-04-06 11:48:21,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
psirivib,ThreeCycle,8,eval_input,2020-04-06 11:48:25,"inst myInst {
  Node = A + B
  edges = A -> B
}",false,,,,,
yxin9,IsBipartite,68,quiz_answer,2020-04-06 11:48:26,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,true,false,,
psirivib,ThreeCycle,9,eval_input,2020-04-06 11:48:31,"inst myInst {
  Node = A + B
  edges = A -> B + B -> A
}",false,,,,,
yxin9,IsBipartite,69,quiz_answer,2020-04-06 11:48:51,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yxin9,IsBipartite,70,quiz_answer,2020-04-06 11:48:55,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
psirivib,ThreeCycle,10,eval_input,2020-04-06 11:48:55,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + C-> A
}",true,,,,,
yxin9,IsBipartite,71,quiz_answer,2020-04-06 11:48:57,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
yxin9,IsBipartite,72,quiz_answer,2020-04-06 11:49:01,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
yxin9,IsBipartite,73,quiz_answer,2020-04-06 11:49:04,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,false,false,,
psirivib,ThreeCycle,11,eval_input,2020-04-06 11:49:06,"inst myInst {
  Node = A + B
  edges = A -> B + B -> A 
}",false,,,,,
psirivib,ThreeCycle,12,eval_input,2020-04-06 11:49:23,"inst myInst {
  Node = A + B
  edges = A -> B + B -> A + A-> A + B-> B
}",false,,,,,
yxin9,IsBipartite,74,eval_input,2020-04-06 11:49:28,"inst myInst {
  Node = A+B+C
  edges = A->B+B->C
  
}",true,,,,,
yxin9,IsBipartite,75,eval_input,2020-04-06 11:49:38,"inst myInst {
  Node = A+B+C
  edges = A->B+B->C+C->A
  
}",false,,,,,
psirivib,ThreeCycle,13,eval_input,2020-04-06 11:49:42,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + C -> A
}",true,,,,,
psirivib,ThreeCycle,14,eval_input,2020-04-06 11:49:47,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + C -> A + A-> A
}",true,,,,,
psirivib,ThreeCycle,15,eval_input,2020-04-06 11:49:59,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> A 
}",false,,,,,
psirivib,ThreeCycle,16,eval_input,2020-04-06 11:50:08,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> A  + B-> C + C->A
}",true,,,,,
yxin9,IsBipartite,76,quiz_answer,2020-04-06 11:50:11,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yxin9,IsBipartite,77,quiz_answer,2020-04-06 11:50:14,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
psirivib,ThreeCycle,17,eval_input,2020-04-06 11:50:18,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> A  + B-> C + C->A
}",true,,,,,
psirivib,ThreeCycle,18,eval_input,2020-04-06 11:50:27,"inst myInst {
  Node = A + B + C + D
  edges = none
}",false,,,,,
yxin9,IsBipartite,78,quiz_answer,2020-04-06 11:50:29,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,true,false,,
psirivib,ThreeCycle,19,eval_input,2020-04-06 11:50:31,"inst myInst {
  Node = A + B + C + D
  edges = A-> B
}",false,,,,,
psirivib,ThreeCycle,20,eval_input,2020-04-06 11:50:36,"inst myInst {
  Node = A + B + C + D
  edges = A-> B + C-> D
}",false,,,,,
psirivib,ThreeCycle,21,eval_input,2020-04-06 11:50:50,"inst myInst {
  Node = A + B 
  edges = A-> A + A-> B
}",false,,,,,
yxin9,IsBipartite,79,eval_input,2020-04-06 11:50:54,"inst myInst {
  Node = A+B+C+D
  edges = A->B+B->C+C->D+D->A
  
}",true,,,,,
yxin9,IsBipartite,80,eval_input,2020-04-06 11:51:09,"inst myInst {
  Node = A+B+C+D
  edges = A->B+B->C+C->D+D->A+B->B
  
}",false,,,,,
psirivib,ThreeCycle,22,eval_input,2020-04-06 11:51:20,"inst myInst {
  Node = A 
  + B 
  edges = A-> A 
  + A-> B
  + B-> A
  + B->B
}",false,,,,,
psirivib,ThreeCycle,23,eval_input,2020-04-06 11:51:40,"inst myInst {
  Node = A 
  + B 
  edges = A-> A 
  + A-> B
  + B-> A
  + B->B
}",false,,,,,
psirivib,ThreeCycle,24,eval_input,2020-04-06 11:51:58,"inst myInst {
  Node = A 
  + B 
  edges = A-> A 
 
}",false,,,,,
psirivib,ThreeCycle,25,eval_input,2020-04-06 11:52:08,"inst myInst {
  Node = A 
  + B 
  edges = A-> A + A-> B
 
}",false,,,,,
psirivib,ThreeCycle,26,eval_input,2020-04-06 11:52:14,"inst myInst {
  Node = A 
  + B 
  edges = A-> A + B-> A
 
}",false,,,,,
psirivib,ThreeCycle,27,eval_input,2020-04-06 11:52:32,"inst myInst {
  Node = A 
  + B 
  edges = A-> A + B-> B
 
}",false,,,,,
psirivib,ThreeCycle,28,eval_input,2020-04-06 11:52:43,"inst myInst {
  Node = A + B + C + D
  edges = A-> A + B-> B
 
}",false,,,,,
psirivib,ThreeCycle,29,eval_input,2020-04-06 11:52:48,"inst myInst {
  Node = A + B + C + D
  edges = A-> B
 
}",false,,,,,
psirivib,ThreeCycle,30,eval_input,2020-04-06 11:52:53,"inst myInst {
  Node = A + B + C + D
  edges = A-> B + B-> C
 
}",false,,,,,
psirivib,ThreeCycle,31,eval_input,2020-04-06 11:52:59,"inst myInst {
  Node = A + B + C + D
  edges = A-> B + B-> C + C->D
 
}",false,,,,,
psirivib,ThreeCycle,32,eval_input,2020-04-06 11:53:05,"inst myInst {
  Node = A + B + C + D
  edges = A-> B + B-> C + C->D + D-> A
 
}",false,,,,,
yxin9,IsBipartite,81,quiz_answer,2020-04-06 11:53:16,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
psirivib,ThreeCycle,33,eval_input,2020-04-06 11:53:22,"inst myInst {
  Node = A + B + C + D
  edges = A-> B + B-> C + C->D + D-> A 
          + C -> A
 
}",true,,,,,
yxin9,IsBipartite,82,quiz_answer,2020-04-06 11:53:22,"inst myInst {
      Node = A
      edges = none
    }",false,1,true,false,,
psirivib,ThreeCycle,34,eval_input,2020-04-06 11:53:45,"inst myInst {
  Node = A + B + C + D
  edges =  B-> C + C->D + D-> A 
          + C -> A 
 
}",false,,,,,
yxin9,IsBipartite,83,quiz_answer,2020-04-06 11:53:45,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yxin9,IsBipartite,84,quiz_answer,2020-04-06 11:53:48,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
psirivib,ThreeCycle,35,eval_input,2020-04-06 11:53:51,"inst myInst {
  Node = A + B + C + D
  edges =  B-> C + C->D + D-> A 
 
}",false,,,,,
yxin9,IsBipartite,85,quiz_answer,2020-04-06 11:53:51,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
yxin9,IsBipartite,86,quiz_answer,2020-04-06 11:53:59,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
psirivib,ThreeCycle,36,eval_input,2020-04-06 11:54:04,"inst myInst {
  Node = A + B + C + D
  edges =  A-> B + B->C + C-> A 
 
}",true,,,,,
yxin9,IsBipartite,87,quiz_answer,2020-04-06 11:54:04,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
psirivib,ThreeCycle,37,eval_input,2020-04-06 11:54:10,"inst myInst {
  Node = A + B + C + D
  edges =  A-> B + B->D + D-> A 
 
}",true,,,,,
yxin9,IsBipartite,88,quiz_answer,2020-04-06 11:54:12,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
yxin9,IsBipartite,89,quiz_answer,2020-04-06 11:54:22,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
yxin9,IsBipartite,90,quiz_answer,2020-04-06 11:54:38,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",true,7,false,false,,
psirivib,ThreeCycle,38,eval_input,2020-04-06 11:54:45,"inst myInst {
  Node = A + B + C + D + E
  edges =  A-> B + B->C + C-> D + D->E 
  + E-> A
 
}",false,,,,,
psirivib,ThreeCycle,39,eval_input,2020-04-06 11:55:00,"inst myInst {
  Node = A + B + C + D + E
  edges =  A-> B + B->C + C-> D + D->E 
  + E-> A + E->C
 
}",true,,,,,
yxin9,IsBipartite,91,eval_input,2020-04-06 11:55:16,"inst myInst {
  Node = A+B+C+D
  edges = A->B+B->C+C->D+D->A
  
}",true,,,,,
psirivib,ThreeCycle,40,eval_input,2020-04-06 11:55:55,"inst myInst {
  Node = A + B + C + D + E
  edges =  A-> A + B-> A + A-> E + E-> A
 
}",false,,,,,
yxin9,IsBipartite,92,eval_input,2020-04-06 11:56:12,"inst myInst {
  Node = A+B+C+D+E
  edges = A->B+B->C+C->D+D->E+E->A
  
}",false,,,,,
psirivib,ThreeCycle,41,eval_input,2020-04-06 11:56:14,"inst myInst {
  Node = A + B + C + D + E
  edges =  A-> A + B-> A + E-> B +  A -> E
 
}",true,,,,,
yxin9,IsBipartite,93,eval_input,2020-04-06 11:56:39,"inst myInst {
  Node = A+B+C+D+E+F
  edges = A->B+B->C+C->D+D->E+E->F+F->A
  
}",true,,,,,
yxin9,IsBipartite,94,eval_input,2020-04-06 11:56:49,"inst myInst {
  Node = A+B+C+D+E+F+G
  edges = A->B+B->C+C->D+D->E+E->F+F->G+G->A
  
}",false,,,,,
psirivib,ThreeCycle,42,eval_input,2020-04-06 11:57:09,"inst myInst {
  Node = A + B + C + D + E
  edges =  A-> B + B-> C + C-> A  + C -> D + D->E+E->C
 
}",true,,,,,
yxin9,IsBipartite,95,quiz_answer,2020-04-06 11:57:58,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yxin9,IsBipartite,96,quiz_answer,2020-04-06 11:58:01,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
yxin9,IsBipartite,97,quiz_answer,2020-04-06 11:58:05,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
yxin9,IsBipartite,98,quiz_answer,2020-04-06 11:58:09,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
yxin9,IsBipartite,99,quiz_answer,2020-04-06 11:58:15,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
yxin9,IsBipartite,100,quiz_answer,2020-04-06 11:58:20,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
yxin9,IsBipartite,101,quiz_answer,2020-04-06 11:58:26,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
yxin9,IsBipartite,102,quiz_answer,2020-04-06 11:58:30,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
yxin9,IsBipartite,103,final_answer,2020-04-06 11:58:32,,,,,,"returns true if there is no odd numbered(1,3,5,7...)-cycle, false otherwise",
psirivib,ThreeCycle,43,eval_input,2020-04-06 11:59:44,"inst myInst {
  Node = A + B + C + D + E
  edges =  A-> B + B-> C + C-> A  + C -> D + D->E+E->C
 
}",true,,,,,
psirivib,ThreeCycle,44,eval_input,2020-04-06 12:00:00,"inst myInst {
  Node = A + B + C + D + E
  edges =  A->C + C-> E + E->A
 
}",true,,,,,
psirivib,ThreeCycle,45,eval_input,2020-04-06 12:00:07,"inst myInst {
  Node = A + B + C + D + E
  edges =  A->C + C-> E + E->B + B->A
 
}",false,,,,,
psirivib,ThreeCycle,46,eval_input,2020-04-06 12:00:23,"inst myInst {
  Node = A + B + C + D + E
  edges =  A->C + C-> E + E->B + B->D + D->A
 
}",false,,,,,
psirivib,ThreeCycle,47,quiz_answer,2020-04-06 12:01:33,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
psirivib,ThreeCycle,48,quiz_answer,2020-04-06 12:01:41,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
psirivib,ThreeCycle,49,quiz_answer,2020-04-06 12:01:46,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
psirivib,ThreeCycle,50,quiz_answer,2020-04-06 12:01:53,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
psirivib,ThreeCycle,51,quiz_answer,2020-04-06 12:01:58,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
psirivib,ThreeCycle,52,quiz_answer,2020-04-06 12:02:03,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
psirivib,ThreeCycle,53,quiz_answer,2020-04-06 12:02:09,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
psirivib,ThreeCycle,54,quiz_answer,2020-04-06 12:02:16,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
psirivib,ThreeCycle,55,final_answer,2020-04-06 12:02:19,,,,,,"-- there exist length 3 cycle

some A: node | some B: node - A| some C:node-A-B | A->B + B-> C + C->A in edges",
psirivib,IsBipartite,56,eval_input,2020-04-06 12:02:32,"inst myInst {
  Node = A + B + C + D + E
  edges =  A->C + C-> E + E->B + B->D + D->A
 
}",false,,,,,
psirivib,IsBipartite,57,eval_input,2020-04-06 12:02:40,"inst myInst {
  Node = none
  edges =  none
 
}",true,,,,,
psirivib,IsBipartite,58,eval_input,2020-04-06 12:03:07,"inst myInst {
  Node = A
  edges =  none
 
}",true,,,,,
psirivib,IsBipartite,59,eval_input,2020-04-06 12:03:13,"inst myInst {
  Node = A
  edges =  A -> A
 
}",false,,,,,
psirivib,IsBipartite,60,eval_input,2020-04-06 12:03:23,"inst myInst {
  Node = A + B
  edges =  A -> A
 
}",false,,,,,
psirivib,IsBipartite,61,eval_input,2020-04-06 12:03:28,"inst myInst {
  Node = A + B
  edges =  A -> A + B->B
 
}",false,,,,,
psirivib,IsBipartite,62,eval_input,2020-04-06 12:03:35,"inst myInst {
  Node = A + B
  edges =  A -> B
 
}",true,,,,,
psirivib,IsBipartite,63,eval_input,2020-04-06 12:03:45,"inst myInst {
  Node = A + B
  edges =  A -> B + B->A
 
}",true,,,,,
psirivib,IsBipartite,64,eval_input,2020-04-06 12:03:53,"inst myInst {
  Node = A + B + C
  edges =  none
 
}",true,,,,,
psirivib,IsBipartite,65,eval_input,2020-04-06 12:04:00,"inst myInst {
  Node = A + B + C
  edges =  A->B
 
}",true,,,,,
psirivib,IsBipartite,66,eval_input,2020-04-06 12:04:08,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->A
 
}",true,,,,,
psirivib,IsBipartite,67,eval_input,2020-04-06 12:04:18,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->A + B->C
 
}",true,,,,,
psirivib,IsBipartite,68,eval_input,2020-04-06 12:04:25,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->A + B->C + C->B
 
}",true,,,,,
mkang3,ThreeCycle,0,eval_input,2020-04-06 12:04:27,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
psirivib,IsBipartite,69,eval_input,2020-04-06 12:04:32,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->A + B->C + C->B + C->C
 
}",false,,,,,
psirivib,IsBipartite,70,eval_input,2020-04-06 12:04:39,"inst myInst {
  Node = A + B + C
  edges =  A->A
 
}",false,,,,,
mkang3,ThreeCycle,1,eval_input,2020-04-06 12:04:39,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",false,,,,,
mkang3,ThreeCycle,2,eval_input,2020-04-06 12:04:43,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",false,,,,,
psirivib,IsBipartite,71,eval_input,2020-04-06 12:04:45,"inst myInst {
  Node = A + B + C
  edges =  B->B
 
}",false,,,,,
mkang3,ThreeCycle,3,eval_input,2020-04-06 12:04:51,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
}",false,,,,,
psirivib,IsBipartite,72,eval_input,2020-04-06 12:04:55,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->C + C->A
 
}",false,,,,,
mkang3,ThreeCycle,4,eval_input,2020-04-06 12:04:59,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",true,,,,,
mkang3,ThreeCycle,5,eval_input,2020-04-06 12:05:05,"inst myInst {
  Node = A
       
  edges = A->A
}",false,,,,,
psirivib,IsBipartite,73,eval_input,2020-04-06 12:05:10,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->A
 
}",true,,,,,
mkang3,ThreeCycle,6,eval_input,2020-04-06 12:05:14,"inst myInst {
  Node = A + B
       
  edges = A->B
}",false,,,,,
mkang3,ThreeCycle,7,eval_input,2020-04-06 12:05:23,"inst myInst {
  Node = A + B
       
  edges = A->B + B->A
}",false,,,,,
psirivib,IsBipartite,74,eval_input,2020-04-06 12:05:29,"inst myInst {
  Node = A + B + C + D
  edges =  A->B + B->C + C->D + D-> A
 
}",true,,,,,
psirivib,IsBipartite,75,eval_input,2020-04-06 12:05:42,"inst myInst {
  Node = A + B + C + D
  edges =  A->B + B->C + C->D + D-> A + C->A
 
}",false,,,,,
mkang3,ThreeCycle,8,eval_input,2020-04-06 12:05:53,"inst myInst {
  Node = A + B + C
       
  edges = B->C + C->A
}",false,,,,,
psirivib,IsBipartite,76,eval_input,2020-04-06 12:06:03,"inst myInst {
  Node = A + B + C + D
  edges =  A->B + B->C + C->D + D-> A + C->A + A->A
 
}",false,,,,,
mkang3,ThreeCycle,9,eval_input,2020-04-06 12:06:07,"inst myInst {
  Node = A + B + C
       
  edges = A->B + B->C + C->A + A->C
}",true,,,,,
psirivib,IsBipartite,77,eval_input,2020-04-06 12:06:07,"inst myInst {
  Node = A + B + C + D
  edges =  A->B + B->C + C->D + D-> A + A->A
 
}",false,,,,,
mkang3,ThreeCycle,10,eval_input,2020-04-06 12:06:34,"inst myInst {
  Node = A
       
  edges = none
}",false,,,,,
mkang3,ThreeCycle,11,eval_input,2020-04-06 12:06:39,"inst myInst {
  Node = A
       
  edges = A->A
}",false,,,,,
mkang3,ThreeCycle,12,eval_input,2020-04-06 12:06:55,"inst myInst {
  Node = A + B
       
  edges = A->A + B->B
}",false,,,,,
psirivib,IsBipartite,78,eval_input,2020-04-06 12:06:55,"inst myInst {
  Node = A + B + C + D
  edges =  none
 
}",true,,,,,
mkang3,ThreeCycle,13,eval_input,2020-04-06 12:07:02,"inst myInst {
  Node = A + B
       
  edges = A->B 
}",false,,,,,
mkang3,ThreeCycle,14,eval_input,2020-04-06 12:07:07,"inst myInst {
  Node = A + B
       
  edges = A->B 
}",false,,,,,
mkang3,ThreeCycle,15,eval_input,2020-04-06 12:07:15,"inst myInst {
  Node = A + B
       
  edges = A->B + B->A
}",false,,,,,
mkang3,ThreeCycle,16,eval_input,2020-04-06 12:07:23,"inst myInst {
  Node = A + B
       
  edges = A->B + B->A
}",false,,,,,
mkang3,ThreeCycle,17,eval_input,2020-04-06 12:07:29,"inst myInst {
  Node = A + B
       
  edges = A->B + B->A + A->A
}",false,,,,,
mkang3,ThreeCycle,18,eval_input,2020-04-06 12:07:40,"inst myInst {
  Node = A + B
       
  edges = A->B + B->A + A->A + B->B
}",false,,,,,
psirivib,IsBipartite,79,eval_input,2020-04-06 12:07:40,"inst myInst {
  Node = A + B + C + D 
  edges =  A-> B + B->A
 
}",true,,,,,
psirivib,IsBipartite,80,eval_input,2020-04-06 12:07:44,"inst myInst {
  Node = A + B + C + D 
  edges =  A-> B + B->A + A->A
 
}",false,,,,,
mkang3,ThreeCycle,19,eval_input,2020-04-06 12:08:00,"inst myInst {
  Node = A + B + C
       
  edges = A->B + B->A + B->C + C->A
}",true,,,,,
mkang3,ThreeCycle,20,eval_input,2020-04-06 12:08:03,"inst myInst {
  Node = A + B + C
       
  edges = A->B + B->A + B->C + C->A
}",true,,,,,
mkang3,ThreeCycle,21,eval_input,2020-04-06 12:08:07,"inst myInst {
  Node = A + B + C
       
  edges = A->B + B->B + B->C + C->A
}",true,,,,,
psirivib,IsBipartite,81,quiz_answer,2020-04-06 12:08:07,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
psirivib,IsBipartite,82,quiz_answer,2020-04-06 12:08:11,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
psirivib,IsBipartite,83,quiz_answer,2020-04-06 12:08:16,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mkang3,ThreeCycle,22,eval_input,2020-04-06 12:08:18,"inst myInst {
  Node = A + B + C 
       
  edges = A->B + B->B + B->C 
}",false,,,,,
psirivib,IsBipartite,84,quiz_answer,2020-04-06 12:08:24,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
psirivib,IsBipartite,85,quiz_answer,2020-04-06 12:08:32,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mkang3,ThreeCycle,23,eval_input,2020-04-06 12:08:35,"inst myInst {
  Node = A + B + C + D
       
  edges = A->B + B->C + C->A
}",true,,,,,
psirivib,IsBipartite,86,quiz_answer,2020-04-06 12:08:39,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
psirivib,IsBipartite,87,quiz_answer,2020-04-06 12:08:47,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
psirivib,IsBipartite,88,quiz_answer,2020-04-06 12:08:52,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",true,7,false,false,,
mkang3,ThreeCycle,24,eval_input,2020-04-06 12:08:52,"inst myInst {
  Node = A + B + C + D
       
  edges = A->B + B->D + D->A
}",true,,,,,
mkang3,ThreeCycle,25,eval_input,2020-04-06 12:08:59,"inst myInst {
  Node = A + B + C + D
       
  edges = A->B + B->D + D->C
}",false,,,,,
mkang3,ThreeCycle,26,eval_input,2020-04-06 12:09:08,"inst myInst {
  Node = A + B + C + D + E
       
  edges = A->B + B->D + D->C
}",false,,,,,
mkang3,ThreeCycle,27,eval_input,2020-04-06 12:09:12,"inst myInst {
  Node = A + B + C + D + E
       
  edges = A->B + B->D + D->A
}",true,,,,,
psirivib,IsBipartite,89,eval_input,2020-04-06 12:10:37,"inst myInst {
  Node = A + B + C + D + E 
  edges =  A-> B + B->C + C->D + D->A
 
}",true,,,,,
psirivib,IsBipartite,90,eval_input,2020-04-06 12:10:51,"inst myInst {
  Node = A + B + C + D + E 
  edges =  A-> B + B->C + C->D + D->E + E->A
 
}",false,,,,,
mkang3,ThreeCycle,28,quiz_answer,2020-04-06 12:10:54,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mkang3,ThreeCycle,29,quiz_answer,2020-04-06 12:10:58,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
mkang3,ThreeCycle,30,quiz_answer,2020-04-06 12:11:02,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
psirivib,IsBipartite,91,eval_input,2020-04-06 12:11:05,"inst myInst {
  Node = A + B + C + D + E +F
  edges =  A-> B + B->C + C->D + D->E + E->F + F->A
 
}",true,,,,,
mkang3,ThreeCycle,31,quiz_answer,2020-04-06 12:11:10,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
mkang3,ThreeCycle,32,quiz_answer,2020-04-06 12:11:14,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
mkang3,ThreeCycle,33,quiz_answer,2020-04-06 12:11:22,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
mkang3,ThreeCycle,34,quiz_answer,2020-04-06 12:11:30,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,false,false,,
mkang3,ThreeCycle,35,eval_input,2020-04-06 12:12:08,"inst myInst {
  Node = A + B + C + D + E
       
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
psirivib,IsBipartite,92,eval_input,2020-04-06 12:12:31,"inst myInst {
  Node = A + B + C + D + E +F + G
  edges =  A-> B + B->C + C->D + D->E + E->F + F->A + G->A
 
}",true,,,,,
mkang3,ThreeCycle,36,eval_input,2020-04-06 12:12:34,"inst myInst {
  Node = A + B + C + D + E
       
  edges = C->D + D->E + E->C + D->A
}",true,,,,,
mkang3,ThreeCycle,37,eval_input,2020-04-06 12:12:40,"inst myInst {
  Node = A + B + C + D + E + J
       
  edges = C->D + D->E + E->C + D->A
}",true,,,,,
psirivib,IsBipartite,93,eval_input,2020-04-06 12:13:12,"inst myInst {
  Node = A + B + C + D + E +F + G
  edges =  A-> B + B->C + C->D + D->E + E->F + F->A + G->A
}",true,,,,,
psirivib,IsBipartite,94,eval_input,2020-04-06 12:13:18,"inst myInst {
  Node = A + B + C + D + E +F + G
  edges =  A-> B + B->C + C->D + D->E + E->A + F->A + G->A
}",false,,,,,
psirivib,IsBipartite,95,eval_input,2020-04-06 12:13:33,"inst myInst {
  Node = A + B + C + D + E +F + G
  edges =  A-> B + B->C + C->D + D->E +C->A + F->A + G->A
}",false,,,,,
mkang3,ThreeCycle,38,quiz_answer,2020-04-06 12:14:33,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mkang3,ThreeCycle,39,quiz_answer,2020-04-06 12:14:38,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
mkang3,ThreeCycle,40,quiz_answer,2020-04-06 12:14:41,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mkang3,ThreeCycle,41,quiz_answer,2020-04-06 12:14:45,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
mkang3,ThreeCycle,42,quiz_answer,2020-04-06 12:14:49,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
mkang3,ThreeCycle,43,quiz_answer,2020-04-06 12:14:52,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
mkang3,ThreeCycle,44,quiz_answer,2020-04-06 12:15:01,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mkang3,ThreeCycle,45,quiz_answer,2020-04-06 12:15:49,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mkang3,ThreeCycle,46,final_answer,2020-04-06 12:15:51,,,,,,"some a,b,c: Node | a != b and b!=c and c!=a and a->b in edges and b->c in edges and c->a in edges",
psirivib,IsBipartite,96,eval_input,2020-04-06 12:16:10,"inst myInst {
  Node = A + B + C + D + E +F + G
  edges =  A-> B + B->C + C->D + D->E +C->A + F->A + G->A
}",false,,,,,
psirivib,IsBipartite,97,eval_input,2020-04-06 12:16:32,"inst myInst {
  Node = A + B + C + D + E +F + G
  edges =  A->B + B->C + C->D + D->E + E->A
}",false,,,,,
psirivib,IsBipartite,98,eval_input,2020-04-06 12:18:00,"inst myInst {
  Node = A + B + C + D + E +F + G
  edges =  A->B + A->C + C->B
}",true,,,,,
mkang3,IsBipartite,47,eval_input,2020-04-06 12:18:30,"inst myInst {
  Node = A
       
  edges = none
}",true,,,,,
mkang3,IsBipartite,48,eval_input,2020-04-06 12:18:36,"inst myInst {
  Node = A + B
       
  edges = none
}",true,,,,,
mkang3,IsBipartite,49,eval_input,2020-04-06 12:18:40,"inst myInst {
  Node = A + B
       
  edges = A->B
}",true,,,,,
mkang3,IsBipartite,50,eval_input,2020-04-06 12:18:45,"inst myInst {
  Node = A + B
       
  edges = A->B + B->A
}",true,,,,,
mkang3,IsBipartite,51,eval_input,2020-04-06 12:18:49,"inst myInst {
  Node = A + B
       
  edges = A->A + B->A
}",false,,,,,
mkang3,IsBipartite,52,eval_input,2020-04-06 12:18:57,"inst myInst {
  Node = A
       
  edges = A->A 
}",false,,,,,
mkang3,IsBipartite,53,eval_input,2020-04-06 12:19:03,"inst myInst {
  Node = A + B + C
       
  edges = A->A 
}",false,,,,,
mkang3,IsBipartite,54,eval_input,2020-04-06 12:19:10,"inst myInst {
  Node = A + B + C
       
  edges = A->A + B->C
}",false,,,,,
mkang3,IsBipartite,55,eval_input,2020-04-06 12:19:14,"inst myInst {
  Node = A + B + C
       
  edges = B->B + B->C
}",false,,,,,
mkang3,IsBipartite,56,eval_input,2020-04-06 12:19:17,"inst myInst {
  Node = A + B + C
       
  edges = B->A + B->C
}",true,,,,,
mkang3,IsBipartite,57,quiz_answer,2020-04-06 12:19:40,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mkang3,IsBipartite,58,quiz_answer,2020-04-06 12:19:44,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mkang3,IsBipartite,59,quiz_answer,2020-04-06 12:19:47,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mkang3,IsBipartite,60,quiz_answer,2020-04-06 12:19:51,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mkang3,IsBipartite,61,quiz_answer,2020-04-06 12:19:55,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,false,false,,
mkang3,IsBipartite,62,eval_input,2020-04-06 12:20:17,"inst myInst {
  Node = A + B + C
       
  edges = B->A + A->B
}",true,,,,,
mthain,IsBipartite,0,eval_input,2020-04-06 12:20:44,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
mkang3,IsBipartite,63,quiz_answer,2020-04-06 12:20:48,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
psirivib,IsBipartite,99,quiz_answer,2020-04-06 12:20:53,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mthain,IsBipartite,1,eval_input,2020-04-06 12:20:53,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A
}",false,,,,,
psirivib,IsBipartite,100,quiz_answer,2020-04-06 12:20:57,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mthain,IsBipartite,2,eval_input,2020-04-06 12:21:00,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
psirivib,IsBipartite,101,quiz_answer,2020-04-06 12:21:02,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
psirivib,IsBipartite,102,quiz_answer,2020-04-06 12:21:08,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mthain,IsBipartite,3,eval_input,2020-04-06 12:21:09,"inst myInst {
  Node = A
       + B
       + C
  edges = A->C
}",true,,,,,
psirivib,IsBipartite,103,quiz_answer,2020-04-06 12:21:16,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mkang3,IsBipartite,64,eval_input,2020-04-06 12:21:18,"inst myInst {
  Node = A + B + C
       
  edges = A->B + B->C + C->A
}",false,,,,,
psirivib,IsBipartite,104,quiz_answer,2020-04-06 12:21:23,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mthain,IsBipartite,4,eval_input,2020-04-06 12:21:24,"inst myInst {
  Node = A
       + B
       + C
  edges = B->A
}",true,,,,,
mthain,IsBipartite,5,eval_input,2020-04-06 12:21:27,"inst myInst {
  Node = A
       + B
       + C
  edges = B->B
}",false,,,,,
psirivib,IsBipartite,105,quiz_answer,2020-04-06 12:21:28,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
mthain,IsBipartite,6,eval_input,2020-04-06 12:21:31,"inst myInst {
  Node = A
       + B
       + C
  edges = B->C
}",true,,,,,
psirivib,IsBipartite,106,quiz_answer,2020-04-06 12:21:37,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
psirivib,IsBipartite,107,final_answer,2020-04-06 12:21:38,,,,,,all n:node | n not in n.edges.edges + n.edges.edges.edges.edges.edges,
mkang3,IsBipartite,65,eval_input,2020-04-06 12:21:38,"inst myInst {
  Node = A + B 
       
  edges = A->B + B->A 
}",true,,,,,
mthain,IsBipartite,7,eval_input,2020-04-06 12:21:47,"inst myInst {
  Node = A
       + B
       + C
  edges = B->C + C->A
}",true,,,,,
mkang3,IsBipartite,66,eval_input,2020-04-06 12:21:56,"inst myInst {
  Node = A + B + C + D
       
  edges = A->B + B->A 
}",true,,,,,
mthain,IsBipartite,8,eval_input,2020-04-06 12:21:59,"inst myInst {
  Node = A
       + B
       + C
  edges = B->C + C->A + C->B
}",true,,,,,
mthain,IsBipartite,10,eval_input,2020-04-06 12:22:05,"inst myInst {
  Node = A
       + B
       + C
  edges = B->C + C->B
}",true,,,,,
mthain,IsBipartite,9,eval_input,2020-04-06 12:22:05,"inst myInst {
  Node = A
       + B
       + C
  edges = B->C + C->B
}",true,,,,,
mkang3,IsBipartite,67,eval_input,2020-04-06 12:22:10,"inst myInst {
  Node = A + B + C + D
       
  edges = A->B + B->C + C->A
}",false,,,,,
mthain,IsBipartite,11,eval_input,2020-04-06 12:22:12,"inst myInst {
  Node = A
       + B
       + C
  edges = B->C + C->B + C->C
}",false,,,,,
mkang3,IsBipartite,68,eval_input,2020-04-06 12:22:17,"inst myInst {
  Node = A + B + C + D
       
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
mthain,IsBipartite,12,eval_input,2020-04-06 12:22:21,"inst myInst {
  Node = A
       + B
       + C
  edges = C->C
}",false,,,,,
mthain,IsBipartite,13,eval_input,2020-04-06 12:22:26,"inst myInst {
  Node = A
       + B
       + C
  edges = C->C + A->A
}",false,,,,,
mthain,IsBipartite,14,eval_input,2020-04-06 12:22:35,"inst myInst {
  Node = A
       + B
       + C
  edges = C->C + A->A + B->B
}",false,,,,,
mthain,IsBipartite,15,eval_input,2020-04-06 12:22:41,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
mkang3,IsBipartite,69,quiz_answer,2020-04-06 12:23:09,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mkang3,IsBipartite,70,quiz_answer,2020-04-06 12:23:13,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mthain,IsBipartite,16,quiz_answer,2020-04-06 12:23:14,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mkang3,IsBipartite,71,quiz_answer,2020-04-06 12:23:16,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mthain,IsBipartite,17,quiz_answer,2020-04-06 12:23:22,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mthain,IsBipartite,18,quiz_answer,2020-04-06 12:23:26,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mkang3,IsBipartite,72,quiz_answer,2020-04-06 12:23:27,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mkang3,IsBipartite,73,quiz_answer,2020-04-06 12:23:33,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mthain,IsBipartite,19,quiz_answer,2020-04-06 12:23:33,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mkang3,IsBipartite,74,quiz_answer,2020-04-06 12:23:38,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mthain,IsBipartite,20,quiz_answer,2020-04-06 12:23:40,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,false,false,,
mkang3,IsBipartite,75,quiz_answer,2020-04-06 12:23:45,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
mkang3,IsBipartite,76,quiz_answer,2020-04-06 12:23:56,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mkang3,IsBipartite,77,final_answer,2020-04-06 12:23:57,,,,,,there is no cycle with odd number of nodes,
mthain,IsBipartite,21,eval_input,2020-04-06 12:24:07,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A
}",true,,,,,
mthain,IsBipartite,22,eval_input,2020-04-06 12:24:20,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",false,,,,,
mthain,IsBipartite,23,eval_input,2020-04-06 12:24:47,"inst myInst {
  Node = A
       + B
       + C
  edges = A->C + C->B + B->A
}",false,,,,,
mkang3,IsDag,78,eval_input,2020-04-06 12:25:04,"inst myInst {
  Node = A + B + C + D
       
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
mkang3,IsDag,79,eval_input,2020-04-06 12:25:10,"inst myInst {
  Node = A 
       
  edges = none
}",true,,,,,
mkang3,IsDag,80,eval_input,2020-04-06 12:25:14,"inst myInst {
  Node = A + B
       
  edges = none
}",true,,,,,
mkang3,IsDag,81,eval_input,2020-04-06 12:25:18,"inst myInst {
  Node = A + B
       
  edges = A->A
}",false,,,,,
mkang3,IsDag,82,eval_input,2020-04-06 12:25:25,"inst myInst {
  Node = A + B
       
  edges = A->A + A->B
}",false,,,,,
psirivib,IsDag,108,eval_input,2020-04-06 12:25:25,"inst myInst {
  Node = A + B + C + D + E +F + G
  edges =  A->B + B->C + C->D + D-> E + E-> F + F->G + G->A
}",false,,,,,
mkang3,IsDag,83,eval_input,2020-04-06 12:25:30,"inst myInst {
  Node = A + B
       
  edges = A->A + B->B
}",false,,,,,
mkang3,IsDag,84,eval_input,2020-04-06 12:25:39,"inst myInst {
  Node = A + B + C
       
  edges = A->A + B->B
}",false,,,,,
mthain,IsBipartite,24,quiz_answer,2020-04-06 12:25:39,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mkang3,IsDag,85,eval_input,2020-04-06 12:25:45,"inst myInst {
  Node = A + B + C
       
  edges = A->B + B->A
}",false,,,,,
mthain,IsBipartite,25,quiz_answer,2020-04-06 12:25:47,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mthain,IsBipartite,26,quiz_answer,2020-04-06 12:25:53,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mkang3,IsDag,86,eval_input,2020-04-06 12:25:55,"inst myInst {
  Node = A + B + C
       
  edges = A->B + B->C + C->A
}",false,,,,,
mthain,IsBipartite,27,quiz_answer,2020-04-06 12:26:00,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mkang3,IsDag,87,eval_input,2020-04-06 12:26:01,"inst myInst {
  Node = A 
       
  edges = A->A
}",false,,,,,
mthain,IsBipartite,28,quiz_answer,2020-04-06 12:26:05,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mthain,IsBipartite,29,quiz_answer,2020-04-06 12:26:12,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mkang3,IsDag,88,eval_input,2020-04-06 12:26:15,"inst myInst {
  Node = A + B + C + D
       
  edges = A->A + C->D
}",false,,,,,
mthain,IsBipartite,30,quiz_answer,2020-04-06 12:26:20,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
mkang3,IsDag,89,quiz_answer,2020-04-06 12:26:28,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
mthain,IsBipartite,31,quiz_answer,2020-04-06 12:26:31,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mthain,IsBipartite,32,final_answer,2020-04-06 12:26:33,,,,,,"False if Odd  length cycle, e.g. reflexive edge or  A->C + C->B + B->A, True otherwise",
mkang3,IsDag,90,quiz_answer,2020-04-06 12:26:40,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mkang3,IsDag,91,quiz_answer,2020-04-06 12:26:43,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mkang3,IsDag,92,quiz_answer,2020-04-06 12:26:46,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mkang3,IsDag,93,quiz_answer,2020-04-06 12:26:51,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mkang3,IsDag,94,quiz_answer,2020-04-06 12:26:57,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mkang3,IsDag,95,quiz_answer,2020-04-06 12:27:00,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mkang3,IsDag,96,quiz_answer,2020-04-06 12:27:07,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mkang3,IsDag,97,quiz_answer,2020-04-06 12:27:14,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mkang3,IsDag,98,final_answer,2020-04-06 12:27:15,,,,,,Does not have a cycle,
mthain,ThreeCycle,33,eval_input,2020-04-06 12:27:16,"inst myInst {
  Node = A
       + B
       + C
  edges = A->C + C->B + B->A
}",true,,,,,
mthain,ThreeCycle,34,eval_input,2020-04-06 12:27:29,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
mthain,ThreeCycle,35,eval_input,2020-04-06 12:27:34,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A
}",false,,,,,
mthain,ThreeCycle,36,eval_input,2020-04-06 12:27:37,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",false,,,,,
mthain,ThreeCycle,37,eval_input,2020-04-06 12:27:48,"inst myInst {
  Node = A
       + B
       + C
  edges = A->C
}",false,,,,,
mthain,ThreeCycle,38,eval_input,2020-04-06 12:27:57,"inst myInst {
  Node = A
       + B
       + C
  edges = B->A
}",false,,,,,
mthain,ThreeCycle,39,eval_input,2020-04-06 12:28:01,"inst myInst {
  Node = A
       + B
       + C
  edges = B->B
}",false,,,,,
mthain,ThreeCycle,40,eval_input,2020-04-06 12:28:12,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A
}",false,,,,,
mthain,ThreeCycle,41,eval_input,2020-04-06 12:28:19,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",true,,,,,
mthain,ThreeCycle,42,eval_input,2020-04-06 12:28:34,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
mthain,ThreeCycle,43,eval_input,2020-04-06 12:28:50,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
mthain,ThreeCycle,44,eval_input,2020-04-06 12:29:16,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C + C->D + D->E + E->F + F-> A
}",false,,,,,
mthain,ThreeCycle,45,eval_input,2020-04-06 12:29:26,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C + C->D
}",false,,,,,
mthain,ThreeCycle,46,eval_input,2020-04-06 12:29:32,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C + B->A
}",false,,,,,
mthain,ThreeCycle,47,eval_input,2020-04-06 12:29:41,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C + C->B
}",false,,,,,
mthain,ThreeCycle,48,eval_input,2020-04-06 12:29:49,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C + C->C
}",false,,,,,
mthain,ThreeCycle,49,eval_input,2020-04-06 12:30:18,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + A->C + B->C
}",false,,,,,
mthain,ThreeCycle,50,eval_input,2020-04-06 12:30:41,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C + C->A
}",true,,,,,
mthain,ThreeCycle,51,eval_input,2020-04-06 12:30:49,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C + C->A + C->C
}",true,,,,,
mthain,ThreeCycle,52,eval_input,2020-04-06 12:30:53,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C + C->A + C->B
}",true,,,,,
mthain,ThreeCycle,53,eval_input,2020-04-06 12:31:04,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C + C->A + A->C + C->B + B->A
}",true,,,,,
mthain,ThreeCycle,54,eval_input,2020-04-06 12:31:30,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C + C->A + D->E
}",true,,,,,
mthain,ThreeCycle,55,eval_input,2020-04-06 12:31:42,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C + C->A + D->E + E->F + F->D
}",true,,,,,
mthain,ThreeCycle,56,quiz_answer,2020-04-06 12:31:51,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mthain,ThreeCycle,57,quiz_answer,2020-04-06 12:31:54,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
mthain,ThreeCycle,58,quiz_answer,2020-04-06 12:31:57,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mthain,ThreeCycle,59,quiz_answer,2020-04-06 12:32:02,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
mthain,ThreeCycle,60,quiz_answer,2020-04-06 12:32:07,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
mthain,ThreeCycle,61,quiz_answer,2020-04-06 12:32:12,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
mthain,ThreeCycle,62,quiz_answer,2020-04-06 12:32:16,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mthain,ThreeCycle,63,quiz_answer,2020-04-06 12:32:24,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mthain,ThreeCycle,64,final_answer,2020-04-06 12:32:25,,,,,,"true if theres a cycle of length three, false else",
psirivib,IsDag,109,eval_input,2020-04-06 12:32:48,"inst myInst {
  Node = none
  edges =  none
}",true,,,,,
psirivib,IsDag,110,eval_input,2020-04-06 12:33:19,"inst myInst {
  Node = A
  edges =  none
}",true,,,,,
psirivib,IsDag,111,eval_input,2020-04-06 12:34:08,"inst myInst {
  Node = A
  edges =  A->A
}",false,,,,,
psirivib,IsDag,112,eval_input,2020-04-06 12:34:14,"inst myInst {
  Node = A + B
  edges =  A->A
}",false,,,,,
psirivib,IsDag,113,eval_input,2020-04-06 12:34:18,"inst myInst {
  Node = A + B
  edges =  none
}",true,,,,,
psirivib,IsDag,114,eval_input,2020-04-06 12:34:24,"inst myInst {
  Node = A + B
  edges =  A->B
}",true,,,,,
psirivib,IsDag,115,eval_input,2020-04-06 12:40:15,"inst myInst {
  Node = A + B
  edges =  A->B + B->A
}",false,,,,,
mthain,IsDag,65,eval_input,2020-04-06 12:40:20,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C + C->A + D->E + E->F + F->D
}",false,,,,,
psirivib,IsDag,116,eval_input,2020-04-06 12:40:31,"inst myInst {
  Node = A + B
  edges =  A->A
}",false,,,,,
mthain,IsDag,66,eval_input,2020-04-06 12:40:32,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = none
}",true,,,,,
mthain,IsDag,67,eval_input,2020-04-06 12:40:40,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E

  edges = none
}",true,,,,,
mthain,IsDag,68,eval_input,2020-04-06 12:40:44,"inst myInst {
  Node = A
       + B


  edges = none
}",true,,,,,
mthain,IsDag,69,eval_input,2020-04-06 12:40:48,"inst myInst {
  Node = A
       + B


  edges = none
}",true,,,,,
mthain,IsDag,70,eval_input,2020-04-06 12:41:00,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
mthain,IsDag,71,eval_input,2020-04-06 12:41:08,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B
}",true,,,,,
mthain,IsDag,72,eval_input,2020-04-06 12:41:13,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->A
}",false,,,,,
mthain,IsDag,73,eval_input,2020-04-06 12:41:31,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B
}",true,,,,,
mthain,IsDag,74,eval_input,2020-04-06 12:41:36,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->C
}",true,,,,,
mthain,IsDag,75,eval_input,2020-04-06 12:41:53,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->A
}",false,,,,,
mthain,IsDag,76,eval_input,2020-04-06 12:41:57,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C
}",true,,,,,
mthain,IsDag,77,eval_input,2020-04-06 12:42:01,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->B
}",false,,,,,
mthain,IsDag,78,eval_input,2020-04-06 12:42:11,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C + C->A
}",false,,,,,
mthain,IsDag,79,eval_input,2020-04-06 12:42:19,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C + C->B
}",false,,,,,
mthain,IsDag,80,eval_input,2020-04-06 12:42:25,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C + C->D
}",true,,,,,
mthain,IsDag,81,eval_input,2020-04-06 12:42:49,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C + C->A + C->D
}",false,,,,,
mthain,IsDag,82,eval_input,2020-04-06 12:43:07,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C + C->A + D->E + E->F + F->D
}",false,,,,,
mthain,IsDag,83,quiz_answer,2020-04-06 12:43:20,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mthain,IsDag,84,quiz_answer,2020-04-06 12:43:26,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mthain,IsDag,85,quiz_answer,2020-04-06 12:43:30,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mthain,IsDag,86,quiz_answer,2020-04-06 12:43:37,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mthain,IsDag,87,quiz_answer,2020-04-06 12:43:41,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mthain,IsDag,88,quiz_answer,2020-04-06 12:43:46,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mthain,IsDag,89,quiz_answer,2020-04-06 12:43:51,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mthain,IsDag,90,quiz_answer,2020-04-06 12:43:55,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mthain,IsDag,91,final_answer,2020-04-06 12:43:56,,,,,,"false if theres a cycle, true else",
psirivib,IsDag,117,eval_input,2020-04-06 12:44:32,"inst myInst {
  Node = A + B + C
  edges =  none
}",true,,,,,
psirivib,IsDag,118,eval_input,2020-04-06 12:44:41,"inst myInst {
  Node = A + B + C
  edges =  A-> B + B->C
}",true,,,,,
psirivib,IsDag,119,eval_input,2020-04-06 12:44:45,"inst myInst {
  Node = A + B + C
  edges =  A-> B + B->C + A->C
}",true,,,,,
psirivib,IsDag,120,eval_input,2020-04-06 12:44:57,"inst myInst {
  Node = A + B + C
  edges =  A-> B + B->C + C -> A
}",false,,,,,
psirivib,IsDag,121,eval_input,2020-04-06 12:46:26,"inst myInst {
  Node = A + B + C +D
  edges =  A-> B + B->C + C -> D + D->A
}",false,,,,,
psirivib,IsDag,122,eval_input,2020-04-06 12:50:08,"inst myInst {
  Node = A + B + C + D
  edges =  A-> B + B->C + C -> D 
}",true,,,,,
psirivib,IsDag,123,eval_input,2020-04-06 12:57:00,"inst myInst {
  Node = A + B + C + D
  edges =  A-> B + B->C + C -> D  + D->A
}",false,,,,,
psirivib,IsDag,124,eval_input,2020-04-06 12:57:28,"inst myInst {
  Node = A + B + C + D + E
  edges =  A-> B + B->C + C->D + D -> E + E->A
}",false,,,,,
psirivib,IsDag,125,eval_input,2020-04-06 12:57:46,"inst myInst {
  Node = A + B + C + D + E
  edges =  A-> B + B->C + C->D + D -> E + E->A + A ->E
}",false,,,,,
psirivib,IsDag,126,eval_input,2020-04-06 12:57:51,"inst myInst {
  Node = A + B + C + D + E
  edges =  A-> B + B->C + C->D + D -> E + A ->E
}",true,,,,,
psirivib,IsDag,127,quiz_answer,2020-04-06 12:58:00,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
psirivib,IsDag,128,quiz_answer,2020-04-06 12:58:04,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
psirivib,IsDag,129,quiz_answer,2020-04-06 12:58:08,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
psirivib,IsDag,130,quiz_answer,2020-04-06 12:58:12,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
psirivib,IsDag,131,quiz_answer,2020-04-06 12:58:16,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
psirivib,IsDag,132,quiz_answer,2020-04-06 12:58:20,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
psirivib,IsDag,133,quiz_answer,2020-04-06 12:58:27,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
psirivib,IsDag,134,quiz_answer,2020-04-06 12:58:31,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
psirivib,IsDag,135,final_answer,2020-04-06 12:58:32,,,,,,there is no loop,
neisele,IsDag,0,eval_input,2020-04-06 14:39:40,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
neisele,IsDag,1,eval_input,2020-04-06 14:39:51,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
neisele,IsDag,2,eval_input,2020-04-06 14:39:55,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
neisele,IsDag,3,eval_input,2020-04-06 14:39:55,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
neisele,IsDag,4,eval_input,2020-04-06 14:40:02,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
}",true,,,,,
neisele,IsDag,5,eval_input,2020-04-06 14:40:08,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",false,,,,,
neisele,IsDag,6,eval_input,2020-04-06 14:40:15,"inst myInst {
  Node = A
       + B
       + C
  edges = B->C + C->B
}",false,,,,,
neisele,IsDag,7,eval_input,2020-04-06 14:40:24,"inst myInst {
  Node = A
       + B
       + C
  edges = B->C + C->B + B->A
}",false,,,,,
neisele,IsDag,8,eval_input,2020-04-06 14:40:35,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
neisele,IsDag,9,eval_input,2020-04-06 14:40:42,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
neisele,IsDag,10,quiz_answer,2020-04-06 14:41:11,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
neisele,IsDag,11,quiz_answer,2020-04-06 14:41:18,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
neisele,IsDag,12,quiz_answer,2020-04-06 14:41:29,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
neisele,IsDag,13,quiz_answer,2020-04-06 14:42:05,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
neisele,IsDag,14,quiz_answer,2020-04-06 14:42:14,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
neisele,IsDag,15,quiz_answer,2020-04-06 14:42:28,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
neisele,IsDag,16,quiz_answer,2020-04-06 14:42:44,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
neisele,IsDag,17,quiz_answer,2020-04-06 14:42:52,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
neisele,IsDag,18,final_answer,2020-04-06 14:42:54,,,,,,No cycles,
neisele,IsBipartite,19,eval_input,2020-04-06 14:43:12,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
neisele,IsBipartite,20,eval_input,2020-04-06 14:43:13,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
neisele,IsBipartite,21,eval_input,2020-04-06 14:43:19,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
neisele,IsBipartite,22,eval_input,2020-04-06 14:43:47,"inst myInst {
  Node = A + B
  edges = A->B
}",true,,,,,
neisele,IsBipartite,23,eval_input,2020-04-06 14:44:06,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
neisele,IsBipartite,24,eval_input,2020-04-06 14:44:12,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
neisele,IsBipartite,25,eval_input,2020-04-06 14:44:26,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",true,,,,,
neisele,IsBipartite,26,eval_input,2020-04-06 14:44:45,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C
}",true,,,,,
neisele,IsBipartite,27,eval_input,2020-04-06 14:44:51,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + C->A
}",true,,,,,
neisele,IsBipartite,28,eval_input,2020-04-06 14:45:22,"inst myInst {
  Node = A + B + C
  edges = B->A
}",true,,,,,
neisele,IsBipartite,29,eval_input,2020-04-06 14:45:26,"inst myInst {
  Node = A + B + C
  edges = B->A + C->A
}",true,,,,,
neisele,IsBipartite,30,eval_input,2020-04-06 14:45:35,"inst myInst {
  Node = A + B + C
  edges = B->A + C->A + C->C
}",false,,,,,
neisele,IsBipartite,31,eval_input,2020-04-06 14:46:01,"inst myInst {
  Node = A + B + C
  edges = B->A + C->A + C->C
}",false,,,,,
neisele,IsBipartite,32,eval_input,2020-04-06 14:46:16,"inst myInst {
  Node = A + B + C + D
  edges = A->A + B->B
}",false,,,,,
neisele,IsBipartite,33,eval_input,2020-04-06 14:46:28,"inst myInst {
  Node = A + B + C + D
  edges = A->A + B->B + C->C
}",false,,,,,
neisele,IsBipartite,34,eval_input,2020-04-06 14:46:33,"inst myInst {
  Node = A + B + C + D
  edges = A->A + B->B + C->C + D->D
}",false,,,,,
neisele,IsBipartite,35,eval_input,2020-04-06 14:47:14,"inst myInst {
  Node = A + B + C + D
  edges = A->A +A->B
}",false,,,,,
neisele,IsBipartite,36,eval_input,2020-04-06 14:47:15,"inst myInst {
  Node = A + B + C + D
  edges = A->A +A->B
}",false,,,,,
neisele,IsBipartite,37,eval_input,2020-04-06 14:47:40,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->D + D->A
}",true,,,,,
neisele,IsBipartite,38,eval_input,2020-04-06 14:47:51,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->D + D->A + B->C
}",true,,,,,
neisele,IsBipartite,39,eval_input,2020-04-06 14:47:57,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->D + D->A + B->C + B->B
}",false,,,,,
neisele,IsBipartite,40,eval_input,2020-04-06 14:50:40,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->B
}",false,,,,,
neisele,IsBipartite,41,eval_input,2020-04-06 14:50:50,"inst myInst {
  Node = A + B + C + D
  edges = A->A + B->C
}",false,,,,,
neisele,IsBipartite,42,eval_input,2020-04-06 14:50:55,"inst myInst {
  Node = A + B + C 
  edges = A->A + B->C
}",false,,,,,
neisele,IsBipartite,43,eval_input,2020-04-06 14:52:45,"inst myInst {
  Node = A + B + C 
  edges = A->B + B->C + C->A
}",false,,,,,
neisele,IsBipartite,44,eval_input,2020-04-06 14:52:56,"inst myInst {
  Node = A + B + C 
  edges = A->B + B->C + C->A + C->C
}",false,,,,,
neisele,IsBipartite,45,eval_input,2020-04-06 14:58:40,"inst myInst {
  Node = A + B + C 
  edges = A->B + A->C + C->A
}",true,,,,,
neisele,IsBipartite,46,eval_input,2020-04-06 14:59:01,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",true,,,,,
neisele,IsBipartite,47,eval_input,2020-04-06 14:59:25,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
neisele,IsBipartite,48,eval_input,2020-04-06 14:59:36,"inst myInst {
  Node = A + B + C + D 
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
neisele,IsBipartite,49,eval_input,2020-04-06 14:59:45,"inst myInst {
  Node = A + B + C + D  + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
neisele,IsBipartite,50,quiz_answer,2020-04-06 15:00:03,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
neisele,IsBipartite,51,quiz_answer,2020-04-06 15:00:10,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
neisele,IsBipartite,52,quiz_answer,2020-04-06 15:00:20,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
neisele,IsBipartite,53,quiz_answer,2020-04-06 15:00:42,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
neisele,IsBipartite,54,quiz_answer,2020-04-06 15:00:51,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
neisele,IsBipartite,55,quiz_answer,2020-04-06 15:01:04,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
neisele,IsBipartite,56,quiz_answer,2020-04-06 15:01:14,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
neisele,IsBipartite,57,quiz_answer,2020-04-06 15:01:21,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
neisele,IsBipartite,58,final_answer,2020-04-06 15:01:24,,,,,,No odd sized rings,
neisele,ThreeCycle,59,eval_input,2020-04-06 15:02:04,"inst myInst {
  Node = A + B + C + D  + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
neisele,ThreeCycle,60,eval_input,2020-04-06 15:02:11,"inst myInst {
  Node = A 
  edges = none
}",false,,,,,
neisele,ThreeCycle,61,eval_input,2020-04-06 15:02:24,"inst myInst {
  Node = A 
  edges = A->A
}",false,,,,,
neisele,ThreeCycle,62,eval_input,2020-04-06 15:02:42,"inst myInst {
  Node = A + B
  edges = none
}",false,,,,,
neisele,ThreeCycle,63,eval_input,2020-04-06 15:02:47,"inst myInst {
  Node = A + B
  edges = A->B
}",false,,,,,
neisele,ThreeCycle,64,eval_input,2020-04-06 15:02:52,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
neisele,ThreeCycle,65,eval_input,2020-04-06 15:03:04,"inst myInst {
  Node = A + B
  edges = A->B + B->A + A->A + B->B
}",false,,,,,
neisele,ThreeCycle,66,eval_input,2020-04-06 15:03:09,"inst myInst {
  Node = A + B
  edges = A->B + B->A + A->A 
}",false,,,,,
neisele,ThreeCycle,67,eval_input,2020-04-06 15:03:13,"inst myInst {
  Node = A + B
  edges = A->B + A->A 
}",false,,,,,
neisele,ThreeCycle,68,eval_input,2020-04-06 15:03:18,"inst myInst {
  Node = A + B
  edges = A->B + B->B
}",false,,,,,
neisele,ThreeCycle,69,eval_input,2020-04-06 15:03:37,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",true,,,,,
neisele,ThreeCycle,70,eval_input,2020-04-06 15:03:58,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
neisele,ThreeCycle,71,eval_input,2020-04-06 15:04:36,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
neisele,ThreeCycle,72,eval_input,2020-04-06 15:05:22,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->D + D->E + E->F + F->A
}",false,,,,,
neisele,ThreeCycle,73,eval_input,2020-04-06 15:05:54,"inst myInst {
  Node = A + B + C 
  edges = A->B + A->C
}",false,,,,,
neisele,ThreeCycle,74,eval_input,2020-04-06 15:06:45,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",false,,,,,
neisele,ThreeCycle,75,eval_input,2020-04-06 15:07:45,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
neisele,ThreeCycle,76,eval_input,2020-04-06 15:08:13,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A 
}",true,,,,,
neisele,ThreeCycle,77,eval_input,2020-04-06 15:08:20,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->A 
}",true,,,,,
neisele,ThreeCycle,78,eval_input,2020-04-06 15:08:39,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->A + B->D 
}",true,,,,,
neisele,ThreeCycle,79,eval_input,2020-04-06 15:08:50,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->A + B->D + B->E
}",true,,,,,
neisele,ThreeCycle,80,eval_input,2020-04-06 15:09:07,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->A + B->D + B->E + C->E
}",true,,,,,
neisele,ThreeCycle,81,eval_input,2020-04-06 15:09:44,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->A + B->A + B->D + B->E + C->E
}",true,,,,,
neisele,ThreeCycle,82,eval_input,2020-04-06 15:10:20,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->A + B->A + A->C + C->B
}",true,,,,,
neisele,ThreeCycle,83,eval_input,2020-04-06 15:10:42,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B  + C->A + B->A + A->C 
}",false,,,,,
neisele,ThreeCycle,84,quiz_answer,2020-04-06 15:11:03,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
neisele,ThreeCycle,85,quiz_answer,2020-04-06 15:11:07,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
neisele,ThreeCycle,86,quiz_answer,2020-04-06 15:11:12,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
neisele,ThreeCycle,87,quiz_answer,2020-04-06 15:11:27,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
neisele,ThreeCycle,88,quiz_answer,2020-04-06 15:11:37,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
neisele,ThreeCycle,89,quiz_answer,2020-04-06 15:11:49,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
neisele,ThreeCycle,90,quiz_answer,2020-04-06 15:12:13,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
neisele,ThreeCycle,91,quiz_answer,2020-04-06 15:12:42,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
neisele,ThreeCycle,92,final_answer,2020-04-06 15:12:45,,,,,,Must contain a cycle of 3 nodes,
wbuerger,ThreeCycle,0,eval_input,2020-04-06 15:20:50,"inst myInst {
  Node = A
  edges = none
}",false,,,,,
wbuerger,ThreeCycle,1,eval_input,2020-04-06 15:23:27,"inst myInst {
  Node = A + B
  edges = none
}",false,,,,,
wbuerger,ThreeCycle,2,eval_input,2020-04-06 15:23:33,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
wbuerger,ThreeCycle,3,eval_input,2020-04-06 15:23:38,"inst myInst {
  Node = A + B
  edges = A->A
}",false,,,,,
wbuerger,ThreeCycle,4,eval_input,2020-04-06 15:23:41,"inst myInst {
  Node = A + B
  edges = A->B
}",false,,,,,
wbuerger,ThreeCycle,5,eval_input,2020-04-06 15:23:51,"inst myInst {
  Node = A + B
  edges = B->A
}",false,,,,,
wbuerger,ThreeCycle,6,eval_input,2020-04-06 15:23:55,"inst myInst {
  Node = A + B
  edges = B->A + A->B
}",false,,,,,
wbuerger,ThreeCycle,7,eval_input,2020-04-06 15:23:59,"inst myInst {
  Node = A + B + C
  edges = B->A + A->B
}",false,,,,,
wbuerger,ThreeCycle,8,eval_input,2020-04-06 15:24:09,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",true,,,,,
wbuerger,ThreeCycle,9,eval_input,2020-04-06 15:26:02,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",true,,,,,
wbuerger,ThreeCycle,10,eval_input,2020-04-06 15:26:07,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + B->A
}",false,,,,,
wbuerger,ThreeCycle,11,eval_input,2020-04-06 15:26:11,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",false,,,,,
wbuerger,ThreeCycle,12,eval_input,2020-04-06 15:26:16,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
}",true,,,,,
wbuerger,ThreeCycle,13,eval_input,2020-04-06 15:26:42,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D
}",false,,,,,
wbuerger,ThreeCycle,14,eval_input,2020-04-06 15:26:46,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
wbuerger,ThreeCycle,15,eval_input,2020-04-06 15:27:12,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
}",true,,,,,
wbuerger,ThreeCycle,16,eval_input,2020-04-06 15:27:27,"inst myInst {
  Node = A + B + C + D
  edges = B->D + D->A + A->B
}",true,,,,,
wbuerger,ThreeCycle,17,eval_input,2020-04-06 15:27:36,"inst myInst {
  Node = A + B + C + D
  edges = B->D + D->A + A->B
}",true,,,,,
wbuerger,ThreeCycle,18,eval_input,2020-04-06 15:27:39,"inst myInst {
  Node = A + B + C + D + E
  edges = B->D + D->A + A->B
}",true,,,,,
wbuerger,ThreeCycle,19,eval_input,2020-04-06 15:27:51,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->A
}",true,,,,,
wbuerger,ThreeCycle,20,eval_input,2020-04-06 15:27:55,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->A + D->E
}",true,,,,,
wbuerger,ThreeCycle,21,eval_input,2020-04-06 15:28:02,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->A + D->E + E->A
}",true,,,,,
wbuerger,ThreeCycle,22,eval_input,2020-04-06 15:28:13,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->A + D->E + E->A
          + B->A
}",true,,,,,
wbuerger,ThreeCycle,23,eval_input,2020-04-06 15:28:21,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->A
}",true,,,,,
wbuerger,ThreeCycle,24,quiz_answer,2020-04-06 15:28:44,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
wbuerger,ThreeCycle,25,quiz_answer,2020-04-06 15:28:48,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
wbuerger,ThreeCycle,26,quiz_answer,2020-04-06 15:28:50,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
wbuerger,ThreeCycle,27,quiz_answer,2020-04-06 15:28:56,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
wbuerger,ThreeCycle,28,quiz_answer,2020-04-06 15:29:00,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
wbuerger,ThreeCycle,29,quiz_answer,2020-04-06 15:29:04,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
wbuerger,ThreeCycle,30,quiz_answer,2020-04-06 15:29:28,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
wbuerger,ThreeCycle,31,quiz_answer,2020-04-06 15:29:41,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
wbuerger,ThreeCycle,32,final_answer,2020-04-06 15:29:43,,,,,,there exists a cycle with 3 nodes,
wbuerger,IsDag,33,eval_input,2020-04-06 15:31:05,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->A
}",false,,,,,
wbuerger,IsDag,34,eval_input,2020-04-06 15:31:15,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
wbuerger,IsDag,35,eval_input,2020-04-06 15:31:18,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
wbuerger,IsDag,36,eval_input,2020-04-06 15:31:22,"inst myInst {
  Node = A + B
  edges = none
}",true,,,,,
wbuerger,IsDag,37,eval_input,2020-04-06 15:31:25,"inst myInst {
  Node = A + B + C
  edges = none
}",true,,,,,
wbuerger,IsDag,38,eval_input,2020-04-06 15:31:29,"inst myInst {
  Node = A + B + C
  edges = A->A
}",false,,,,,
wbuerger,IsDag,39,eval_input,2020-04-06 15:31:32,"inst myInst {
  Node = A + B + C
  edges = A->B
}",true,,,,,
wbuerger,IsDag,40,eval_input,2020-04-06 15:31:36,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",false,,,,,
wbuerger,IsDag,41,eval_input,2020-04-06 15:31:38,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
wbuerger,IsDag,42,eval_input,2020-04-06 15:31:42,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C
}",true,,,,,
wbuerger,IsDag,43,eval_input,2020-04-06 15:31:52,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C + C->A
}",false,,,,,
wbuerger,IsDag,44,quiz_answer,2020-04-06 15:32:02,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
wbuerger,IsDag,45,quiz_answer,2020-04-06 15:32:05,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
wbuerger,IsDag,46,quiz_answer,2020-04-06 15:32:09,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
wbuerger,IsDag,47,quiz_answer,2020-04-06 15:32:18,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
wbuerger,IsDag,48,quiz_answer,2020-04-06 15:32:22,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
wbuerger,IsDag,49,quiz_answer,2020-04-06 15:32:30,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,true,false,,
wbuerger,IsDag,50,quiz_answer,2020-04-06 15:32:46,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
wbuerger,IsDag,51,quiz_answer,2020-04-06 15:32:49,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
wbuerger,IsDag,52,quiz_answer,2020-04-06 15:32:51,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
wbuerger,IsDag,53,quiz_answer,2020-04-06 15:32:53,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
wbuerger,IsDag,54,quiz_answer,2020-04-06 15:32:56,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
wbuerger,IsDag,55,quiz_answer,2020-04-06 15:33:02,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
wbuerger,IsDag,56,quiz_answer,2020-04-06 15:34:34,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
wbuerger,IsDag,57,quiz_answer,2020-04-06 15:34:39,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
wbuerger,IsDag,58,final_answer,2020-04-06 15:34:40,,,,,,no cycles!,
wbuerger,IsBipartite,59,eval_input,2020-04-06 15:35:07,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
wbuerger,IsBipartite,60,eval_input,2020-04-06 15:35:10,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
wbuerger,IsBipartite,61,eval_input,2020-04-06 15:35:13,"inst myInst {
  Node = A + B
  edges = none
}",true,,,,,
wbuerger,IsBipartite,62,eval_input,2020-04-06 15:35:16,"inst myInst {
  Node = A + B
  edges = A->A
}",false,,,,,
wbuerger,IsBipartite,63,eval_input,2020-04-06 15:35:19,"inst myInst {
  Node = A + B
  edges = A->B
}",true,,,,,
wbuerger,IsBipartite,64,eval_input,2020-04-06 15:35:25,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",true,,,,,
wbuerger,IsBipartite,65,eval_input,2020-04-06 15:35:29,"inst myInst {
  Node = A + B
  edges = A->B + B->A + B->B
}",false,,,,,
wbuerger,IsBipartite,66,eval_input,2020-04-06 15:35:39,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + C->B
}",true,,,,,
wbuerger,IsBipartite,67,eval_input,2020-04-06 15:35:47,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + C->B + C->A
}",true,,,,,
wbuerger,IsBipartite,68,eval_input,2020-04-06 15:35:50,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + C->B + C->A + A->C
}",false,,,,,
wbuerger,IsBipartite,69,eval_input,2020-04-06 15:36:33,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + C->B + C->A
}",true,,,,,
wbuerger,IsBipartite,70,eval_input,2020-04-06 15:36:39,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + C->B + C->A + B->C
}",false,,,,,
wbuerger,IsBipartite,71,eval_input,2020-04-06 15:38:29,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->A + C->B + C->A
}",true,,,,,
wbuerger,IsBipartite,72,eval_input,2020-04-06 15:38:35,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->A + C->B + A->C
}",false,,,,,
wbuerger,IsBipartite,73,quiz_answer,2020-04-06 15:40:22,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
wbuerger,IsBipartite,74,eval_input,2020-04-06 15:40:58,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
}",false,,,,,
wbuerger,IsBipartite,75,eval_input,2020-04-06 15:41:03,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C 
}",true,,,,,
wbuerger,IsBipartite,76,eval_input,2020-04-06 15:41:07,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + A->C
}",true,,,,,
wbuerger,IsBipartite,77,eval_input,2020-04-06 15:41:13,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + A->C + C->A
}",false,,,,,
wbuerger,IsBipartite,78,eval_input,2020-04-06 15:41:27,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + D->D
}",false,,,,,
wbuerger,IsBipartite,79,quiz_answer,2020-04-06 15:41:37,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
wbuerger,IsBipartite,80,quiz_answer,2020-04-06 15:41:40,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
wbuerger,IsBipartite,81,quiz_answer,2020-04-06 15:41:43,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,true,false,,
wbuerger,IsBipartite,82,eval_input,2020-04-06 15:41:52,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->A
}",true,,,,,
wbuerger,IsBipartite,83,eval_input,2020-04-06 15:42:03,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D
}",true,,,,,
wbuerger,IsBipartite,84,eval_input,2020-04-06 15:42:08,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
wbuerger,IsBipartite,85,eval_input,2020-04-06 15:42:13,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A + D->D
}",false,,,,,
wbuerger,IsBipartite,86,eval_input,2020-04-06 15:42:22,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A + A->D
}",true,,,,,
wbuerger,IsBipartite,87,eval_input,2020-04-06 15:43:52,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A + A->D
}",true,,,,,
wbuerger,IsBipartite,88,eval_input,2020-04-06 15:45:23,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A + A->D
}",true,,,,,
wbuerger,IsBipartite,89,eval_input,2020-04-06 15:48:05,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A + A->D
}",true,,,,,
wbuerger,IsBipartite,90,eval_input,2020-04-06 15:48:13,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A + A->A
}",false,,,,,
wbuerger,IsBipartite,91,eval_input,2020-04-06 15:48:21,"inst myInst {
  Node = A + B + C + D
  edges = A->A
}",false,,,,,
wbuerger,IsBipartite,92,eval_input,2020-04-06 15:48:26,"inst myInst {
  Node = A + B + C + D
  edges = D->D
}",false,,,,,
wbuerger,IsBipartite,93,eval_input,2020-04-06 15:48:33,"inst myInst {
  Node = A + B + C + D
  edges = A->D
}",true,,,,,
wbuerger,IsBipartite,94,eval_input,2020-04-06 15:48:37,"inst myInst {
  Node = A + B + C + D
  edges = none
}",true,,,,,
wbuerger,IsBipartite,95,eval_input,2020-04-06 15:48:43,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->A
}",true,,,,,
wbuerger,IsBipartite,96,eval_input,2020-04-06 15:48:47,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C
}",true,,,,,
wbuerger,IsBipartite,97,eval_input,2020-04-06 15:49:48,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
}",false,,,,,
wbuerger,IsBipartite,98,eval_input,2020-04-06 15:49:57,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D
}",true,,,,,
msantoma,ThreeCycle,0,eval_input,2020-04-06 15:50:18,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
wbuerger,IsBipartite,99,eval_input,2020-04-06 15:50:24,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
wbuerger,IsBipartite,100,eval_input,2020-04-06 15:50:29,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
msantoma,ThreeCycle,1,eval_input,2020-04-06 15:50:34,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}

inst myInst {
  Node = none
  edges = none
}",false,,,,,
wbuerger,IsBipartite,101,quiz_answer,2020-04-06 15:50:55,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
wbuerger,IsBipartite,102,quiz_answer,2020-04-06 15:50:59,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
wbuerger,IsBipartite,103,quiz_answer,2020-04-06 15:51:04,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
msantoma,ThreeCycle,2,eval_input,2020-04-06 15:51:11,"inst myInst {
  Node = none
  edges = none
}

inst myInst {
  Node = A
  edges = none
}

inst myInst {
  Node = A + B
  edges = none
}

inst myInst {
  Node = A + B + C
  edges = none
}",false,,,,,
wbuerger,IsBipartite,104,quiz_answer,2020-04-06 15:51:14,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
wbuerger,IsBipartite,105,quiz_answer,2020-04-06 15:51:17,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
wbuerger,IsBipartite,106,quiz_answer,2020-04-06 15:51:23,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
wbuerger,IsBipartite,107,quiz_answer,2020-04-06 15:51:27,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
wbuerger,IsBipartite,108,quiz_answer,2020-04-06 15:51:33,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
wbuerger,IsBipartite,109,final_answer,2020-04-06 15:51:34,,,,,,odd cycle,
msantoma,ThreeCycle,3,eval_input,2020-04-06 15:51:51,"inst myInst {
  Node = A
  edges = none
}

inst myInst {
  Node = A + B
  edges = none
}",false,,,,,
msantoma,ThreeCycle,4,eval_input,2020-04-06 15:51:56,"inst myInst {
  Node = A
  edges = none
}",false,,,,,
msantoma,ThreeCycle,5,eval_input,2020-04-06 15:52:00,"inst myInst {
  Node = A + B
  edges = none
}",false,,,,,
msantoma,ThreeCycle,6,eval_input,2020-04-06 15:52:06,"inst myInst {
  Node = none
  edges = none
}",false,,,,,
msantoma,ThreeCycle,7,eval_input,2020-04-06 15:52:17,"inst myInst {
  Node = A
  edges = A -> A
}",false,,,,,
msantoma,ThreeCycle,8,eval_input,2020-04-06 15:52:25,"inst myInst {
  Node = A + B
  edges = A -> B
}",false,,,,,
msantoma,ThreeCycle,9,eval_input,2020-04-06 15:52:27,"inst myInst {
  Node = A + B
  edges = A -> B
}",false,,,,,
msantoma,ThreeCycle,10,eval_input,2020-04-06 15:52:28,"inst myInst {
  Node = A + B
  edges = A -> B
}",false,,,,,
msantoma,ThreeCycle,11,eval_input,2020-04-06 15:52:34,"inst myInst {
  Node = A + B
  edges = A -> B + B -> A
}",false,,,,,
msantoma,ThreeCycle,12,eval_input,2020-04-06 15:52:51,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
msantoma,ThreeCycle,13,eval_input,2020-04-06 15:52:58,"inst myInst {
  Node = A + B
  edges = A->B
}",false,,,,,
msantoma,ThreeCycle,14,eval_input,2020-04-06 15:53:10,"inst myInst {
  Node = A + B + C
  edges = none
}",false,,,,,
msantoma,ThreeCycle,15,eval_input,2020-04-06 15:53:15,"inst myInst {
  Node = A + B + C
  edges = A->B
}",false,,,,,
msantoma,ThreeCycle,16,eval_input,2020-04-06 15:53:17,"inst myInst {
  Node = A + B + C
  edges = A->B
}",false,,,,,
msantoma,ThreeCycle,17,eval_input,2020-04-06 15:53:17,"inst myInst {
  Node = A + B + C
  edges = A->B
}",false,,,,,
msantoma,ThreeCycle,18,eval_input,2020-04-06 15:53:24,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",false,,,,,
msantoma,ThreeCycle,19,eval_input,2020-04-06 15:53:29,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",false,,,,,
msantoma,ThreeCycle,20,eval_input,2020-04-06 15:53:38,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",true,,,,,
msantoma,ThreeCycle,21,eval_input,2020-04-06 15:53:58,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
msantoma,ThreeCycle,22,eval_input,2020-04-06 15:54:24,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->A
}",false,,,,,
msantoma,ThreeCycle,23,eval_input,2020-04-06 15:54:33,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
}",true,,,,,
msantoma,ThreeCycle,24,eval_input,2020-04-06 15:54:44,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
msantoma,ThreeCycle,25,eval_input,2020-04-06 15:55:06,"inst myInst {
  Node = A + B + C + D
  edges = B->C + C->A + A->B
}",true,,,,,
msantoma,ThreeCycle,26,eval_input,2020-04-06 15:55:18,"inst myInst {
  Node = A + B + C + D
  edges = B->C + C->A + A->D
}",false,,,,,
msantoma,ThreeCycle,27,eval_input,2020-04-06 15:55:34,"inst myInst {
  Node = A + B + C + D
  edges = D->C + C->A + A->D
}",true,,,,,
msantoma,ThreeCycle,28,quiz_answer,2020-04-06 15:55:57,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
msantoma,ThreeCycle,29,quiz_answer,2020-04-06 15:56:01,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
msantoma,ThreeCycle,30,quiz_answer,2020-04-06 15:56:08,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
msantoma,ThreeCycle,31,quiz_answer,2020-04-06 15:56:14,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
msantoma,ThreeCycle,32,quiz_answer,2020-04-06 15:56:19,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
msantoma,ThreeCycle,33,quiz_answer,2020-04-06 15:56:24,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
msantoma,ThreeCycle,34,quiz_answer,2020-04-06 15:56:30,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
msantoma,ThreeCycle,35,quiz_answer,2020-04-06 15:56:39,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
msantoma,ThreeCycle,36,final_answer,2020-04-06 15:56:41,,,,,,Cycle of length/size 3,
msantoma,IsDag,37,eval_input,2020-04-06 15:57:00,"inst myInst {
  Node = A + B + C + D
  edges = D->C + C->A + A->D
}",false,,,,,
msantoma,IsDag,38,eval_input,2020-04-06 15:57:13,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
msantoma,IsDag,39,eval_input,2020-04-06 15:57:20,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
msantoma,IsDag,40,eval_input,2020-04-06 15:57:24,"inst myInst {
  Node = A
  edges = A -> A
}",false,,,,,
msantoma,IsDag,41,eval_input,2020-04-06 15:57:34,"inst myInst {
  Node = A + B
  edges = none
}",true,,,,,
msantoma,IsDag,42,eval_input,2020-04-06 15:57:39,"inst myInst {
  Node = A + B
  edges = A->A
}",false,,,,,
msantoma,IsDag,43,eval_input,2020-04-06 15:57:44,"inst myInst {
  Node = A + B
  edges = A->A + B->B
}",false,,,,,
msantoma,IsDag,44,eval_input,2020-04-06 15:57:47,"inst myInst {
  Node = A + B
  edges = A->B
}",true,,,,,
msantoma,IsDag,45,eval_input,2020-04-06 15:57:54,"inst myInst {
  Node = A + B + C
  edges = A->B
}",true,,,,,
msantoma,IsDag,46,eval_input,2020-04-06 15:58:02,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
msantoma,IsDag,47,eval_input,2020-04-06 15:58:05,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
msantoma,IsDag,48,eval_input,2020-04-06 15:58:09,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
msantoma,IsDag,49,eval_input,2020-04-06 15:58:22,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C
}",true,,,,,
msantoma,IsDag,50,eval_input,2020-04-06 15:58:40,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->B
}",true,,,,,
msantoma,IsDag,51,eval_input,2020-04-06 15:58:46,"inst myInst {
  Node = A + B + C + D
  edges = A->B + A->C
}",true,,,,,
msantoma,IsDag,52,eval_input,2020-04-06 15:58:52,"inst myInst {
  Node = A + B + C + D
  edges = A->B + A->C
}",true,,,,,
msantoma,IsDag,53,eval_input,2020-04-06 15:58:52,"inst myInst {
  Node = A + B + C + D
  edges = A->B + A->C
}",true,,,,,
msantoma,IsDag,54,eval_input,2020-04-06 15:58:57,"inst myInst {
  Node = A + B + C + D
  edges = A->B + A->C + D->C
}",true,,,,,
msantoma,IsDag,55,eval_input,2020-04-06 15:59:02,"inst myInst {
  Node = A + B + C + D
  edges = A->B + A->C + D->C
}",true,,,,,
msantoma,IsDag,56,eval_input,2020-04-06 15:59:07,"inst myInst {
  Node = A + B + C + D
  edges = A->B + A->C + D->C + C->A
}",false,,,,,
msantoma,IsDag,57,eval_input,2020-04-06 15:59:18,"inst myInst {
  Node = A + B + C + D
  edges = A->B + A->C + D->C + C->B
}",true,,,,,
msantoma,IsDag,58,quiz_answer,2020-04-06 15:59:38,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
msantoma,IsDag,59,quiz_answer,2020-04-06 15:59:41,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
msantoma,IsDag,60,quiz_answer,2020-04-06 15:59:45,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
msantoma,IsDag,61,quiz_answer,2020-04-06 15:59:54,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
msantoma,IsDag,62,quiz_answer,2020-04-06 15:59:58,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
msantoma,IsDag,63,quiz_answer,2020-04-06 16:00:05,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
msantoma,IsDag,64,quiz_answer,2020-04-06 16:00:12,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
msantoma,IsDag,65,quiz_answer,2020-04-06 16:00:23,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
msantoma,IsDag,66,final_answer,2020-04-06 16:00:24,,,,,,does not contain cycles,
msantoma,IsBipartite,67,eval_input,2020-04-06 16:00:42,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
msantoma,IsBipartite,68,eval_input,2020-04-06 16:00:47,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
msantoma,IsBipartite,69,eval_input,2020-04-06 16:00:51,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
msantoma,IsBipartite,70,eval_input,2020-04-06 16:00:57,"inst myInst {
  Node = A + B
  edges = A->A
}",false,,,,,
msantoma,IsBipartite,71,eval_input,2020-04-06 16:01:00,"inst myInst {
  Node = A + B
  edges = A->B
}",true,,,,,
msantoma,IsBipartite,72,eval_input,2020-04-06 16:01:07,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",true,,,,,
msantoma,IsBipartite,73,eval_input,2020-04-06 16:01:22,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B
}",true,,,,,
msantoma,IsBipartite,74,eval_input,2020-04-06 16:01:28,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C
}",true,,,,,
msantoma,IsBipartite,75,eval_input,2020-04-06 16:01:37,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C
}",true,,,,,
msantoma,IsBipartite,76,eval_input,2020-04-06 16:01:37,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C
}",true,,,,,
msantoma,IsBipartite,77,eval_input,2020-04-06 16:01:41,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + C->C
}",false,,,,,
msantoma,IsBipartite,78,eval_input,2020-04-06 16:02:01,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
msantoma,IsBipartite,79,eval_input,2020-04-06 16:02:11,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",true,,,,,
msantoma,IsBipartite,80,eval_input,2020-04-06 16:02:23,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D
}",true,,,,,
msantoma,IsBipartite,81,eval_input,2020-04-06 16:02:27,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D
}",true,,,,,
msantoma,IsBipartite,82,eval_input,2020-04-06 16:02:27,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D
}",true,,,,,
msantoma,IsBipartite,83,eval_input,2020-04-06 16:02:30,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
msantoma,IsBipartite,84,eval_input,2020-04-06 16:02:46,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
msantoma,IsBipartite,85,eval_input,2020-04-06 16:02:55,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->A
}",false,,,,,
msantoma,IsBipartite,86,eval_input,2020-04-06 16:03:10,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
msantoma,IsBipartite,87,quiz_answer,2020-04-06 16:03:33,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
msantoma,IsBipartite,88,quiz_answer,2020-04-06 16:03:36,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
msantoma,IsBipartite,89,quiz_answer,2020-04-06 16:03:39,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
msantoma,IsBipartite,90,quiz_answer,2020-04-06 16:03:48,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
msantoma,IsBipartite,91,quiz_answer,2020-04-06 16:03:52,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
msantoma,IsBipartite,92,quiz_answer,2020-04-06 16:03:56,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
msantoma,IsBipartite,93,quiz_answer,2020-04-06 16:04:04,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
msantoma,IsBipartite,94,quiz_answer,2020-04-06 16:04:09,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
msantoma,IsBipartite,95,final_answer,2020-04-06 16:04:10,,,,,,true for relations which do not contain a cycle of an odd size,
yli322,IsDag,0,eval_input,2020-04-06 16:35:23,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
yli322,IsDag,1,eval_input,2020-04-06 16:35:49,"inst myInst {
  Node = A
  edges = A -> A
}",false,,,,,
yli322,IsDag,2,eval_input,2020-04-06 16:36:04,"inst myInst {
  Node = A + B
  edges = A -> A
}",false,,,,,
yli322,IsDag,3,eval_input,2020-04-06 16:36:09,"inst myInst {
  Node = A + B
  edges = A -> B
}",true,,,,,
yli322,IsDag,4,eval_input,2020-04-06 16:36:22,"inst myInst {
  Node = A + B
  edges = A -> A + B -> B
}",false,,,,,
yli322,IsDag,5,eval_input,2020-04-06 16:36:29,"inst myInst {
  Node = A + B
  edges = A -> B + B -> B
}",false,,,,,
yli322,IsDag,6,eval_input,2020-04-06 16:36:45,"inst myInst {
  Node = A + B
  edges = A -> B + B -> A
}",false,,,,,
yli322,IsDag,7,eval_input,2020-04-06 18:00:48,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + C -> A
}",false,,,,,
yli322,IsDag,8,quiz_answer,2020-04-06 18:03:49,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
yli322,IsDag,9,quiz_answer,2020-04-06 18:05:11,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yli322,IsDag,10,quiz_answer,2020-04-06 18:05:23,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
yli322,IsDag,11,quiz_answer,2020-04-06 18:05:33,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
yli322,IsDag,12,quiz_answer,2020-04-06 18:05:50,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
yli322,IsDag,13,quiz_answer,2020-04-06 18:05:56,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
yli322,IsDag,14,quiz_answer,2020-04-06 18:06:03,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
yli322,IsDag,15,quiz_answer,2020-04-06 18:06:10,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
yli322,IsDag,16,quiz_answer,2020-04-06 18:06:16,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
yli322,IsDag,17,final_answer,2020-04-06 18:06:18,,,,,,It tests if the graph is acyclic.,
yli322,IsBipartite,18,eval_input,2020-04-06 18:08:03,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + C -> A
}",false,,,,,
mthomp13,IsDag,0,eval_input,2020-04-06 18:08:13,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
yli322,IsBipartite,19,eval_input,2020-04-06 18:08:18,"inst myInst {
  Node = A + B + C
  edges = A -> A
}",false,,,,,
mthomp13,IsDag,1,eval_input,2020-04-06 18:08:18,"inst myInst {
  Node = A
       + B
      
  edges = none
}",true,,,,,
mthomp13,IsDag,2,eval_input,2020-04-06 18:08:22,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
mthomp13,IsDag,3,eval_input,2020-04-06 18:08:27,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
mthomp13,IsDag,4,eval_input,2020-04-06 18:08:33,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
}",true,,,,,
mthomp13,IsDag,5,eval_input,2020-04-06 18:08:39,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + A->C
}",true,,,,,
yli322,IsBipartite,20,eval_input,2020-04-06 18:08:45,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> A
}",true,,,,,
mthomp13,IsDag,6,eval_input,2020-04-06 18:08:51,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + A->C + C->A
}",false,,,,,
yli322,IsBipartite,21,eval_input,2020-04-06 18:08:54,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> A + A -> C
}",true,,,,,
mthomp13,IsDag,7,eval_input,2020-04-06 18:09:00,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + A->C + C->B
}",false,,,,,
mthomp13,IsDag,8,eval_input,2020-04-06 18:09:04,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + A->C + B->A
}",false,,,,,
yli322,IsBipartite,22,eval_input,2020-04-06 18:09:10,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + C -> A
}",false,,,,,
mthomp13,IsDag,9,eval_input,2020-04-06 18:09:16,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + A->C
}",true,,,,,
mthomp13,IsDag,10,eval_input,2020-04-06 18:09:24,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + A->C + C->D
}",true,,,,,
mthomp13,IsDag,11,eval_input,2020-04-06 18:09:35,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + A->C + C->D
        + A->D
}",true,,,,,
mthomp13,IsDag,12,eval_input,2020-04-06 18:09:41,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + A->C + C->D
        + A->D + B->D
}",true,,,,,
mthomp13,IsDag,13,eval_input,2020-04-06 18:09:45,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + A->C + C->D
        + A->D + B->D + D->A
}",false,,,,,
yliang6,IsBipartite,0,eval_input,2020-04-06 18:10:07,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
yliang6,IsBipartite,1,eval_input,2020-04-06 18:10:34,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
yliang6,IsBipartite,2,eval_input,2020-04-06 18:10:41,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B+B->C
}",true,,,,,
yli322,IsBipartite,23,quiz_answer,2020-04-06 18:10:41,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
mthomp13,IsDag,14,eval_input,2020-04-06 18:10:43,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B
}",true,,,,,
yliang6,IsBipartite,3,eval_input,2020-04-06 18:10:46,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B+B->C+A->C
}",true,,,,,
yliang6,IsBipartite,4,eval_input,2020-04-06 18:10:56,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B+B->A
}",true,,,,,
mthomp13,IsDag,15,eval_input,2020-04-06 18:10:56,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = none
}",true,,,,,
yli322,IsBipartite,24,eval_input,2020-04-06 18:11:03,"inst myInst {
  Node = A
  edges = A -> A
}",false,,,,,
yliang6,IsBipartite,5,eval_input,2020-04-06 18:11:17,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B+B->A+A->C+C->A+B->C+C->B
}",false,,,,,
yliang6,IsBipartite,6,eval_input,2020-04-06 18:11:29,"inst myInst {
  Node = A
       + B
  edges = A->B+B->A
}",true,,,,,
yliang6,IsBipartite,7,eval_input,2020-04-06 18:11:49,"inst myInst {
  Node = A
       + B
  edges = A->B
}",true,,,,,
mthomp13,IsDag,16,eval_input,2020-04-06 18:11:58,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = B->D
}",true,,,,,
yliang6,IsBipartite,8,eval_input,2020-04-06 18:12:03,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B+B->A+A->C+C->A+B->C+C->B
}",false,,,,,
mthomp13,IsDag,17,eval_input,2020-04-06 18:12:16,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->A
}",false,,,,,
yliang6,IsBipartite,9,eval_input,2020-04-06 18:12:21,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B+B->A+A->C+C->A+B->C
}",false,,,,,
yliang6,IsBipartite,10,eval_input,2020-04-06 18:12:26,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B+B->A+A->C+C->A
}",true,,,,,
yli322,IsBipartite,25,eval_input,2020-04-06 18:12:29,"inst myInst {
  Node = A + B
  edges = A -> A + B -> B
}",false,,,,,
yli322,IsBipartite,26,eval_input,2020-04-06 18:12:40,"inst myInst {
  Node = A + B
  edges = A -> A + B -> B + A -> B
}",false,,,,,
yli322,IsBipartite,27,eval_input,2020-04-06 18:12:48,"inst myInst {
  Node = A + B
  edges = A -> A + B -> B + A -> B + B -> A
}",false,,,,,
yli322,IsBipartite,28,eval_input,2020-04-06 18:12:55,"inst myInst {
  Node = A + B
  edges = A -> B + B -> A
}",true,,,,,
yli322,IsBipartite,29,eval_input,2020-04-06 18:13:08,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + C -> A
}",false,,,,,
yliang6,IsBipartite,11,eval_input,2020-04-06 18:13:26,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B+B->A+A->C+C->A+C->B
}",false,,,,,
yli322,IsBipartite,30,eval_input,2020-04-06 18:13:41,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> A + B -> C + C -> B + C -> A + A -> C
}",false,,,,,
yliang6,IsBipartite,12,eval_input,2020-04-06 18:13:46,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B+A->C+C->A+C->B
}",true,,,,,
mthomp13,IsDag,18,quiz_answer,2020-04-06 18:14:25,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mthomp13,IsDag,19,quiz_answer,2020-04-06 18:14:34,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mthomp13,IsDag,20,quiz_answer,2020-04-06 18:14:38,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mthomp13,IsDag,21,quiz_answer,2020-04-06 18:14:46,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
yli322,IsBipartite,31,eval_input,2020-04-06 18:14:46,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> A + A -> C + C -> A
}",true,,,,,
mthomp13,IsDag,22,quiz_answer,2020-04-06 18:14:50,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
yli322,IsBipartite,32,eval_input,2020-04-06 18:14:56,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> A + A -> C + C -> D
}",true,,,,,
mthomp13,IsDag,23,quiz_answer,2020-04-06 18:14:56,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mthomp13,IsDag,24,quiz_answer,2020-04-06 18:15:10,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
yli322,IsBipartite,33,quiz_answer,2020-04-06 18:15:19,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mthomp13,IsDag,25,quiz_answer,2020-04-06 18:15:20,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mthomp13,IsDag,26,final_answer,2020-04-06 18:15:22,,,,,,"pred rules{
    edges.edges in edges  --transitive
    no iden & edges.            --irreflexive
    ~edges not in edges    --antisymmetric
}",
yli322,IsBipartite,34,quiz_answer,2020-04-06 18:15:24,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
yli322,IsBipartite,35,quiz_answer,2020-04-06 18:15:29,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
yli322,IsBipartite,36,quiz_answer,2020-04-06 18:15:38,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
yliang6,IsBipartite,13,eval_input,2020-04-06 18:15:52,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B+B->A+A->C+C->A
}",true,,,,,
yliang6,IsBipartite,14,eval_input,2020-04-06 18:16:01,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B+B->A+A->C+C->A+B->C
}",false,,,,,
mthomp13,IsBipartite,27,eval_input,2020-04-06 18:16:07,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->A
}",false,,,,,
yli322,IsBipartite,37,eval_input,2020-04-06 18:16:11,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C
}",true,,,,,
mthomp13,IsBipartite,28,eval_input,2020-04-06 18:16:16,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B
}",true,,,,,
mthomp13,IsBipartite,29,eval_input,2020-04-06 18:16:21,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->A
}",true,,,,,
yli322,IsBipartite,38,eval_input,2020-04-06 18:16:22,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> D
}",true,,,,,
yli322,IsBipartite,39,eval_input,2020-04-06 18:16:34,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + C -> D + E -> B
}",true,,,,,
mthomp13,IsBipartite,30,eval_input,2020-04-06 18:16:54,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->A + C->A
}",true,,,,,
yli322,IsBipartite,40,eval_input,2020-04-06 18:16:56,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + C -> D + E -> B + E -> D
}",true,,,,,
mthomp13,IsBipartite,31,eval_input,2020-04-06 18:17:01,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->A + C->A + A->C
}",true,,,,,
yli322,IsBipartite,41,eval_input,2020-04-06 18:17:07,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + C -> D + E -> B + E -> D + D -> A
}",true,,,,,
mthomp13,IsBipartite,32,eval_input,2020-04-06 18:17:15,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + A->C
}",true,,,,,
mthomp13,IsBipartite,33,eval_input,2020-04-06 18:17:26,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + A->C + C->A
}",false,,,,,
yliang6,IsBipartite,15,eval_input,2020-04-06 18:17:27,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B+B->A+A->C+C->A+B->C
}",false,,,,,
yliang6,IsBipartite,16,eval_input,2020-04-06 18:17:31,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A->B+B->A+A->C+C->A+B->C
}",false,,,,,
yli322,IsBipartite,42,eval_input,2020-04-06 18:17:37,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + C -> D + E -> B + E -> D + D -> A + D -> E
}",true,,,,,
mthomp13,IsBipartite,34,eval_input,2020-04-06 18:17:43,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + A->C + C->B
}",true,,,,,
mthomp13,IsBipartite,35,eval_input,2020-04-06 18:17:50,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + A->C + C->B + B->A
}",false,,,,,
yli322,IsBipartite,43,eval_input,2020-04-06 18:18:14,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + C -> D + E -> B + E -> D + D -> A + D -> E + C -> A
}",false,,,,,
mthomp13,IsBipartite,36,eval_input,2020-04-06 18:18:19,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + A->C + C->B + C->D
}",true,,,,,
mthomp13,IsBipartite,37,eval_input,2020-04-06 18:18:23,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + A->C + C->B + C->D + D->B
}",false,,,,,
yliang6,IsBipartite,17,quiz_answer,2020-04-06 18:18:26,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mthomp13,IsBipartite,38,eval_input,2020-04-06 18:18:27,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + A->C + C->D + D->B
}",false,,,,,
yliang6,IsBipartite,18,quiz_answer,2020-04-06 18:18:31,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mthomp13,IsBipartite,39,eval_input,2020-04-06 18:18:32,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + A->C + C->D
}",true,,,,,
mthomp13,IsBipartite,40,eval_input,2020-04-06 18:18:38,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + A->C + C->D + D->C
}",true,,,,,
yli322,IsBipartite,44,quiz_answer,2020-04-06 18:18:42,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yliang6,IsBipartite,19,quiz_answer,2020-04-06 18:18:46,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,true,false,,
yli322,IsBipartite,45,quiz_answer,2020-04-06 18:18:47,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
yli322,IsBipartite,46,quiz_answer,2020-04-06 18:18:58,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,true,false,,
mthomp13,IsBipartite,41,eval_input,2020-04-06 18:19:22,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + A->C + C->D + D->C
        + A->D
}",true,,,,,
mthomp13,IsBipartite,42,eval_input,2020-04-06 18:19:29,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + A->C + C->D + D->C
        + A->D
}",true,,,,,
mthomp13,IsBipartite,43,eval_input,2020-04-06 18:19:41,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + C->B
}",true,,,,,
yliang6,IsBipartite,20,eval_input,2020-04-06 18:19:58,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A->B+B->A+A->C+C->A+B->C
}",false,,,,,
mthomp13,IsBipartite,44,eval_input,2020-04-06 18:20:01,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + C->B + A->C
}",true,,,,,
yli322,IsBipartite,47,eval_input,2020-04-06 18:20:07,"inst myInst {
  Node = A + B
  edges = A -> B
}",true,,,,,
yli322,IsBipartite,48,eval_input,2020-04-06 18:20:15,"inst myInst {
  Node = A + B
  edges = A -> B + B -> A
}",true,,,,,
yli322,IsBipartite,49,eval_input,2020-04-06 18:20:24,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> A
}",true,,,,,
mthomp13,IsBipartite,45,eval_input,2020-04-06 18:20:34,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + C->B + A->C
}",true,,,,,
yli322,IsBipartite,50,eval_input,2020-04-06 18:20:39,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> A + C -> D
}",true,,,,,
yli322,IsBipartite,51,eval_input,2020-04-06 18:20:53,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> A + C -> D + B -> C
}",true,,,,,
yli322,IsBipartite,52,eval_input,2020-04-06 18:20:59,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> A + B -> C
}",true,,,,,
yli322,IsBipartite,53,eval_input,2020-04-06 18:21:08,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> A + B -> C + A -> C
}",true,,,,,
yli322,IsBipartite,54,eval_input,2020-04-06 18:21:20,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> A + B -> C + C -> A
}",false,,,,,
yli322,IsBipartite,55,eval_input,2020-04-06 18:21:28,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> A
}",false,,,,,
yli322,IsBipartite,56,eval_input,2020-04-06 18:21:40,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> A + C -> D
}",false,,,,,
mthomp13,IsBipartite,46,eval_input,2020-04-06 18:21:43,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = none
}",true,,,,,
mthomp13,IsBipartite,47,eval_input,2020-04-06 18:21:48,"inst myInst {
  Node = none 
  edges = none
}",true,,,,,
mthomp13,IsBipartite,48,eval_input,2020-04-06 18:21:52,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + C->B + A->C
}",true,,,,,
mthomp13,IsBipartite,49,eval_input,2020-04-06 18:22:13,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C
}",true,,,,,
mthomp13,IsBipartite,50,eval_input,2020-04-06 18:22:19,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + A->C
}",true,,,,,
mthomp13,IsBipartite,51,eval_input,2020-04-06 18:22:48,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + A->C + B->A
}",true,,,,,
mthomp13,IsBipartite,52,eval_input,2020-04-06 18:22:54,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + A->C + B->A + C->A
}",false,,,,,
mthomp13,IsBipartite,53,eval_input,2020-04-06 18:23:01,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + A->C + B->A + C->B
}",false,,,,,
mthomp13,IsBipartite,54,eval_input,2020-04-06 18:23:35,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + A->C + C->D + D->B
}",false,,,,,
mthomp13,IsBipartite,55,eval_input,2020-04-06 18:24:01,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = B->C + C->D + D->B
}",false,,,,,
mthomp13,IsBipartite,56,eval_input,2020-04-06 18:24:07,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = B->C + C->D + C->B
}",true,,,,,
mthomp13,IsBipartite,57,eval_input,2020-04-06 18:24:11,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = B->C + C->D + C->B + D->C
}",true,,,,,
mthomp13,IsBipartite,58,quiz_answer,2020-04-06 18:24:35,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mthomp13,IsBipartite,59,quiz_answer,2020-04-06 18:24:42,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mthomp13,IsBipartite,60,quiz_answer,2020-04-06 18:24:49,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mthomp13,IsBipartite,61,quiz_answer,2020-04-06 18:24:57,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
yli322,IsBipartite,57,eval_input,2020-04-06 18:25:00,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> A + C -> D + D -> C
}",false,,,,,
mthomp13,IsBipartite,62,quiz_answer,2020-04-06 18:25:01,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mthomp13,IsBipartite,63,quiz_answer,2020-04-06 18:25:05,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mthomp13,IsBipartite,64,quiz_answer,2020-04-06 18:25:12,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,true,false,,
mthomp13,IsBipartite,65,quiz_answer,2020-04-06 18:26:03,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
yliang6,IsBipartite,21,quiz_answer,2020-04-06 18:26:39,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mthomp13,IsBipartite,66,quiz_answer,2020-04-06 18:26:39,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mthomp13,IsBipartite,67,quiz_answer,2020-04-06 18:26:43,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
yliang6,IsBipartite,22,quiz_answer,2020-04-06 18:26:43,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
yliang6,IsBipartite,23,quiz_answer,2020-04-06 18:26:48,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,true,false,,
yliang6,IsBipartite,24,final_answer,2020-04-06 18:26:50,,,,,,contains no self-loops,
mthomp13,IsBipartite,68,quiz_answer,2020-04-06 18:26:52,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
yli322,IsBipartite,58,quiz_answer,2020-04-06 18:26:53,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mthomp13,IsBipartite,69,quiz_answer,2020-04-06 18:26:55,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
yli322,IsBipartite,59,quiz_answer,2020-04-06 18:26:58,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mthomp13,IsBipartite,70,quiz_answer,2020-04-06 18:26:59,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mthomp13,IsBipartite,71,quiz_answer,2020-04-06 18:27:02,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mthomp13,IsBipartite,72,quiz_answer,2020-04-06 18:27:05,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
yli322,IsBipartite,60,quiz_answer,2020-04-06 18:27:07,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mthomp13,IsBipartite,73,quiz_answer,2020-04-06 18:27:13,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",true,7,false,false,,
mthomp13,IsBipartite,74,final_answer,2020-04-06 18:27:22,,,,,,"true if directed graph (doesn't need to be acyclic, but no loops greater than one node apart? kind of confusing)",
yli322,IsBipartite,61,quiz_answer,2020-04-06 18:27:32,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
mthomp13,ThreeCycle,75,eval_input,2020-04-06 18:27:34,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = B->C + C->D + C->B + D->C
}",false,,,,,
mthomp13,ThreeCycle,76,eval_input,2020-04-06 18:27:43,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + C->B + D->C
}",false,,,,,
mthomp13,ThreeCycle,77,eval_input,2020-04-06 18:27:51,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D
}",false,,,,,
mthomp13,ThreeCycle,78,eval_input,2020-04-06 18:27:56,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->A
}",false,,,,,
mthomp13,ThreeCycle,79,eval_input,2020-04-06 18:28:00,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
mthomp13,ThreeCycle,80,eval_input,2020-04-06 18:28:05,"inst myInst {
  Node = A
  edges = none
}",false,,,,,
mthomp13,ThreeCycle,81,eval_input,2020-04-06 18:28:07,"inst myInst {
  Node = none
  edges = none
}",false,,,,,
yliang6,ThreeCycle,25,eval_input,2020-04-06 18:28:24,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A->A
}",false,,,,,
mthomp13,ThreeCycle,82,eval_input,2020-04-06 18:28:28,"inst myInst {
  Node = A + B
  edges = A->B + B->A + A->A + B->B
}",false,,,,,
mthomp13,ThreeCycle,83,eval_input,2020-04-06 18:28:31,"inst myInst {
  Node = A + B
  edges = A->B + B->A + A->A
}",false,,,,,
yliang6,ThreeCycle,26,eval_input,2020-04-06 18:28:34,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A->B + B->A
}",false,,,,,
mthomp13,ThreeCycle,84,eval_input,2020-04-06 18:28:34,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
mthomp13,ThreeCycle,85,eval_input,2020-04-06 18:28:37,"inst myInst {
  Node = A + B
  edges = B->A
}",false,,,,,
yliang6,ThreeCycle,27,eval_input,2020-04-06 18:28:41,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A->B
}",false,,,,,
yliang6,ThreeCycle,28,eval_input,2020-04-06 18:28:55,"inst myInst {
  Node = A
       + B
  edges = A->B
}",false,,,,,
mthomp13,ThreeCycle,86,eval_input,2020-04-06 18:28:58,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",true,,,,,
yliang6,ThreeCycle,29,eval_input,2020-04-06 18:29:00,"inst myInst {
  Node = A
       + B
  edges = A->B+B->A
}",false,,,,,
yli322,IsBipartite,62,quiz_answer,2020-04-06 18:29:01,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
yliang6,ThreeCycle,30,eval_input,2020-04-06 18:29:11,"inst myInst {
  Node = A
       + B
  edges = A->B
}",false,,,,,
yliang6,ThreeCycle,31,eval_input,2020-04-06 18:29:18,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B 
}",false,,,,,
yliang6,ThreeCycle,32,eval_input,2020-04-06 18:29:26,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B+B->A+A->C+C->A
}",false,,,,,
yli322,IsBipartite,63,quiz_answer,2020-04-06 18:29:32,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yli322,IsBipartite,64,quiz_answer,2020-04-06 18:29:37,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mthomp13,ThreeCycle,87,quiz_answer,2020-04-06 18:29:37,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mthomp13,ThreeCycle,88,quiz_answer,2020-04-06 18:29:40,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
mthomp13,ThreeCycle,89,quiz_answer,2020-04-06 18:29:42,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
yli322,IsBipartite,65,quiz_answer,2020-04-06 18:29:44,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mthomp13,ThreeCycle,90,quiz_answer,2020-04-06 18:29:46,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
mthomp13,ThreeCycle,91,quiz_answer,2020-04-06 18:29:49,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
mthomp13,ThreeCycle,92,quiz_answer,2020-04-06 18:29:53,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
yli322,IsBipartite,66,quiz_answer,2020-04-06 18:29:56,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
mthomp13,ThreeCycle,93,quiz_answer,2020-04-06 18:29:58,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mthomp13,ThreeCycle,94,quiz_answer,2020-04-06 18:30:01,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",true,7,false,false,,
yliang6,ThreeCycle,33,quiz_answer,2020-04-06 18:30:02,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yliang6,ThreeCycle,34,quiz_answer,2020-04-06 18:30:06,"inst myInst {
      Node = A
      edges = none
    }",true,1,false,false,,
mthomp13,ThreeCycle,95,final_answer,2020-04-06 18:30:14,,,,,,True if it can be divided into loops of odd size (the opposite of the previous predicate),
yliang6,ThreeCycle,35,quiz_answer,2020-04-06 18:30:21,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yliang6,ThreeCycle,36,quiz_answer,2020-04-06 18:30:24,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
yliang6,ThreeCycle,37,quiz_answer,2020-04-06 18:30:27,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
yliang6,ThreeCycle,38,quiz_answer,2020-04-06 18:30:33,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
yliang6,ThreeCycle,39,quiz_answer,2020-04-06 18:30:39,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,true,false,,
yliang6,ThreeCycle,40,eval_input,2020-04-06 18:31:22,"inst myInst {
  Node = A
       + B
       + C
  edges = A->C+C->B+B->A
}",true,,,,,
yli322,IsBipartite,67,quiz_answer,2020-04-06 18:31:38,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
yliang6,ThreeCycle,41,quiz_answer,2020-04-06 18:32:16,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yliang6,ThreeCycle,42,quiz_answer,2020-04-06 18:32:19,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
yliang6,ThreeCycle,43,quiz_answer,2020-04-06 18:32:24,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
yliang6,ThreeCycle,44,quiz_answer,2020-04-06 18:32:28,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
yliang6,ThreeCycle,45,quiz_answer,2020-04-06 18:32:31,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,true,false,,
yli322,IsBipartite,68,eval_input,2020-04-06 18:32:34,"inst myInst {
  Node = A
  edges = A -> A
}",false,,,,,
yliang6,ThreeCycle,46,quiz_answer,2020-04-06 18:32:43,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yliang6,ThreeCycle,47,quiz_answer,2020-04-06 18:32:46,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
yliang6,ThreeCycle,48,quiz_answer,2020-04-06 18:32:50,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
yliang6,ThreeCycle,49,quiz_answer,2020-04-06 18:32:53,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
yliang6,ThreeCycle,50,quiz_answer,2020-04-06 18:32:57,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
yliang6,ThreeCycle,51,quiz_answer,2020-04-06 18:33:02,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
yliang6,ThreeCycle,52,quiz_answer,2020-04-06 18:33:08,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,false,false,,
yliang6,ThreeCycle,53,quiz_answer,2020-04-06 18:33:44,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yliang6,ThreeCycle,54,quiz_answer,2020-04-06 18:33:50,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
yliang6,ThreeCycle,55,quiz_answer,2020-04-06 18:33:52,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
yli322,IsBipartite,69,eval_input,2020-04-06 18:33:53,"inst myInst {
  Node = A + B
  edges = A -> A + B -> B
}",false,,,,,
yliang6,ThreeCycle,56,quiz_answer,2020-04-06 18:33:56,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
yliang6,ThreeCycle,57,quiz_answer,2020-04-06 18:33:59,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
yli322,IsBipartite,70,eval_input,2020-04-06 18:34:00,"inst myInst {
  Node = A + B
  edges = A -> A + B -> B + A -> B
}",false,,,,,
yliang6,ThreeCycle,58,quiz_answer,2020-04-06 18:34:02,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
yliang6,ThreeCycle,59,quiz_answer,2020-04-06 18:34:05,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
yli322,IsBipartite,71,eval_input,2020-04-06 18:34:06,"inst myInst {
  Node = A + B
  edges = A -> B
}",true,,,,,
yliang6,ThreeCycle,60,quiz_answer,2020-04-06 18:34:16,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",true,7,false,false,,
yliang6,ThreeCycle,61,quiz_answer,2020-04-06 18:34:43,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yli322,IsBipartite,72,eval_input,2020-04-06 18:34:46,"inst myInst {
  Node = A + B + C
  edges = A -> B + A -> C
}",true,,,,,
yliang6,ThreeCycle,62,quiz_answer,2020-04-06 18:34:47,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
yliang6,ThreeCycle,63,quiz_answer,2020-04-06 18:34:49,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
yliang6,ThreeCycle,64,quiz_answer,2020-04-06 18:34:52,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
yliang6,ThreeCycle,65,quiz_answer,2020-04-06 18:34:54,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
yliang6,ThreeCycle,66,quiz_answer,2020-04-06 18:34:57,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
yli322,IsBipartite,73,eval_input,2020-04-06 18:34:58,"inst myInst {
  Node = A + B + C
  edges = A -> B + A -> C + B -> A
}",true,,,,,
yliang6,ThreeCycle,67,quiz_answer,2020-04-06 18:35:00,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
yliang6,ThreeCycle,68,quiz_answer,2020-04-06 18:35:02,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
yliang6,ThreeCycle,69,final_answer,2020-04-06 18:35:05,,,,,,cycle of 3 edges,
yliang6,IsDag,70,eval_input,2020-04-06 18:35:16,"inst myInst {
  Node = A
       + B
       + C
  edges = A->C+C->B+B->A
}",false,,,,,
yli322,IsBipartite,74,eval_input,2020-04-06 18:35:20,"inst myInst {
  Node = A + B + C
  edges = A -> B + A -> C + B -> A + A -> A
}",false,,,,,
yliang6,IsDag,71,eval_input,2020-04-06 18:35:22,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A
}",false,,,,,
yliang6,IsDag,72,eval_input,2020-04-06 18:35:26,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
yliang6,IsDag,73,eval_input,2020-04-06 18:35:37,"inst myInst {
  Node = A+B
  edges = A->B
}",true,,,,,
yliang6,IsDag,74,eval_input,2020-04-06 18:35:42,"inst myInst {
  Node = A+B+C
  edges = A->B
}",true,,,,,
yliang6,IsDag,75,quiz_answer,2020-04-06 18:35:52,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yliang6,IsDag,76,quiz_answer,2020-04-06 18:35:56,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
yliang6,IsDag,77,quiz_answer,2020-04-06 18:35:58,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
yli322,IsBipartite,75,quiz_answer,2020-04-06 18:36:11,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yli322,IsBipartite,76,quiz_answer,2020-04-06 18:36:16,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
yli322,IsBipartite,77,quiz_answer,2020-04-06 18:36:21,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
yliang6,IsDag,78,quiz_answer,2020-04-06 18:36:26,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
yli322,IsBipartite,78,quiz_answer,2020-04-06 18:36:37,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
yli322,IsBipartite,79,quiz_answer,2020-04-06 18:36:57,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yli322,IsBipartite,80,quiz_answer,2020-04-06 18:37:01,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
yliang6,IsDag,79,quiz_answer,2020-04-06 18:37:01,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yliang6,IsDag,80,quiz_answer,2020-04-06 18:37:04,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
yli322,IsBipartite,81,quiz_answer,2020-04-06 18:37:05,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
yliang6,IsDag,81,quiz_answer,2020-04-06 18:37:06,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
yliang6,IsDag,82,quiz_answer,2020-04-06 18:37:09,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
yliang6,IsDag,83,final_answer,2020-04-06 18:37:10,,,,,,# edges < # nodes,
yli322,IsBipartite,82,quiz_answer,2020-04-06 18:37:24,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
yli322,IsBipartite,83,quiz_answer,2020-04-06 18:37:34,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
yli322,IsBipartite,84,quiz_answer,2020-04-06 18:37:40,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
yli322,IsBipartite,85,quiz_answer,2020-04-06 18:37:45,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,true,false,,
yli322,IsBipartite,86,eval_input,2020-04-06 18:38:25,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> D + A -> A
}",false,,,,,
yli322,IsBipartite,87,eval_input,2020-04-06 18:38:34,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> D + D -> A
}",true,,,,,
yli322,IsBipartite,88,quiz_answer,2020-04-06 18:42:50,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yli322,IsBipartite,89,quiz_answer,2020-04-06 18:42:53,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
yli322,IsBipartite,90,quiz_answer,2020-04-06 18:43:21,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
yli322,IsBipartite,91,quiz_answer,2020-04-06 18:44:33,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
yli322,IsBipartite,92,eval_input,2020-04-06 18:47:27,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C
}",true,,,,,
yli322,IsBipartite,93,eval_input,2020-04-06 18:47:36,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + A -> C
}",true,,,,,
yli322,IsBipartite,94,eval_input,2020-04-06 18:48:34,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + C -> A
}",false,,,,,
yli322,IsBipartite,95,eval_input,2020-04-06 18:48:59,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> D + D -> A
}",true,,,,,
yli322,IsBipartite,96,eval_input,2020-04-06 18:57:30,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> D + D -> A
}",true,,,,,
yli322,IsBipartite,97,eval_input,2020-04-06 19:07:44,"inst myInst {
  Node = A + B + C + D
  edges = A -> A
}",false,,,,,
yli322,IsBipartite,98,eval_input,2020-04-06 19:07:49,"inst myInst {
  Node = A + B + C + D
  edges = A -> B
}",true,,,,,
yli322,IsBipartite,99,eval_input,2020-04-06 19:07:57,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C
}",true,,,,,
yli322,IsBipartite,100,eval_input,2020-04-06 19:08:09,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + A -> C
}",true,,,,,
yli322,IsBipartite,101,eval_input,2020-04-06 19:09:52,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> A
}",false,,,,,
yli322,IsBipartite,102,eval_input,2020-04-06 19:10:12,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> D + D -> A
}",true,,,,,
yli322,IsBipartite,103,eval_input,2020-04-06 19:10:25,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + C -> D + D -> E + E -> A
}",false,,,,,
yli322,IsBipartite,104,quiz_answer,2020-04-06 19:11:21,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yli322,IsBipartite,105,quiz_answer,2020-04-06 19:11:25,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
yli322,IsBipartite,106,quiz_answer,2020-04-06 19:11:29,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
yli322,IsBipartite,107,quiz_answer,2020-04-06 19:11:45,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
yli322,IsBipartite,108,quiz_answer,2020-04-06 19:11:52,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
yli322,IsBipartite,109,quiz_answer,2020-04-06 19:12:06,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
yli322,IsBipartite,110,quiz_answer,2020-04-06 19:12:16,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
yli322,IsBipartite,111,quiz_answer,2020-04-06 19:12:24,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
yli322,IsBipartite,112,final_answer,2020-04-06 19:12:26,,,,,,It tests graphs with cycles of even number nodes.,
yli322,ThreeCycle,113,eval_input,2020-04-06 19:13:10,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + C -> D + D -> E + E -> A
}",false,,,,,
yli322,ThreeCycle,114,eval_input,2020-04-06 19:13:25,"inst myInst {
  Node = A + B
  edges = A -> A
}",false,,,,,
yli322,ThreeCycle,115,eval_input,2020-04-06 19:13:29,"inst myInst {
  Node = A + B
  edges = A -> B
}",false,,,,,
yli322,ThreeCycle,116,eval_input,2020-04-06 19:13:37,"inst myInst {
  Node = A + B
  edges = A -> B + B -> A
}",false,,,,,
yli322,ThreeCycle,117,eval_input,2020-04-06 19:13:49,"inst myInst {
  Node = A + B
  edges = none
}",false,,,,,
yli322,ThreeCycle,118,eval_input,2020-04-06 19:14:07,"inst myInst {
  Node = A + B
  edges = A -> A + B -> B
}",false,,,,,
yli322,ThreeCycle,119,eval_input,2020-04-06 19:14:23,"inst myInst {
  Node = A + B
  edges = A -> A + B -> B + A -> B
}",false,,,,,
yli322,ThreeCycle,120,eval_input,2020-04-06 19:14:39,"inst myInst {
  Node = A + B + C
  edges = A -> A + B -> B + A -> B
}",false,,,,,
yli322,ThreeCycle,121,eval_input,2020-04-06 19:14:49,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C
}",false,,,,,
yli322,ThreeCycle,122,eval_input,2020-04-06 19:14:55,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + A -> C
}",false,,,,,
yli322,ThreeCycle,123,eval_input,2020-04-06 19:15:03,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + C -> A
}",true,,,,,
yli322,ThreeCycle,124,eval_input,2020-04-06 19:15:20,"inst myInst {
  Node = A + B
  edges = A -> B + B -> A
}",false,,,,,
yli322,ThreeCycle,125,eval_input,2020-04-06 19:15:43,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> D + D -> A
}",false,,,,,
yli322,ThreeCycle,126,eval_input,2020-04-06 19:15:58,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> D + D -> A + C -> A
}",true,,,,,
yli322,ThreeCycle,127,quiz_answer,2020-04-06 19:16:42,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yli322,ThreeCycle,128,quiz_answer,2020-04-06 19:16:47,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
yli322,ThreeCycle,129,quiz_answer,2020-04-06 19:16:51,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
yli322,ThreeCycle,130,quiz_answer,2020-04-06 19:17:06,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
yli322,ThreeCycle,131,quiz_answer,2020-04-06 19:17:11,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
yli322,ThreeCycle,132,quiz_answer,2020-04-06 19:17:17,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
yli322,ThreeCycle,133,quiz_answer,2020-04-06 19:17:21,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
yli322,ThreeCycle,134,quiz_answer,2020-04-06 19:17:32,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
yli322,ThreeCycle,135,final_answer,2020-04-06 19:17:33,,,,,,It is to test if a graph has a triangle.,
jnieto,IsDag,0,eval_input,2020-04-06 22:49:31,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
jnieto,IsDag,1,eval_input,2020-04-06 22:49:49,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
jnieto,IsDag,2,eval_input,2020-04-06 22:49:54,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
jnieto,IsDag,4,eval_input,2020-04-06 22:50:01,"inst myInst {
  Node = A + B
  edges = none
}",true,,,,,
jnieto,IsDag,3,eval_input,2020-04-06 22:50:01,"inst myInst {
  Node = A + B
  edges = none
}",true,,,,,
jnieto,IsDag,5,eval_input,2020-04-06 22:50:06,"inst myInst {
  Node = A + B
  edges = A->A
}",false,,,,,
jnieto,IsDag,6,eval_input,2020-04-06 22:50:10,"inst myInst {
  Node = A + B
  edges = A->B
}",true,,,,,
jnieto,IsDag,7,eval_input,2020-04-06 22:50:13,"inst myInst {
  Node = A + B
  edges = B->B
}",false,,,,,
jnieto,IsDag,8,eval_input,2020-04-06 22:50:28,"inst myInst {
  Node = A + B
  edges = B->B
}",false,,,,,
jnieto,IsDag,9,eval_input,2020-04-06 22:50:33,"inst myInst {
  Node = A + B + C
  edges = B->C 
}",true,,,,,
jnieto,IsDag,10,eval_input,2020-04-06 22:50:37,"inst myInst {
  Node = A + B + C
  edges = C->C 
}",false,,,,,
jnieto,IsDag,11,eval_input,2020-04-06 22:50:41,"inst myInst {
  Node = A + B + C
  edges = A->C 
}",true,,,,,
jnieto,IsDag,12,quiz_answer,2020-04-06 22:52:26,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
jnieto,IsDag,13,quiz_answer,2020-04-06 22:52:30,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
jnieto,IsDag,14,quiz_answer,2020-04-06 22:52:38,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,false,false,,
jnieto,IsDag,15,eval_input,2020-04-06 22:52:52,"inst myInst {
  Node = A + B + C
  edges = A->C + A->B
}",true,,,,,
jnieto,IsDag,16,eval_input,2020-04-06 22:53:00,"inst myInst {
  Node = A + B + C
  edges = A->C + A->A
}",false,,,,,
jnieto,IsDag,17,eval_input,2020-04-06 22:53:04,"inst myInst {
  Node = A + B + C
  edges = A->C + B->A
}",true,,,,,
jnieto,IsDag,18,quiz_answer,2020-04-06 22:53:26,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
jnieto,IsDag,19,quiz_answer,2020-04-06 22:53:32,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
jnieto,IsDag,20,quiz_answer,2020-04-06 22:53:39,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,false,false,,
jnieto,IsDag,21,eval_input,2020-04-06 22:53:54,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",false,,,,,
jnieto,IsDag,22,eval_input,2020-04-06 22:53:59,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
jnieto,IsDag,23,eval_input,2020-04-06 22:54:11,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->B
}",false,,,,,
jnieto,IsDag,24,eval_input,2020-04-06 22:54:17,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D
}",true,,,,,
jnieto,IsDag,25,eval_input,2020-04-06 22:54:37,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + B->A
}",false,,,,,
jnieto,IsDag,26,eval_input,2020-04-06 22:59:36,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A 
}",false,,,,,
jnieto,IsDag,27,quiz_answer,2020-04-06 23:00:20,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
jnieto,IsDag,28,quiz_answer,2020-04-06 23:00:28,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
jnieto,IsDag,29,quiz_answer,2020-04-06 23:00:37,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
jnieto,IsDag,30,quiz_answer,2020-04-06 23:00:49,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
jnieto,IsDag,31,quiz_answer,2020-04-06 23:00:54,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
jnieto,IsDag,32,quiz_answer,2020-04-06 23:01:00,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
jnieto,IsDag,33,quiz_answer,2020-04-06 23:01:08,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
jnieto,IsDag,34,quiz_answer,2020-04-06 23:01:17,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
jnieto,IsDag,35,final_answer,2020-04-06 23:01:18,,,,,,"pred acyclic {

no iden & ^edges


}",
jnieto,IsBipartite,36,eval_input,2020-04-06 23:01:44,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A 
}",false,,,,,
jnieto,IsBipartite,37,eval_input,2020-04-06 23:01:51,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->C 
}",false,,,,,
jnieto,IsBipartite,38,eval_input,2020-04-06 23:01:56,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C  
}",true,,,,,
jnieto,IsBipartite,39,eval_input,2020-04-06 23:02:08,"inst myInst {
  Node = A + B + C + D
  edges = none
}",true,,,,,
jnieto,IsBipartite,40,eval_input,2020-04-06 23:02:14,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
jnieto,IsBipartite,41,eval_input,2020-04-06 23:02:32,"inst myInst {
  Node = A + B + C + D
  edges = A->B
}",true,,,,,
jnieto,IsBipartite,42,eval_input,2020-04-06 23:02:42,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->D
}",true,,,,,
jnieto,IsBipartite,43,eval_input,2020-04-06 23:02:48,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->D + B->D
}",true,,,,,
jnieto,IsBipartite,44,eval_input,2020-04-06 23:03:00,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->D + B->D + D->A
}",false,,,,,
jnieto,IsBipartite,45,eval_input,2020-04-06 23:03:08,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->D + B->D + D->B
}",true,,,,,
jnieto,IsBipartite,46,eval_input,2020-04-06 23:03:17,"inst myInst {
  Node = A + B + C + D
  edges =  B->D + D->B
}",true,,,,,
jnieto,IsBipartite,47,eval_input,2020-04-06 23:03:34,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->D + B->D + D->B + B->A
}",true,,,,,
jnieto,IsBipartite,48,eval_input,2020-04-06 23:04:08,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->D + B->D + D->B + B->A + C->A
}",true,,,,,
jnieto,IsBipartite,49,eval_input,2020-04-06 23:04:21,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->D + B->D + D->B + B->A + C->A + A->C
}",true,,,,,
jnieto,IsBipartite,50,eval_input,2020-04-06 23:04:42,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->D + B->D + D->B + B->A + C->A + A->C + D->C
}",true,,,,,
jnieto,IsBipartite,51,eval_input,2020-04-06 23:05:33,"inst myInst {
  Node = A + B + C + D 
  edges = A->B + A->C + A->D + C->D + B->D + D->B + B->A + C->A + D->C
}",false,,,,,
jnieto,IsBipartite,52,eval_input,2020-04-06 23:05:43,"inst myInst {
  Node = A + B + C + D 
  edges = A->B + A->C + A->D + C->D + B->D + D->B + B->A + C->A + D->C
}",false,,,,,
jnieto,IsBipartite,53,eval_input,2020-04-06 23:05:47,"inst myInst {
  Node = A + B + C + D 
  edges = A->B + A->C + C->D + B->D + D->B + B->A + C->A + D->C
}",true,,,,,
jnieto,IsBipartite,54,eval_input,2020-04-06 23:06:04,"inst myInst {
  Node = A + B + C + D 
  edges = A->B + A->C + C->D + B->D + D->B + B->A + C->A + D->C + C->B
}",false,,,,,
jnieto,IsBipartite,55,eval_input,2020-04-06 23:06:15,"inst myInst {
  Node = A + B + C + D 
  edges = A->B + A->A
}",false,,,,,
jnieto,IsBipartite,56,eval_input,2020-04-06 23:06:19,"inst myInst {
  Node = A + B + C + D 
  edges = A->A
}",false,,,,,
jnieto,IsBipartite,57,eval_input,2020-04-06 23:06:41,"inst myInst {
  Node = A + B + C + D 
  edges = A->B + A->C + A->D
}",true,,,,,
jnieto,IsBipartite,58,eval_input,2020-04-06 23:06:55,"inst myInst {
  Node = A + B + C + D 
  edges = A->B + A->C + A->D + C->A
}",true,,,,,
jnieto,IsBipartite,59,eval_input,2020-04-06 23:07:10,"inst myInst {
  Node = A + B + C + D 
  edges = A->B + B->C
}",true,,,,,
jnieto,IsBipartite,60,eval_input,2020-04-06 23:07:15,"inst myInst {
  Node = A + B + C + D 
  edges = A->B + B->C + C->D
}",true,,,,,
jnieto,IsBipartite,61,eval_input,2020-04-06 23:07:21,"inst myInst {
  Node = A + B + C + D 
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
jnieto,IsBipartite,62,quiz_answer,2020-04-06 23:07:58,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
jnieto,IsBipartite,63,quiz_answer,2020-04-06 23:08:01,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
jnieto,IsBipartite,64,quiz_answer,2020-04-06 23:08:09,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
jnieto,IsBipartite,65,quiz_answer,2020-04-06 23:08:18,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
jnieto,IsBipartite,66,quiz_answer,2020-04-06 23:08:34,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,false,false,,
jnieto,IsBipartite,67,final_answer,2020-04-06 23:08:37,,,,,,Not sure,
jnieto,ThreeCycle,68,eval_input,2020-04-06 23:09:12,"inst myInst {
  Node = A + B + C + D 
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
jnieto,ThreeCycle,69,eval_input,2020-04-06 23:09:26,"inst myInst {
  Node = A + B + C + D 
  edges = A->B + B->C + C->A + D->A
}",true,,,,,
jnieto,ThreeCycle,70,eval_input,2020-04-06 23:09:37,"inst myInst {
  Node = A + B + C + D 
  edges = A->B + A->A
}",false,,,,,
jnieto,ThreeCycle,71,eval_input,2020-04-06 23:09:46,"inst myInst {
  Node = A + B + C + D 
  edges = A->B + B->A
}",false,,,,,
jnieto,ThreeCycle,72,eval_input,2020-04-06 23:10:02,"inst myInst {
  Node = A + B + C + D 
  edges = A->B + B->C
}",false,,,,,
jnieto,ThreeCycle,73,eval_input,2020-04-06 23:10:12,"inst myInst {
  Node = A + B + C + D 
  edges = A->B + D->C
}",false,,,,,
jnieto,ThreeCycle,74,eval_input,2020-04-06 23:10:27,"inst myInst {
  Node = A + B + C + D 
  edges = A->B + D->C + B->D
}",false,,,,,
jnieto,ThreeCycle,75,eval_input,2020-04-06 23:10:35,"inst myInst {
  Node = A + B + C + D 
  edges = none
}",false,,,,,
jnieto,ThreeCycle,76,eval_input,2020-04-06 23:10:39,"inst myInst {
  Node = none
  edges = none
}",false,,,,,
jnieto,ThreeCycle,77,eval_input,2020-04-06 23:11:15,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A + D->A
}",true,,,,,
jnieto,ThreeCycle,78,eval_input,2020-04-06 23:13:59,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A + D->A
}",true,,,,,
jnieto,ThreeCycle,79,eval_input,2020-04-06 23:14:23,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
jnieto,ThreeCycle,80,eval_input,2020-04-06 23:14:27,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->B + D->A
}",false,,,,,
jnieto,ThreeCycle,81,eval_input,2020-04-06 23:14:37,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->A + C->A + D->A
}",false,,,,,
jnieto,ThreeCycle,82,eval_input,2020-04-06 23:14:42,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A + D->A
}",true,,,,,
jnieto,ThreeCycle,83,eval_input,2020-04-06 23:14:56,"inst myInst {
  Node = A + B + C 
  edges = A->B + B->C + C->A 
}",true,,,,,
jnieto,ThreeCycle,84,eval_input,2020-04-06 23:15:08,"inst myInst {
  Node = A + B + C 
  edges = A->B + B->C + C->A + C->B
}",true,,,,,
jnieto,ThreeCycle,85,eval_input,2020-04-06 23:15:17,"inst myInst {
  Node = A + B + C 
  edges = A->B + B->C + C->A + C->B + C->C
}",true,,,,,
jnieto,ThreeCycle,86,eval_input,2020-04-06 23:15:38,"inst myInst {
  Node = A + B + C 
  edges = A->B + B->C + C->A + C->B + C->C
}",true,,,,,
jnieto,ThreeCycle,87,eval_input,2020-04-06 23:15:45,"inst myInst {
  Node = A + B + C 
  edges = A->B + B->C + C->A + C->B + C->C + A->A
}",true,,,,,
jnieto,ThreeCycle,88,eval_input,2020-04-06 23:15:58,"inst myInst {
  Node = A + B + C 
  edges = A->B + B->C + C->A + C->B + C->C + A->A + A->C
}",true,,,,,
jnieto,ThreeCycle,89,eval_input,2020-04-06 23:16:12,"inst myInst {
  Node = A + B + C 
  edges = A->B + B->C + B->A + C->A + C->B + C->C + A->A + A->C
}",true,,,,,
jnieto,ThreeCycle,90,eval_input,2020-04-06 23:16:16,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + B->A + C->A + C->B + C->C + A->A + A->C
}",true,,,,,
jnieto,ThreeCycle,91,eval_input,2020-04-06 23:16:23,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + B->A + C->A + C->B + C->C + A->A + A->C
}",true,,,,,
jnieto,ThreeCycle,92,eval_input,2020-04-06 23:16:29,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + D->A + B->A + C->A + C->B + C->C + A->A + A->C
}",true,,,,,
jnieto,ThreeCycle,93,eval_input,2020-04-06 23:16:34,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + D->B + B->A + C->A + C->B + C->C + A->A + A->C
}",true,,,,,
jnieto,ThreeCycle,94,eval_input,2020-04-06 23:20:49,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
jnieto,ThreeCycle,95,eval_input,2020-04-06 23:21:06,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A  + A->A
}",false,,,,,
jnieto,ThreeCycle,96,quiz_answer,2020-04-06 23:21:45,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
jnieto,ThreeCycle,97,quiz_answer,2020-04-06 23:21:50,"inst myInst {
      Node = A
      edges = none
    }",true,1,false,false,,
jnieto,ThreeCycle,98,eval_input,2020-04-06 23:21:55,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A  + A->A
}",false,,,,,
jnieto,ThreeCycle,99,quiz_answer,2020-04-06 23:22:25,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
jnieto,ThreeCycle,100,quiz_answer,2020-04-06 23:22:28,"inst myInst {
      Node = A
      edges = none
    }",true,1,false,false,,
jnieto,ThreeCycle,101,quiz_answer,2020-04-06 23:22:53,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
jnieto,ThreeCycle,102,quiz_answer,2020-04-06 23:22:57,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
jnieto,ThreeCycle,103,quiz_answer,2020-04-06 23:23:00,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,false,false,,
jnieto,ThreeCycle,104,final_answer,2020-04-06 23:23:03,,,,,,"I'm genuinely unsure, this one is very tough!",
drozenb1,ThreeCycle,0,eval_input,2020-04-07 10:41:46,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
drozenb1,ThreeCycle,1,eval_input,2020-04-07 10:42:45,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> B
}",false,,,,,
drozenb1,ThreeCycle,2,eval_input,2020-04-07 10:43:19,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> B
}",false,,,,,
drozenb1,ThreeCycle,3,eval_input,2020-04-07 10:43:19,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> B
}",false,,,,,
drozenb1,ThreeCycle,4,eval_input,2020-04-07 10:43:24,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> B
}",false,,,,,
drozenb1,ThreeCycle,5,eval_input,2020-04-07 10:43:30,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> B + B -> A
}",false,,,,,
drozenb1,ThreeCycle,6,eval_input,2020-04-07 10:43:42,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> B + B -> C
}",false,,,,,
drozenb1,ThreeCycle,7,eval_input,2020-04-07 10:43:48,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> B + B -> C + C -> A
}",true,,,,,
drozenb1,ThreeCycle,8,eval_input,2020-04-07 10:44:11,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> B + B -> C + A -> C
}",false,,,,,
drozenb1,ThreeCycle,9,eval_input,2020-04-07 10:45:02,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B 
        + B -> C 
        + C -> A
}",true,,,,,
drozenb1,ThreeCycle,10,eval_input,2020-04-07 10:46:04,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B 
        + B -> C 
        + C -> D
        + D -> A
}",false,,,,,
drozenb1,ThreeCycle,11,eval_input,2020-04-07 10:46:42,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B 
        + B -> C 
        + C -> D
        + D -> A
}",false,,,,,
drozenb1,ThreeCycle,12,eval_input,2020-04-07 10:46:48,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> B 
        + B -> C 
        + C -> D
        + D -> A
}",false,,,,,
drozenb1,ThreeCycle,13,eval_input,2020-04-07 10:46:59,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> B 
        + B -> C 
        + C -> D
        + D -> E 
        + E -> A
}",false,,,,,
drozenb1,ThreeCycle,14,eval_input,2020-04-07 10:47:19,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> B 
        + B -> C 
        + C -> A
}",true,,,,,
drozenb1,ThreeCycle,15,eval_input,2020-04-07 10:47:32,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> B 
        + B -> A
}",false,,,,,
drozenb1,ThreeCycle,16,eval_input,2020-04-07 10:47:41,"inst myInst {
  Node = A
       + B
       
  edges = A -> B 
        + B -> A
}",false,,,,,
drozenb1,ThreeCycle,17,eval_input,2020-04-07 10:50:00,"inst myInst {
  Node = A
       
  edges = A -> A
}",false,,,,,
drozenb1,ThreeCycle,18,eval_input,2020-04-07 10:50:18,"inst myInst {
  Node = A + B + C
       
  edges = A -> B
}",false,,,,,
drozenb1,ThreeCycle,19,eval_input,2020-04-07 10:50:19,"inst myInst {
  Node = A + B + C
       
  edges = A -> B
}",false,,,,,
drozenb1,ThreeCycle,20,eval_input,2020-04-07 10:50:20,"inst myInst {
  Node = A + B + C
       
  edges = A -> B
}",false,,,,,
drozenb1,ThreeCycle,21,eval_input,2020-04-07 10:51:04,"inst myInst {
  Node = A + B + C
       
  edges = A -> B
          + B -> C 
          + C -> A
}",true,,,,,
drozenb1,ThreeCycle,22,eval_input,2020-04-07 10:51:26,"inst myInst {
  Node = none
       
  edges = none
}",false,,,,,
drozenb1,ThreeCycle,23,quiz_answer,2020-04-07 10:51:41,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
drozenb1,ThreeCycle,24,quiz_answer,2020-04-07 10:51:51,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
drozenb1,ThreeCycle,25,quiz_answer,2020-04-07 10:51:55,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
drozenb1,ThreeCycle,26,quiz_answer,2020-04-07 10:52:03,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
drozenb1,ThreeCycle,27,quiz_answer,2020-04-07 10:52:22,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
drozenb1,ThreeCycle,28,quiz_answer,2020-04-07 10:52:31,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
drozenb1,ThreeCycle,29,quiz_answer,2020-04-07 10:52:38,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
drozenb1,ThreeCycle,30,quiz_answer,2020-04-07 10:52:43,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
drozenb1,ThreeCycle,31,final_answer,2020-04-07 10:52:45,,,,,,The graph must contain a cycle with 3 nodes,
drozenb1,IsBipartite,32,eval_input,2020-04-07 10:52:57,"inst myInst {
  Node = none
       
  edges = none
}",true,,,,,
mcisler,IsDag,0,eval_input,2020-04-07 10:53:18,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
mcisler,IsDag,1,eval_input,2020-04-07 10:53:32,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
drozenb1,IsBipartite,33,eval_input,2020-04-07 10:53:38,"inst myInst {
  Node = A
       
  edges = none
}",true,,,,,
mcisler,IsDag,2,eval_input,2020-04-07 10:53:45,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}
inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
drozenb1,IsBipartite,34,eval_input,2020-04-07 10:53:49,"inst myInst {
  Node = A
       
  edges = A -> A
}",false,,,,,
drozenb1,IsBipartite,35,eval_input,2020-04-07 10:54:03,"inst myInst {
  Node = A + B
       
  edges = A -> B
}",true,,,,,
drozenb1,IsBipartite,36,eval_input,2020-04-07 10:54:17,"inst myInst {
  Node = A + B
       
  edges = A -> B
}",true,,,,,
drozenb1,IsBipartite,37,eval_input,2020-04-07 10:54:22,"inst myInst {
  Node = A + B
       
  edges = A -> B + B -> A
}",true,,,,,
mcisler,IsDag,3,eval_input,2020-04-07 10:54:35,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A
}",false,,,,,
drozenb1,IsBipartite,38,eval_input,2020-04-07 10:54:42,"inst myInst {
  Node = A + B + C
       
  edges = A -> B + B -> A
}",true,,,,,
drozenb1,IsBipartite,39,eval_input,2020-04-07 10:54:47,"inst myInst {
  Node = A + B + C
       
  edges = A -> B + B -> A + A -> C
}",true,,,,,
drozenb1,IsBipartite,40,eval_input,2020-04-07 10:55:18,"inst myInst {
  Node = A + B + C
       
  edges = A -> B + B -> A + A -> C + B -> B
}",false,,,,,
mcisler,IsDag,4,eval_input,2020-04-07 10:55:39,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
}",true,,,,,
drozenb1,IsBipartite,41,quiz_answer,2020-04-07 10:55:49,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
drozenb1,IsBipartite,42,quiz_answer,2020-04-07 10:55:53,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
drozenb1,IsBipartite,43,quiz_answer,2020-04-07 10:55:57,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
drozenb1,IsBipartite,44,quiz_answer,2020-04-07 10:56:00,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
drozenb1,IsBipartite,45,quiz_answer,2020-04-07 10:56:03,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,false,false,,
drozenb1,IsBipartite,46,eval_input,2020-04-07 10:56:44,"inst myInst {
  Node = A + B + C
       
  edges = A -> B + B -> C + C -> A
}",false,,,,,
drozenb1,IsBipartite,47,eval_input,2020-04-07 10:57:19,"inst myInst {
  Node = A + B + C
       
  edges = A -> B + B -> C + C -> A
}",false,,,,,
drozenb1,IsBipartite,48,eval_input,2020-04-07 10:57:28,"inst myInst {
  Node = A + B + C + D
       
  edges = A -> B + B -> C + C -> D + D -> A
}",true,,,,,
drozenb1,IsBipartite,49,quiz_answer,2020-04-07 10:58:14,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
drozenb1,IsBipartite,50,quiz_answer,2020-04-07 10:58:19,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
drozenb1,IsBipartite,51,quiz_answer,2020-04-07 10:58:24,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
drozenb1,IsBipartite,52,quiz_answer,2020-04-07 10:58:48,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
drozenb1,IsBipartite,53,quiz_answer,2020-04-07 10:58:54,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
drozenb1,IsBipartite,54,quiz_answer,2020-04-07 10:59:01,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
drozenb1,IsBipartite,55,quiz_answer,2020-04-07 10:59:14,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
drozenb1,IsBipartite,56,quiz_answer,2020-04-07 10:59:26,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
drozenb1,IsBipartite,57,final_answer,2020-04-07 10:59:28,,,,,,There can't be odd numbered cycles,
drozenb1,IsDag,58,eval_input,2020-04-07 11:00:36,"inst myInst {
  Node = A + B + C + D
       
  edges = A -> B + B -> C + C -> D + D -> A
}",false,,,,,
drozenb1,IsDag,59,eval_input,2020-04-07 11:00:57,"inst myInst {
  Node = A + B + C + D
       
  edges = A -> B + B -> C + C -> D
}",true,,,,,
drozenb1,IsDag,60,eval_input,2020-04-07 11:01:36,"inst myInst {
  Node =none
       
  edges =  none
}",true,,,,,
drozenb1,IsDag,61,eval_input,2020-04-07 11:01:46,"inst myInst {
  Node = A
       
  edges =  none
}",true,,,,,
drozenb1,IsDag,62,eval_input,2020-04-07 11:02:05,"inst myInst {
  Node = A
       
  edges =  A -> A
}",false,,,,,
drozenb1,IsDag,63,eval_input,2020-04-07 11:02:25,"inst myInst {
  Node = A + B
       
  edges =  A -> A
}",false,,,,,
drozenb1,IsDag,64,eval_input,2020-04-07 11:02:51,"inst myInst {
  Node = A + B
       
  edges =  A -> A
}",false,,,,,
drozenb1,IsDag,65,eval_input,2020-04-07 11:02:54,"inst myInst {
  Node = A + B + C
       
  edges =  A -> A
}",false,,,,,
drozenb1,IsDag,66,eval_input,2020-04-07 11:02:57,"inst myInst {
  Node = A + B + C
       
  edges =  A -> B
}",true,,,,,
drozenb1,IsDag,67,eval_input,2020-04-07 11:02:59,"inst myInst {
  Node = A + B + C
       
  edges =  A -> B
}",true,,,,,
drozenb1,IsDag,68,eval_input,2020-04-07 11:03:04,"inst myInst {
  Node = A + B + C
       
  edges =  A -> B + B -> C
}",true,,,,,
drozenb1,IsDag,69,eval_input,2020-04-07 11:03:15,"inst myInst {
  Node = A + B + C
       
  edges =  A -> B + B -> C + C -> A
}",false,,,,,
drozenb1,IsDag,70,eval_input,2020-04-07 11:03:24,"inst myInst {
  Node = A + B + C
       
  edges =  A -> B + B -> A + B -> C
}",false,,,,,
drozenb1,IsDag,71,quiz_answer,2020-04-07 11:03:31,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
drozenb1,IsDag,72,quiz_answer,2020-04-07 11:03:35,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
drozenb1,IsDag,73,quiz_answer,2020-04-07 11:03:38,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
drozenb1,IsDag,74,quiz_answer,2020-04-07 11:03:44,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
drozenb1,IsDag,75,quiz_answer,2020-04-07 11:03:48,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
drozenb1,IsDag,76,quiz_answer,2020-04-07 11:03:53,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
drozenb1,IsDag,77,quiz_answer,2020-04-07 11:03:57,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
drozenb1,IsDag,78,quiz_answer,2020-04-07 11:04:03,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
drozenb1,IsDag,79,final_answer,2020-04-07 11:04:04,,,,,,No cycles,
mcisler,IsDag,5,eval_input,2020-04-07 11:04:50,"inst myInst {
  Node = A
       + B
       + C
  
  edges = A->B + B->C
}",true,,,,,
mcisler,IsDag,6,eval_input,2020-04-07 11:04:57,"inst myInst {
  Node = A
       + B
       + C
  
  edges = A->B + B->C + C->A
}",false,,,,,
mcisler,IsDag,7,eval_input,2020-04-07 11:05:31,"inst myInst {
  Node = A
       + B
       + C
       + D
  
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
mcisler,IsDag,8,eval_input,2020-04-07 11:05:35,"inst myInst {
  Node = A
       + B
       + C
       + D
  
  edges = A->B + B->C + C->D
}",true,,,,,
mcisler,IsDag,9,eval_input,2020-04-07 11:05:53,"inst myInst {
  Node = A
       + B
       + C
       + D
  
  edges = A->B + B->C + A->C
}",true,,,,,
mcisler,IsDag,10,eval_input,2020-04-07 11:06:03,"inst myInst {
  Node = A
       + B
       + C
       + D
  
  edges = A->B + B->C + A->C + A->D
}",true,,,,,
mcisler,IsDag,11,eval_input,2020-04-07 11:06:33,"inst myInst {
  Node = A
       + B
       + C
       + D
  
  edges = A->B + A->C + A->D
}",true,,,,,
mcisler,IsDag,12,eval_input,2020-04-07 11:07:03,"inst myInst {
  Node = A
       + B
       + C
       + D
  
  edges = A->B + C->D
}",true,,,,,
mcisler,IsDag,13,eval_input,2020-04-07 11:07:21,"inst myInst {
  Node = A
       + B
       + C
       + D
  
  edges = A->B + C->D + D->D
}",false,,,,,
mcisler,IsDag,14,eval_input,2020-04-07 11:08:25,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  
  edges = A->B + B->C + B->D + D->E
}",true,,,,,
mcisler,IsDag,15,quiz_answer,2020-04-07 11:09:24,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mcisler,IsDag,16,quiz_answer,2020-04-07 11:09:28,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mcisler,IsDag,17,quiz_answer,2020-04-07 11:09:37,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mcisler,IsDag,18,quiz_answer,2020-04-07 11:09:57,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mcisler,IsDag,19,quiz_answer,2020-04-07 11:10:05,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mcisler,IsDag,20,quiz_answer,2020-04-07 11:10:12,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mcisler,IsDag,21,quiz_answer,2020-04-07 11:10:26,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mcisler,IsDag,22,quiz_answer,2020-04-07 11:10:35,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mcisler,IsDag,23,final_answer,2020-04-07 11:10:37,,,,,,directed acyclic,
mcisler,ThreeCycle,24,eval_input,2020-04-07 11:10:57,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  
  edges = A->B + B->C + B->D + D->E
}",false,,,,,
mcisler,ThreeCycle,25,eval_input,2020-04-07 11:11:36,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  
  edges = A->B + B->C + C->D + D->E
}",false,,,,,
mcisler,ThreeCycle,26,eval_input,2020-04-07 11:12:01,"inst myInst {
  Node = A
       + B
       + C
  
  edges = A->B + B->C + C->A
}",true,,,,,
mcisler,ThreeCycle,27,eval_input,2020-04-07 11:12:15,"inst myInst {
  Node = A
       + B
       + C
  
  edges = A->A
}",false,,,,,
mcisler,ThreeCycle,28,eval_input,2020-04-07 11:12:20,"inst myInst {
  Node = A
       + B
       + C
  
  edges = A->A + B->B
}",false,,,,,
mcisler,ThreeCycle,29,eval_input,2020-04-07 11:12:24,"inst myInst {
  Node = A
       + B
       + C
  
  edges = A->A + B->B + C->C
}",false,,,,,
mcisler,ThreeCycle,30,eval_input,2020-04-07 11:12:41,"inst myInst {
  Node = A
       + B
       + C
  
  edges = A->B + A->C + B->C
}",false,,,,,
mcisler,ThreeCycle,31,eval_input,2020-04-07 11:12:52,"inst myInst {
  Node = A
       + B
       + C
  
  edges = A->B + B->A + A->C + B->C
}",false,,,,,
mcisler,ThreeCycle,32,eval_input,2020-04-07 11:13:04,"inst myInst {
  Node = A
       + B
       + C
  
  edges = A->B + B->A + A->C + C->A + B->C
}",true,,,,,
mcisler,ThreeCycle,33,eval_input,2020-04-07 11:13:45,"inst myInst {
  Node = A
       + B
       + C
  
  edges = A->B + B->C + C->A
}",true,,,,,
mcisler,ThreeCycle,34,eval_input,2020-04-07 11:13:56,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  
  edges = A->B + B->C + C->A + D->E + E->D
}",true,,,,,
mcisler,ThreeCycle,35,eval_input,2020-04-07 11:14:08,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  
  edges = A->B + B->C + C->A + D->E + E->D + A->D
}",true,,,,,
mcisler,ThreeCycle,36,eval_input,2020-04-07 11:15:13,"inst myInst {
  Node = A
       + B
       + C
       + D
  
  edges = A->B + B->A + C->D + D->C
}",false,,,,,
mcisler,ThreeCycle,37,eval_input,2020-04-07 11:15:31,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  
  edges = A->B + B->A + C->D + D->C + D->E
}",false,,,,,
mcisler,ThreeCycle,38,eval_input,2020-04-07 11:15:36,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  
  edges = A->B + B->A + C->D + D->C + D->E + E->D
}",false,,,,,
mcisler,ThreeCycle,39,eval_input,2020-04-07 11:15:55,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  
  edges = A->B + B->C + C->A
}",true,,,,,
mcisler,ThreeCycle,40,eval_input,2020-04-07 11:16:36,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  
  edges = A->B + B->A
}",false,,,,,
mcisler,ThreeCycle,41,eval_input,2020-04-07 11:16:58,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
mcisler,ThreeCycle,42,eval_input,2020-04-07 11:17:12,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
mcisler,ThreeCycle,43,eval_input,2020-04-07 11:17:41,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  
  edges = A->B + B->C + C->A + D->E + E->A
}",true,,,,,
mcisler,ThreeCycle,44,eval_input,2020-04-07 11:17:48,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  
  edges = A->B + B->C + C->A + D->D
}",true,,,,,
mcisler,ThreeCycle,45,eval_input,2020-04-07 11:17:54,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  
  edges = A->B + B->C + C->A + D->D + E->E
}",true,,,,,
mcisler,ThreeCycle,46,eval_input,2020-04-07 11:17:58,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  
  edges = A->B + B->C + C->A + D->D + E->A
}",true,,,,,
mcisler,ThreeCycle,47,eval_input,2020-04-07 11:18:03,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  
  edges = A->B + B->C + C->A + D->D + A->E
}",true,,,,,
mcisler,ThreeCycle,48,eval_input,2020-04-07 11:18:14,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  
  edges = A->B + B->C + C->A + D->D + A->E + E->B
}",true,,,,,
mcisler,ThreeCycle,49,eval_input,2020-04-07 11:18:22,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  
  edges = A->B + B->C + C->A + D->D + A->E + E->A
}",true,,,,,
mcisler,ThreeCycle,50,eval_input,2020-04-07 11:18:52,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  
  edges = A->B + B->C + C->A + A->C
}",true,,,,,
mcisler,ThreeCycle,51,eval_input,2020-04-07 11:19:12,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  
  edges = A->B + B->C + C->A + A->C + B->A
}",true,,,,,
mcisler,ThreeCycle,52,eval_input,2020-04-07 11:19:35,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->C + C->A
}",true,,,,,
mcisler,ThreeCycle,53,eval_input,2020-04-07 11:19:43,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  
  edges = A->B + B->C + C->A
}",true,,,,,
mcisler,ThreeCycle,54,eval_input,2020-04-07 11:20:13,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->C + C->A + D->E + E->F + F->D
}",true,,,,,
mcisler,ThreeCycle,55,eval_input,2020-04-07 11:20:19,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->C + C->B + D->E + E->F + F->D
}",true,,,,,
mcisler,ThreeCycle,56,eval_input,2020-04-07 11:20:26,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->C + D->E + E->F + F->D
}",true,,,,,
mcisler,ThreeCycle,57,eval_input,2020-04-07 11:20:39,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->C + C->D + D->E + E->C
}",true,,,,,
mcisler,ThreeCycle,58,eval_input,2020-04-07 11:21:16,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->C + C->A + E->B + C->E
}",true,,,,,
mcisler,ThreeCycle,59,eval_input,2020-04-07 11:21:23,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->C + E->B + C->E
}",true,,,,,
mcisler,ThreeCycle,60,eval_input,2020-04-07 11:21:45,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
mcisler,ThreeCycle,61,eval_input,2020-04-07 11:22:17,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->A + B->C + C->B + C->A + A->C
}",true,,,,,
mcisler,ThreeCycle,62,quiz_answer,2020-04-07 11:22:55,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mcisler,ThreeCycle,63,quiz_answer,2020-04-07 11:22:59,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
mcisler,ThreeCycle,64,quiz_answer,2020-04-07 11:23:02,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mcisler,ThreeCycle,65,quiz_answer,2020-04-07 11:23:13,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
mcisler,ThreeCycle,66,quiz_answer,2020-04-07 11:23:18,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
mcisler,ThreeCycle,67,quiz_answer,2020-04-07 11:23:22,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
mcisler,ThreeCycle,68,quiz_answer,2020-04-07 11:23:27,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mcisler,ThreeCycle,69,quiz_answer,2020-04-07 11:23:32,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mcisler,ThreeCycle,70,final_answer,2020-04-07 11:23:34,,,,,,Must contain one directed 3-cycle (though it can be undirected).,
mcisler,IsBipartite,71,eval_input,2020-04-07 11:23:41,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->A + B->C + C->B + C->A + A->C
}",false,,,,,
mcisler,IsBipartite,72,eval_input,2020-04-07 11:24:07,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->C + C->A
}",false,,,,,
mcisler,IsBipartite,73,eval_input,2020-04-07 11:24:14,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = none
}",true,,,,,
mcisler,IsBipartite,74,eval_input,2020-04-07 11:24:18,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B
}",true,,,,,
mcisler,IsBipartite,75,eval_input,2020-04-07 11:24:29,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->A
}",true,,,,,
mcisler,IsBipartite,76,eval_input,2020-04-07 11:24:35,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->C
}",true,,,,,
mcisler,IsBipartite,77,eval_input,2020-04-07 11:24:47,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->C + C->D
}",true,,,,,
mcisler,IsBipartite,78,eval_input,2020-04-07 11:24:53,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->C + C->D + A->D
}",true,,,,,
mcisler,IsBipartite,79,eval_input,2020-04-07 11:25:00,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->C + C->D + A->D + D->A
}",true,,,,,
mcisler,IsBipartite,80,eval_input,2020-04-07 11:25:26,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->A
}",false,,,,,
mcisler,IsBipartite,81,eval_input,2020-04-07 11:25:38,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->B
}",false,,,,,
mcisler,IsBipartite,82,eval_input,2020-04-07 11:26:23,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->C
}",true,,,,,
mcisler,IsBipartite,83,eval_input,2020-04-07 11:26:36,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
mcisler,IsBipartite,84,eval_input,2020-04-07 11:26:43,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->C + C->A
}",false,,,,,
mcisler,IsBipartite,85,eval_input,2020-04-07 11:27:00,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
mcisler,IsBipartite,86,eval_input,2020-04-07 11:27:36,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->C + C->D + D->E + E->F + F->A
}",true,,,,,
mcisler,IsBipartite,87,eval_input,2020-04-07 11:28:08,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->A + B->C + C->B
}",true,,,,,
mcisler,IsBipartite,88,eval_input,2020-04-07 11:28:27,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->A
}",true,,,,,
mcisler,IsBipartite,89,eval_input,2020-04-07 11:28:43,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->A
}",false,,,,,
mcisler,IsBipartite,90,eval_input,2020-04-07 11:28:58,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->A + B->C + C->B + C->D + D->C
}",true,,,,,
mcisler,IsBipartite,91,eval_input,2020-04-07 11:29:12,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->A + B->C + C->B + C->A + A->C
}",false,,,,,
mcisler,IsBipartite,92,eval_input,2020-04-07 11:29:28,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  
  edges = A->B + B->A + B->C + C->B + C->D + D->C + D->A + A->D
}",true,,,,,
mcisler,IsBipartite,93,quiz_answer,2020-04-07 11:29:58,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mcisler,IsBipartite,94,quiz_answer,2020-04-07 11:30:01,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mcisler,IsBipartite,95,quiz_answer,2020-04-07 11:30:05,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mcisler,IsBipartite,96,quiz_answer,2020-04-07 11:30:15,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mcisler,IsBipartite,97,quiz_answer,2020-04-07 11:30:20,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mcisler,IsBipartite,98,quiz_answer,2020-04-07 11:30:25,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mcisler,IsBipartite,99,quiz_answer,2020-04-07 11:30:33,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
mcisler,IsBipartite,100,quiz_answer,2020-04-07 11:30:40,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mcisler,IsBipartite,101,final_answer,2020-04-07 11:30:41,,,,,,No cycles with an odd number of edges,
wzhao16,IsBipartite,0,eval_input,2020-04-07 14:24:55,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
wzhao16,IsBipartite,1,eval_input,2020-04-07 14:25:08,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
wzhao16,IsBipartite,2,eval_input,2020-04-07 14:25:15,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A
}",false,,,,,
wzhao16,IsBipartite,3,eval_input,2020-04-07 14:25:19,"inst myInst {
  Node = A
       + B
       + C
  edges = B->A
}",true,,,,,
wzhao16,IsBipartite,4,eval_input,2020-04-07 14:25:22,"inst myInst {
  Node = A
       + B
       + C
  edges = B->B
}",false,,,,,
wzhao16,IsBipartite,5,eval_input,2020-04-07 14:25:34,"inst myInst {
  Node = A
       + B
       + C
  edges = B->B + A->B
}",false,,,,,
wzhao16,IsBipartite,6,eval_input,2020-04-07 14:25:40,"inst myInst {
  Node = A
       + B
       + C
  edges = B->B + A->B + C->B
}",false,,,,,
wzhao16,IsBipartite,7,eval_input,2020-04-07 14:25:47,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + C->B
}",true,,,,,
wzhao16,IsBipartite,8,eval_input,2020-04-07 14:26:01,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
wzhao16,IsBipartite,9,eval_input,2020-04-07 14:26:08,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
wzhao16,IsBipartite,10,eval_input,2020-04-07 14:26:14,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
wzhao16,IsBipartite,11,quiz_answer,2020-04-07 14:26:48,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
wzhao16,IsBipartite,12,quiz_answer,2020-04-07 14:26:51,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
wzhao16,IsBipartite,13,quiz_answer,2020-04-07 14:26:56,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
wzhao16,IsBipartite,14,quiz_answer,2020-04-07 14:27:01,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
wzhao16,IsBipartite,15,quiz_answer,2020-04-07 14:27:07,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,false,false,,
wzhao16,IsBipartite,16,quiz_answer,2020-04-07 14:27:24,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
wzhao16,IsBipartite,17,quiz_answer,2020-04-07 14:27:27,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
wzhao16,IsBipartite,18,quiz_answer,2020-04-07 14:27:33,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,true,false,,
wzhao16,IsBipartite,19,eval_input,2020-04-07 14:28:28,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
wzhao16,IsBipartite,20,eval_input,2020-04-07 14:28:40,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
wzhao16,IsBipartite,21,quiz_answer,2020-04-07 14:30:31,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
wzhao16,IsBipartite,22,quiz_answer,2020-04-07 14:30:34,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
wzhao16,IsBipartite,23,quiz_answer,2020-04-07 14:30:39,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
wzhao16,IsBipartite,24,quiz_answer,2020-04-07 14:30:45,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
wzhao16,IsBipartite,25,quiz_answer,2020-04-07 14:30:51,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
wzhao16,IsBipartite,26,quiz_answer,2020-04-07 14:30:56,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
wzhao16,IsBipartite,27,quiz_answer,2020-04-07 14:31:03,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
wzhao16,IsBipartite,28,quiz_answer,2020-04-07 14:31:08,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
wzhao16,IsBipartite,29,final_answer,2020-04-07 14:31:09,,,,,,"something like acyclic / irreflexive but apparently even number of nodes in the cycle between are allowed (i.e. A->A is false, but A->B + B->A is true, but A->B + B->C + C->A is false, but A->B + B->C + C->D + D->A is true again)",
wzhao16,IsDag,30,eval_input,2020-04-07 14:31:28,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
wzhao16,IsDag,31,eval_input,2020-04-07 14:31:34,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
wzhao16,IsDag,32,eval_input,2020-04-07 14:31:37,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",false,,,,,
wzhao16,IsDag,33,eval_input,2020-04-07 14:31:40,"inst myInst {
  Node = A + B + C
  edges = A->A
}",false,,,,,
wzhao16,IsDag,34,quiz_answer,2020-04-07 14:31:46,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
wzhao16,IsDag,35,quiz_answer,2020-04-07 14:31:49,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
wzhao16,IsDag,36,quiz_answer,2020-04-07 14:31:52,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
wzhao16,IsDag,37,quiz_answer,2020-04-07 14:31:58,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
wzhao16,IsDag,38,quiz_answer,2020-04-07 14:32:02,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
wzhao16,IsDag,39,quiz_answer,2020-04-07 14:32:07,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
wzhao16,IsDag,40,quiz_answer,2020-04-07 14:32:11,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
wzhao16,IsDag,41,quiz_answer,2020-04-07 14:32:16,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
wzhao16,IsDag,42,final_answer,2020-04-07 14:32:17,,,,,,Acyclic,
wzhao16,ThreeCycle,43,eval_input,2020-04-07 14:32:28,"inst myInst {
  Node = A + B + C
  edges = A->A
}",false,,,,,
wzhao16,ThreeCycle,44,eval_input,2020-04-07 14:32:32,"inst myInst {
  Node = A + B + C
  edges = A->B
}",false,,,,,
wzhao16,ThreeCycle,45,eval_input,2020-04-07 14:32:36,"inst myInst {
  Node = A + B + C
  edges = A->C
}",false,,,,,
wzhao16,ThreeCycle,46,eval_input,2020-04-07 14:32:41,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
wzhao16,ThreeCycle,47,eval_input,2020-04-07 14:32:47,"inst myInst {
  Node = A + B
  edges = A->B
}",false,,,,,
wzhao16,ThreeCycle,48,eval_input,2020-04-07 14:32:56,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
wzhao16,ThreeCycle,49,eval_input,2020-04-07 14:33:01,"inst myInst {
  Node = A + B
  edges = none
}",false,,,,,
wzhao16,ThreeCycle,50,eval_input,2020-04-07 14:33:05,"inst myInst {
  Node = none
  edges = none
}",false,,,,,
wzhao16,ThreeCycle,51,quiz_answer,2020-04-07 14:33:18,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
wzhao16,ThreeCycle,52,quiz_answer,2020-04-07 14:33:20,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
wzhao16,ThreeCycle,53,quiz_answer,2020-04-07 14:33:23,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
wzhao16,ThreeCycle,54,quiz_answer,2020-04-07 14:33:26,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
wzhao16,ThreeCycle,55,quiz_answer,2020-04-07 14:33:28,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,true,false,,
wzhao16,ThreeCycle,56,quiz_answer,2020-04-07 14:33:55,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
wzhao16,ThreeCycle,57,quiz_answer,2020-04-07 14:33:59,"inst myInst {
      Node = A
      edges = none
    }",true,1,false,false,,
wzhao16,ThreeCycle,58,quiz_answer,2020-04-07 14:34:28,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
wzhao16,ThreeCycle,59,quiz_answer,2020-04-07 14:34:31,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
wzhao16,ThreeCycle,60,quiz_answer,2020-04-07 14:34:33,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
wzhao16,ThreeCycle,61,quiz_answer,2020-04-07 14:34:39,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
wzhao16,ThreeCycle,62,quiz_answer,2020-04-07 14:34:42,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
wzhao16,ThreeCycle,63,quiz_answer,2020-04-07 14:34:45,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
wzhao16,ThreeCycle,64,quiz_answer,2020-04-07 14:34:51,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
wzhao16,ThreeCycle,65,quiz_answer,2020-04-07 14:34:56,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",true,7,false,false,,
wzhao16,ThreeCycle,66,quiz_answer,2020-04-07 14:35:16,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
wzhao16,ThreeCycle,67,quiz_answer,2020-04-07 14:35:18,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
wzhao16,ThreeCycle,68,quiz_answer,2020-04-07 14:35:21,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
wzhao16,ThreeCycle,69,quiz_answer,2020-04-07 14:35:23,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
wzhao16,ThreeCycle,70,quiz_answer,2020-04-07 14:35:26,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
wzhao16,ThreeCycle,71,quiz_answer,2020-04-07 14:35:29,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
wzhao16,ThreeCycle,72,quiz_answer,2020-04-07 14:35:34,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
wzhao16,ThreeCycle,73,quiz_answer,2020-04-07 14:35:36,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
wzhao16,ThreeCycle,74,final_answer,2020-04-07 14:35:37,,,,,,there specifically needs to be a cycle of three nodes,
pbooncho,IsBipartite,0,eval_input,2020-04-07 15:11:11,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
pbooncho,IsBipartite,1,eval_input,2020-04-07 15:11:26,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
pbooncho,IsBipartite,2,eval_input,2020-04-07 15:11:37,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A
}",true,,,,,
pbooncho,IsBipartite,3,eval_input,2020-04-07 15:11:49,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A + A->C
}",true,,,,,
pbooncho,IsBipartite,4,eval_input,2020-04-07 15:11:55,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A + A->C + C->A
}",true,,,,,
pbooncho,IsBipartite,5,eval_input,2020-04-07 15:12:21,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A + A->C + C->A + B->C
}",false,,,,,
pbooncho,IsBipartite,6,eval_input,2020-04-07 15:13:08,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A + A->C + C->A + C->B
}",false,,,,,
pbooncho,IsBipartite,7,eval_input,2020-04-07 15:13:13,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A + A->C + C->A
}",true,,,,,
pbooncho,IsBipartite,8,eval_input,2020-04-07 15:13:27,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A + A->C + C->A + A->A
}",false,,,,,
pbooncho,IsBipartite,9,eval_input,2020-04-07 15:13:35,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A + A->C + C->A + B->B
}",false,,,,,
pbooncho,IsBipartite,10,eval_input,2020-04-07 15:13:43,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A + A->C + C->A + C->C
}",false,,,,,
pbooncho,IsBipartite,11,eval_input,2020-04-07 15:13:58,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A + A->C + C->A
}",true,,,,,
pbooncho,IsBipartite,12,eval_input,2020-04-07 15:14:21,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->A + A->C + C->A
}",true,,,,,
pbooncho,IsBipartite,13,eval_input,2020-04-07 15:14:39,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->A + A->C + C->A + A->D
}",true,,,,,
pbooncho,IsBipartite,14,eval_input,2020-04-07 15:14:53,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->A + A->C + C->A + A->D + D->A
}",true,,,,,
pbooncho,IsBipartite,15,eval_input,2020-04-07 15:15:10,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->A + A->C + C->A + A->D + D->A + B->C
}",false,,,,,
pbooncho,IsBipartite,16,eval_input,2020-04-07 15:15:17,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->A + A->C + C->A + A->D + D->A + B->D
}",false,,,,,
pbooncho,IsBipartite,17,eval_input,2020-04-07 15:15:28,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->A + A->C + C->A + A->D + D->A + D->B
}",false,,,,,
pbooncho,IsBipartite,18,eval_input,2020-04-07 15:15:35,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->A + A->C + C->A + A->D + D->A + D->C
}",false,,,,,
pbooncho,IsBipartite,19,eval_input,2020-04-07 15:15:40,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->A + A->C + C->A + A->D + D->A
}",true,,,,,
pbooncho,IsBipartite,20,eval_input,2020-04-07 15:16:29,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->D + D->C
}",true,,,,,
pbooncho,IsBipartite,21,eval_input,2020-04-07 15:16:53,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->D + D->C + B->A + D->B + C->D
}",true,,,,,
pbooncho,IsBipartite,22,eval_input,2020-04-07 15:17:05,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->D + D->C + B->A + D->B + C->D + C->A
}",true,,,,,
pbooncho,IsBipartite,23,eval_input,2020-04-07 15:17:38,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->D + D->C + B->A + D->B + C->D + C->A + A->C
}",true,,,,,
pbooncho,IsBipartite,24,eval_input,2020-04-07 15:18:28,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",false,,,,,
pbooncho,IsBipartite,25,eval_input,2020-04-07 15:18:41,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
pbooncho,IsBipartite,26,eval_input,2020-04-07 15:18:59,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
pbooncho,IsBipartite,27,quiz_answer,2020-04-07 15:23:17,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
pbooncho,IsBipartite,28,quiz_answer,2020-04-07 15:23:32,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
pbooncho,IsBipartite,29,quiz_answer,2020-04-07 15:23:41,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
pbooncho,IsBipartite,30,quiz_answer,2020-04-07 15:24:06,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
pbooncho,IsBipartite,31,quiz_answer,2020-04-07 15:24:24,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
pbooncho,IsBipartite,32,quiz_answer,2020-04-07 15:24:32,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
pbooncho,IsBipartite,33,quiz_answer,2020-04-07 15:24:54,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
pbooncho,IsBipartite,34,quiz_answer,2020-04-07 15:25:03,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
pbooncho,IsBipartite,35,final_answer,2020-04-07 15:25:08,,,,,,"If the instance has cycle(s) made up of the odd number of nodes (for example, A->A, or A->B + B->C + C-> A, etc.), evaluates to FALSE; otherwise, evaluates to TRUE",
pbooncho,ThreeCycle,36,eval_input,2020-04-07 15:25:46,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
pbooncho,ThreeCycle,37,eval_input,2020-04-07 15:26:11,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
pbooncho,ThreeCycle,38,eval_input,2020-04-07 15:26:39,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
pbooncho,ThreeCycle,39,eval_input,2020-04-07 15:26:58,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",true,,,,,
pbooncho,ThreeCycle,40,eval_input,2020-04-07 15:27:20,"inst myInst {
  Node = A
       + B
  edges = A->B + B->A
}",false,,,,,
pbooncho,ThreeCycle,41,eval_input,2020-04-07 15:27:40,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
pbooncho,ThreeCycle,42,eval_input,2020-04-07 15:28:16,"inst myInst {
  Node = A
  edges = none
}",false,,,,,
pbooncho,ThreeCycle,43,eval_input,2020-04-07 15:28:55,"inst myInst {
  Node = A + B
  edges = none
}",false,,,,,
pbooncho,ThreeCycle,44,eval_input,2020-04-07 15:29:00,"inst myInst {
  Node = A + B + C
  edges = none
}",false,,,,,
pbooncho,ThreeCycle,45,eval_input,2020-04-07 15:29:04,"inst myInst {
  Node = A + B + C + D
  edges = none
}",false,,,,,
pbooncho,ThreeCycle,46,eval_input,2020-04-07 15:29:08,"inst myInst {
  Node = A + B + C + D + E
  edges = none
}",false,,,,,
pbooncho,ThreeCycle,47,eval_input,2020-04-07 15:29:19,"inst myInst {
  Node = A + B + C + D + E + F
  edges = none
}",false,,,,,
pbooncho,ThreeCycle,48,eval_input,2020-04-07 15:29:32,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->D
}",false,,,,,
pbooncho,ThreeCycle,49,eval_input,2020-04-07 15:29:42,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->D + D->E + E->F
}",false,,,,,
pbooncho,ThreeCycle,50,eval_input,2020-04-07 15:29:47,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->D + D->E + E->F + F->A
}",false,,,,,
pbooncho,ThreeCycle,51,eval_input,2020-04-07 15:30:07,"inst myInst {
  Node = none
  edges = none
}",false,,,,,
pbooncho,ThreeCycle,52,eval_input,2020-04-07 15:30:28,"inst myInst {
  Node = A + B
  edges = A->B
}",false,,,,,
pbooncho,ThreeCycle,53,eval_input,2020-04-07 15:30:32,"inst myInst {
  Node = A + B
  edges = A->A
}",false,,,,,
pbooncho,ThreeCycle,54,eval_input,2020-04-07 15:30:36,"inst myInst {
  Node = A + B
  edges = B->A
}",false,,,,,
pbooncho,ThreeCycle,55,eval_input,2020-04-07 15:30:59,"inst myInst {
  Node = A + B
  edges = A->A + B->B
}",false,,,,,
pbooncho,ThreeCycle,56,eval_input,2020-04-07 15:31:10,"inst myInst {
  Node = A + B
  edges = A->A + B->B + A->B + B->A
}",false,,,,,
pbooncho,ThreeCycle,57,eval_input,2020-04-07 15:31:53,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",true,,,,,
pbooncho,ThreeCycle,58,eval_input,2020-04-07 15:31:59,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A + A->C
}",true,,,,,
pbooncho,ThreeCycle,59,eval_input,2020-04-07 15:32:25,"inst myInst {
  Node = A + B + C
  edges = C->B + B->A + A->C
}",true,,,,,
pbooncho,ThreeCycle,60,eval_input,2020-04-07 15:32:35,"inst myInst {
  Node = A + B + C
  edges = C->B + B->A + A->C + A->A
}",true,,,,,
pbooncho,ThreeCycle,61,eval_input,2020-04-07 15:33:02,"inst myInst {
  Node = A + B + C
  edges = A->A + A->B
}",false,,,,,
pbooncho,ThreeCycle,62,eval_input,2020-04-07 15:33:10,"inst myInst {
  Node = A + B + C
  edges = A->A + A->B + A->C
}",false,,,,,
pbooncho,ThreeCycle,63,eval_input,2020-04-07 15:33:19,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",true,,,,,
pbooncho,ThreeCycle,64,eval_input,2020-04-07 15:33:26,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A + A->A
}",true,,,,,
pbooncho,ThreeCycle,65,eval_input,2020-04-07 15:33:56,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
pbooncho,ThreeCycle,66,quiz_answer,2020-04-07 15:34:48,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
pbooncho,ThreeCycle,67,quiz_answer,2020-04-07 15:34:53,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
pbooncho,ThreeCycle,68,quiz_answer,2020-04-07 15:35:00,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
pbooncho,ThreeCycle,69,quiz_answer,2020-04-07 15:35:09,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
pbooncho,ThreeCycle,70,quiz_answer,2020-04-07 15:35:16,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
pbooncho,ThreeCycle,71,quiz_answer,2020-04-07 15:35:25,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
pbooncho,ThreeCycle,72,quiz_answer,2020-04-07 15:35:31,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
pbooncho,ThreeCycle,73,quiz_answer,2020-04-07 15:35:36,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
pbooncho,ThreeCycle,74,final_answer,2020-04-07 15:35:38,,,,,,"If the instance has a cycle size=3, evaluates to TRUE; otherwise, evaluates to FALSE",
pbooncho,IsDag,75,eval_input,2020-04-07 15:36:16,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
pbooncho,IsDag,76,eval_input,2020-04-07 15:36:29,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
pbooncho,IsDag,77,eval_input,2020-04-07 15:36:48,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
pbooncho,IsDag,78,eval_input,2020-04-07 15:36:56,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->D + D->A + E->F
}",false,,,,,
pbooncho,IsDag,79,eval_input,2020-04-07 15:37:20,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
pbooncho,IsDag,80,eval_input,2020-04-07 15:37:38,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->D + D->E + E->F + F->A
}",false,,,,,
pbooncho,IsDag,81,eval_input,2020-04-07 15:37:59,"inst myInst {
  Node = A + B + C + D + E + F + G
  edges = A->B + B->C + C->D + D->E + E->F + F->G + G->A
}",false,,,,,
pbooncho,IsDag,82,eval_input,2020-04-07 15:38:18,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
pbooncho,IsDag,83,eval_input,2020-04-07 15:38:48,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C
}",true,,,,,
pbooncho,IsDag,84,eval_input,2020-04-07 15:39:32,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B + A->C
}",true,,,,,
pbooncho,IsDag,85,eval_input,2020-04-07 15:39:54,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + A->D
}",true,,,,,
pbooncho,IsDag,86,eval_input,2020-04-07 15:40:05,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D
}",true,,,,,
pbooncho,IsDag,87,eval_input,2020-04-07 15:40:20,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
pbooncho,IsDag,88,eval_input,2020-04-07 15:40:35,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
pbooncho,IsDag,89,eval_input,2020-04-07 15:40:47,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
pbooncho,IsDag,90,eval_input,2020-04-07 15:40:58,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
pbooncho,IsDag,91,quiz_answer,2020-04-07 15:41:45,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
pbooncho,IsDag,92,quiz_answer,2020-04-07 15:41:50,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
pbooncho,IsDag,93,quiz_answer,2020-04-07 15:41:56,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
pbooncho,IsDag,94,quiz_answer,2020-04-07 15:42:05,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
pbooncho,IsDag,95,quiz_answer,2020-04-07 15:42:10,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
pbooncho,IsDag,96,quiz_answer,2020-04-07 15:42:15,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
pbooncho,IsDag,97,quiz_answer,2020-04-07 15:42:20,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
pbooncho,IsDag,98,quiz_answer,2020-04-07 15:42:26,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
pbooncho,IsDag,99,final_answer,2020-04-07 15:42:27,,,,,,"if graph contains cycle, evaluates to FALSE; otherwise, evaluates to TRUE",
kding8,IsBipartite,0,eval_input,2020-04-07 16:00:43,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
wdai8,ThreeCycle,0,eval_input,2020-04-07 16:00:54,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
kding8,IsBipartite,1,eval_input,2020-04-07 16:01:24,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
wdai8,ThreeCycle,1,eval_input,2020-04-07 16:01:25,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
kding8,IsBipartite,2,eval_input,2020-04-07 16:01:26,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
kding8,IsBipartite,3,eval_input,2020-04-07 16:01:27,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
kding8,IsBipartite,4,eval_input,2020-04-07 16:01:34,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> B
}",true,,,,,
kding8,IsBipartite,5,eval_input,2020-04-07 16:01:45,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> B + B -> A
}",true,,,,,
wdai8,ThreeCycle,2,eval_input,2020-04-07 16:02:08,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",false,,,,,
kding8,IsBipartite,6,eval_input,2020-04-07 16:02:56,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> C
}",true,,,,,
zhu24,ThreeCycle,0,eval_input,2020-04-07 16:03:05,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
kding8,IsBipartite,7,eval_input,2020-04-07 16:03:06,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> C + C -> B
}",true,,,,,
kding8,IsBipartite,8,eval_input,2020-04-07 16:03:13,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> C + C -> B + B -> A
}",false,,,,,
kding8,IsBipartite,9,eval_input,2020-04-07 16:03:30,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> C + C -> A + B -> A
}",true,,,,,
kding8,IsBipartite,10,eval_input,2020-04-07 16:03:44,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> C + C -> A + B -> A + A -> B
}",true,,,,,
wdai8,ThreeCycle,3,eval_input,2020-04-07 16:03:53,"inst myInst {
  Node = A
       + B
       + C
  edges = A->C
}",false,,,,,
kding8,IsBipartite,11,eval_input,2020-04-07 16:03:57,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> C + C -> A + B -> A + A -> B + B -> C + C -> B
}",false,,,,,
wdai8,ThreeCycle,4,eval_input,2020-04-07 16:04:02,"inst myInst {
  Node = A
       + B
       + C
  edges = C->B
}",false,,,,,
wdai8,ThreeCycle,5,eval_input,2020-04-07 16:04:07,"inst myInst {
  Node = A
       + B
       + C
  edges = C->A
}",false,,,,,
wdai8,ThreeCycle,6,eval_input,2020-04-07 16:04:11,"inst myInst {
  Node = A
       + B
       + C
  edges = B->A
}",false,,,,,
wdai8,ThreeCycle,7,eval_input,2020-04-07 16:04:15,"inst myInst {
  Node = A
       + B
       + C
  edges = B->C
}",false,,,,,
wdai8,ThreeCycle,8,eval_input,2020-04-07 16:04:36,"inst myInst {
  Node = A
       + B
       + C
  edges = A->C
}",false,,,,,
kding8,IsBipartite,12,eval_input,2020-04-07 16:04:50,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> C + C -> A + B -> A + A -> B + B -> C
}",false,,,,,
kding8,IsBipartite,13,eval_input,2020-04-07 16:04:55,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> C + C -> A + B -> A + A -> B + C -> B
}",false,,,,,
wdai8,ThreeCycle,9,eval_input,2020-04-07 16:04:59,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",false,,,,,
wdai8,ThreeCycle,10,eval_input,2020-04-07 16:05:07,"inst myInst {
  Node = A
       + B
       + C
  edges = B->A
}",false,,,,,
kding8,IsBipartite,14,eval_input,2020-04-07 16:05:08,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> C + C -> A + B -> A + A -> B
}",true,,,,,
wdai8,ThreeCycle,11,eval_input,2020-04-07 16:05:10,"inst myInst {
  Node = A
       + B
       + C
  edges = B->C
}",false,,,,,
zhu24,ThreeCycle,1,eval_input,2020-04-07 16:05:13,"inst myInst {
  Node = A
       + B
       + C
  edges = B->A
}",false,,,,,
wdai8,ThreeCycle,12,eval_input,2020-04-07 16:05:14,"inst myInst {
  Node = A
       + B
       + C
  edges = C->A
}",false,,,,,
zhu24,ThreeCycle,2,eval_input,2020-04-07 16:05:17,"inst myInst {
  Node = A
       + B
       + C
  edges = C->A
}",false,,,,,
wdai8,ThreeCycle,13,eval_input,2020-04-07 16:05:18,"inst myInst {
  Node = A
       + B
       + C
  edges = C->B
}",false,,,,,
wdai8,ThreeCycle,14,eval_input,2020-04-07 16:05:21,"inst myInst {
  Node = A
       + B
       + C
  edges = C->C
}",false,,,,,
wdai8,ThreeCycle,15,eval_input,2020-04-07 16:05:27,"inst myInst {
  Node = A
       + B
       + C
  edges = B->B
}",false,,,,,
wdai8,ThreeCycle,16,eval_input,2020-04-07 16:05:32,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A
}",false,,,,,
kding8,IsBipartite,15,eval_input,2020-04-07 16:05:36,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> C + C -> A + B -> A + A -> B + A -> A
}",false,,,,,
kding8,IsBipartite,16,eval_input,2020-04-07 16:06:00,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> C + C -> A + B -> A + A -> B + C -> D
}",true,,,,,
zhu24,ThreeCycle,3,eval_input,2020-04-07 16:06:02,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + A->C
}",false,,,,,
kding8,IsBipartite,17,eval_input,2020-04-07 16:06:06,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> C + C -> A + B -> A + A -> B + C -> D + D -> C
}",true,,,,,
zhu24,ThreeCycle,4,eval_input,2020-04-07 16:06:08,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",false,,,,,
wdai8,ThreeCycle,17,eval_input,2020-04-07 16:06:22,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->D
}",false,,,,,
zhu24,ThreeCycle,5,eval_input,2020-04-07 16:06:32,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + A->C + C->B
}",false,,,,,
zhu24,ThreeCycle,6,eval_input,2020-04-07 16:06:46,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->D
}",false,,,,,
wdai8,ThreeCycle,18,eval_input,2020-04-07 16:07:33,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = B->D
}",false,,,,,
kding8,IsBipartite,18,eval_input,2020-04-07 16:07:41,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> C + C -> A + B -> A + A -> B + C -> D + D -> C
}",true,,,,,
wdai8,ThreeCycle,19,eval_input,2020-04-07 16:07:50,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = C->D
}",false,,,,,
kding8,IsBipartite,19,eval_input,2020-04-07 16:07:57,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> C + C -> A + B -> A + A -> B
}",true,,,,,
kding8,IsBipartite,20,eval_input,2020-04-07 16:08:03,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> C + C -> A + B -> A + A -> B
}",true,,,,,
wdai8,ThreeCycle,20,eval_input,2020-04-07 16:08:04,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->C + C->A
}",false,,,,,
zhu24,ThreeCycle,7,eval_input,2020-04-07 16:08:08,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->C + C->A
}",false,,,,,
wdai8,ThreeCycle,21,eval_input,2020-04-07 16:08:12,"inst myInst {
  Node = A
       + B
       + C
  edges = A->C + C->A
}",false,,,,,
kding8,IsBipartite,21,eval_input,2020-04-07 16:08:28,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> C + C -> A + B -> A + A -> B + B -> C
}",false,,,,,
zhu24,ThreeCycle,8,eval_input,2020-04-07 16:08:31,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = none
}",false,,,,,
wdai8,ThreeCycle,22,eval_input,2020-04-07 16:08:32,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
wdai8,ThreeCycle,23,eval_input,2020-04-07 16:08:43,"inst myInst {
  Node = none
  edges = none
}",false,,,,,
kding8,IsBipartite,22,eval_input,2020-04-07 16:08:46,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> C + A -> B + B -> C
}",true,,,,,
wdai8,ThreeCycle,24,eval_input,2020-04-07 16:08:50,"inst myInst {
  Node = A
  edges = none
}",false,,,,,
wdai8,ThreeCycle,25,eval_input,2020-04-07 16:08:57,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
zhu24,ThreeCycle,9,eval_input,2020-04-07 16:09:04,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
}",false,,,,,
kding8,IsBipartite,23,eval_input,2020-04-07 16:09:09,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> C + B -> A + C -> B
}",false,,,,,
zhu24,ThreeCycle,10,eval_input,2020-04-07 16:09:11,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",true,,,,,
zhu24,ThreeCycle,11,eval_input,2020-04-07 16:09:27,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A
}",false,,,,,
wdai8,ThreeCycle,26,eval_input,2020-04-07 16:09:31,"inst myInst {
  Node = A
        + B
        + C
  edges = A->B + B->C + C->A
}",true,,,,,
kding8,IsBipartite,24,eval_input,2020-04-07 16:09:35,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> C + B -> A + C -> B
}",false,,,,,
zhu24,ThreeCycle,12,eval_input,2020-04-07 16:09:40,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->A
}",true,,,,,
kding8,IsBipartite,25,eval_input,2020-04-07 16:09:44,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> C + C -> D
}",true,,,,,
zhu24,ThreeCycle,13,eval_input,2020-04-07 16:09:46,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
kding8,IsBipartite,26,eval_input,2020-04-07 16:09:49,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> C + C -> D + D -> A
}",true,,,,,
zhu24,ThreeCycle,14,eval_input,2020-04-07 16:10:30,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
kding8,IsBipartite,27,eval_input,2020-04-07 16:10:38,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> B + B -> C + C -> D + D -> E + E -> A
}",false,,,,,
zhu24,ThreeCycle,15,eval_input,2020-04-07 16:10:55,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C + C->A + D->E + E->F + F->D
}",true,,,,,
kding8,IsBipartite,28,eval_input,2020-04-07 16:11:13,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> B + B -> C + C -> D + D -> E + E -> A
}",false,,,,,
kding8,IsBipartite,29,eval_input,2020-04-07 16:11:44,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> A
}",false,,,,,
kding8,IsBipartite,30,eval_input,2020-04-07 16:12:12,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> B + B -> A
}",true,,,,,
kding8,IsBipartite,31,eval_input,2020-04-07 16:12:17,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> B + B -> C + C -> A
}",false,,,,,
kding8,IsBipartite,32,eval_input,2020-04-07 16:12:23,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> B + B -> C + C -> D + D -> A
}",true,,,,,
kfeinbe1,ThreeCycle,0,eval_input,2020-04-07 16:12:23,"inst myInst {
  Node = A + B + C
  edges = none
}",false,,,,,
kfeinbe1,ThreeCycle,1,eval_input,2020-04-07 16:12:27,"inst myInst {
  Node = A + B + C
  edges = none
}",false,,,,,
kfeinbe1,ThreeCycle,2,eval_input,2020-04-07 16:12:33,"inst myInst {
  Node = A + B + C
  edges = A->B
}",false,,,,,
kfeinbe1,ThreeCycle,3,eval_input,2020-04-07 16:12:37,"inst myInst {
  Node = A + B + C
  edges = A->C
}",false,,,,,
kfeinbe1,ThreeCycle,4,eval_input,2020-04-07 16:12:39,"inst myInst {
  Node = A + B + C
  edges = A->C
}",false,,,,,
kding8,IsBipartite,33,quiz_answer,2020-04-07 16:12:43,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kfeinbe1,ThreeCycle,5,eval_input,2020-04-07 16:12:44,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",false,,,,,
kfeinbe1,ThreeCycle,6,eval_input,2020-04-07 16:12:50,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",true,,,,,
kding8,IsBipartite,34,quiz_answer,2020-04-07 16:12:53,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
kfeinbe1,ThreeCycle,7,eval_input,2020-04-07 16:12:55,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + C->A
}",false,,,,,
kding8,IsBipartite,35,quiz_answer,2020-04-07 16:13:02,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
kfeinbe1,ThreeCycle,8,eval_input,2020-04-07 16:13:18,"inst myInst {
  Node = A + B + C
  edges = A->B + A->A + A->C
}",false,,,,,
kding8,IsBipartite,36,quiz_answer,2020-04-07 16:13:20,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
kding8,IsBipartite,37,quiz_answer,2020-04-07 16:13:30,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
kfeinbe1,ThreeCycle,9,eval_input,2020-04-07 16:13:33,"inst myInst {
  Node = A + B + C
  edges = A->C + C->B + B->A
}",true,,,,,
kding8,IsBipartite,38,quiz_answer,2020-04-07 16:13:35,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
kfeinbe1,ThreeCycle,10,eval_input,2020-04-07 16:13:46,"inst myInst {
  Node = A + B + C
  edges = C->B + B->A + A->C
}",true,,,,,
kding8,IsBipartite,39,quiz_answer,2020-04-07 16:13:51,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
kfeinbe1,ThreeCycle,11,eval_input,2020-04-07 16:13:51,"inst myInst {
  Node = A + B + C
  edges = C->B + B->A + A->C + A->B
}",true,,,,,
kfeinbe1,ThreeCycle,12,eval_input,2020-04-07 16:13:59,"inst myInst {
  Node = A + B + C
  edges = C->B + B->A + A->C + A->B + B->C
}",true,,,,,
kding8,IsBipartite,40,quiz_answer,2020-04-07 16:13:59,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
kding8,IsBipartite,41,final_answer,2020-04-07 16:14:01,,,,,,Each circle has only even nodes,
zhu24,ThreeCycle,16,quiz_answer,2020-04-07 16:14:05,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
wdai8,ThreeCycle,27,quiz_answer,2020-04-07 16:14:06,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kfeinbe1,ThreeCycle,13,eval_input,2020-04-07 16:14:10,"inst myInst {
  Node = A + B + C
  edges = B->A + A->C + A->B + B->C
}",false,,,,,
zhu24,ThreeCycle,17,quiz_answer,2020-04-07 16:14:14,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
wdai8,ThreeCycle,28,quiz_answer,2020-04-07 16:14:16,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
zhu24,ThreeCycle,18,quiz_answer,2020-04-07 16:14:21,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
wdai8,ThreeCycle,29,quiz_answer,2020-04-07 16:14:22,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
kfeinbe1,ThreeCycle,14,eval_input,2020-04-07 16:14:22,"inst myInst {
  Node = A + B + C
  edges = A->A
}",false,,,,,
zhu24,ThreeCycle,19,quiz_answer,2020-04-07 16:14:27,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
wdai8,ThreeCycle,30,quiz_answer,2020-04-07 16:14:27,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
kfeinbe1,ThreeCycle,15,eval_input,2020-04-07 16:14:31,"inst myInst {
  Node = A + B + C
  edges = A->A + B->B + C->C
}",false,,,,,
wdai8,ThreeCycle,31,quiz_answer,2020-04-07 16:14:31,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
zhu24,ThreeCycle,20,quiz_answer,2020-04-07 16:14:31,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
kding8,IsDag,42,eval_input,2020-04-07 16:14:36,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> B + B -> C + C -> D + D -> A
}",false,,,,,
zhu24,ThreeCycle,21,quiz_answer,2020-04-07 16:14:36,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
wdai8,ThreeCycle,32,quiz_answer,2020-04-07 16:14:36,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
zhu24,ThreeCycle,22,quiz_answer,2020-04-07 16:14:42,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
wdai8,ThreeCycle,33,quiz_answer,2020-04-07 16:14:42,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
kding8,IsDag,43,eval_input,2020-04-07 16:14:44,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> B + B -> C + C -> A + D -> A
}",false,,,,,
kding8,IsDag,44,eval_input,2020-04-07 16:14:48,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> B + B -> C + C -> A
}",false,,,,,
wdai8,ThreeCycle,34,quiz_answer,2020-04-07 16:14:48,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
zhu24,ThreeCycle,23,quiz_answer,2020-04-07 16:14:49,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
zhu24,ThreeCycle,24,final_answer,2020-04-07 16:14:51,,,,,,All cycles have and only have 3 nodes.,
wdai8,ThreeCycle,35,final_answer,2020-04-07 16:14:53,,,,,,It all cycles have and only have three nodes.,
kding8,IsDag,45,eval_input,2020-04-07 16:14:55,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> B + B -> C
}",true,,,,,
kfeinbe1,ThreeCycle,16,eval_input,2020-04-07 16:15:00,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C
}",false,,,,,
kding8,IsDag,46,eval_input,2020-04-07 16:15:02,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> A + B -> C
}",false,,,,,
wdai8,IsDag,36,eval_input,2020-04-07 16:15:16,"inst myInst {
  Node = A
        + B
        + C
  edges = A->B + B->C + C->A
}",false,,,,,
kfeinbe1,ThreeCycle,17,eval_input,2020-04-07 16:15:21,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + B->A
}",false,,,,,
kfeinbe1,ThreeCycle,18,eval_input,2020-04-07 16:15:30,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + B->A + C->A
}",false,,,,,
zhu24,IsDag,25,eval_input,2020-04-07 16:15:38,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C + C->A + D->E + E->F + F->D
}",false,,,,,
kfeinbe1,ThreeCycle,19,eval_input,2020-04-07 16:15:46,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + B->A + C->A + B->C
}",true,,,,,
kding8,IsDag,47,eval_input,2020-04-07 16:15:48,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> B + B -> A
}",false,,,,,
wdai8,IsDag,37,eval_input,2020-04-07 16:15:51,"inst myInst {
  Node = A
        + B
        + C
  edges = A->B + B->A
}",false,,,,,
kfeinbe1,ThreeCycle,20,quiz_answer,2020-04-07 16:15:58,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kfeinbe1,ThreeCycle,21,quiz_answer,2020-04-07 16:16:03,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
zhu24,IsDag,26,eval_input,2020-04-07 16:16:08,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A
}",false,,,,,
kfeinbe1,ThreeCycle,22,quiz_answer,2020-04-07 16:16:08,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,false,false,,
kding8,IsDag,48,eval_input,2020-04-07 16:16:11,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> B + B -> C + C -> A
}",false,,,,,
kfeinbe1,ThreeCycle,23,eval_input,2020-04-07 16:16:21,"inst myInst {
  Node = A + B
  edges = A->B
}",false,,,,,
kfeinbe1,ThreeCycle,24,eval_input,2020-04-07 16:16:22,"inst myInst {
  Node = A + B
  edges = A->B
}",false,,,,,
wdai8,IsDag,38,eval_input,2020-04-07 16:16:23,"inst myInst {
  Node = A
        + B
        + C
  edges = A->B + B->A 
}",false,,,,,
kfeinbe1,ThreeCycle,25,eval_input,2020-04-07 16:16:28,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
kfeinbe1,ThreeCycle,26,eval_input,2020-04-07 16:16:32,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
zhu24,IsDag,27,eval_input,2020-04-07 16:16:33,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
wdai8,IsDag,39,eval_input,2020-04-07 16:16:36,"inst myInst {
  Node = A
        + B
        + C
  edges = A->B + B->C 
}",true,,,,,
zhu24,IsDag,28,eval_input,2020-04-07 16:16:39,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
}",true,,,,,
kfeinbe1,ThreeCycle,27,eval_input,2020-04-07 16:16:39,"inst myInst {
  Node = A + B
  edges = A->B + B->A + A->A + B->B
}",false,,,,,
zhu24,IsDag,29,eval_input,2020-04-07 16:16:41,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
}",true,,,,,
zhu24,IsDag,30,eval_input,2020-04-07 16:16:42,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
}",true,,,,,
wdai8,IsDag,40,eval_input,2020-04-07 16:16:44,"inst myInst {
  Node = A
        + B
        + C
  edges = A->B + B->C + C->A
}",false,,,,,
kfeinbe1,ThreeCycle,28,eval_input,2020-04-07 16:16:46,"inst myInst {
  Node = A + B
  edges = A->B + B->A + A->A
}",false,,,,,
kding8,IsDag,49,quiz_answer,2020-04-07 16:16:49,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
zhu24,IsDag,31,eval_input,2020-04-07 16:16:51,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",false,,,,,
kding8,IsDag,50,quiz_answer,2020-04-07 16:16:54,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
kfeinbe1,ThreeCycle,29,eval_input,2020-04-07 16:16:56,"inst myInst {
  Node = A + B
  edges = A->A + B->B
}",false,,,,,
kding8,IsDag,51,quiz_answer,2020-04-07 16:16:57,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
kding8,IsDag,52,quiz_answer,2020-04-07 16:17:04,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
wdai8,IsDag,41,quiz_answer,2020-04-07 16:17:06,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kfeinbe1,ThreeCycle,30,eval_input,2020-04-07 16:17:07,"inst myInst {
  Node = A + B
  edges = A->A + B->B + A->B + B->A
}",false,,,,,
kding8,IsDag,53,quiz_answer,2020-04-07 16:17:09,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
kding8,IsDag,54,quiz_answer,2020-04-07 16:17:13,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,true,false,,
kfeinbe1,ThreeCycle,31,eval_input,2020-04-07 16:17:45,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
wdai8,IsDag,42,quiz_answer,2020-04-07 16:17:58,"inst myInst {
      Node = A
      edges = none
    }",false,1,true,false,,
kfeinbe1,ThreeCycle,32,eval_input,2020-04-07 16:18:04,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
kfeinbe1,ThreeCycle,33,eval_input,2020-04-07 16:18:19,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
kfeinbe1,ThreeCycle,34,eval_input,2020-04-07 16:18:21,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
zhu24,IsDag,32,eval_input,2020-04-07 16:18:27,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
kfeinbe1,ThreeCycle,35,eval_input,2020-04-07 16:18:29,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A + D->A
}",true,,,,,
zhu24,IsDag,33,eval_input,2020-04-07 16:18:41,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + C->B
}",true,,,,,
kfeinbe1,ThreeCycle,36,quiz_answer,2020-04-07 16:18:52,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kfeinbe1,ThreeCycle,37,quiz_answer,2020-04-07 16:18:55,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
kfeinbe1,ThreeCycle,38,quiz_answer,2020-04-07 16:18:57,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
kfeinbe1,ThreeCycle,39,quiz_answer,2020-04-07 16:19:08,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
kfeinbe1,ThreeCycle,40,quiz_answer,2020-04-07 16:19:11,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
kding8,IsDag,55,quiz_answer,2020-04-07 16:19:13,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
zhu24,IsDag,34,quiz_answer,2020-04-07 16:19:17,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kding8,IsDag,56,quiz_answer,2020-04-07 16:19:17,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
kfeinbe1,ThreeCycle,41,quiz_answer,2020-04-07 16:19:18,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
kding8,IsDag,57,quiz_answer,2020-04-07 16:19:22,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
wdai8,IsDag,43,quiz_answer,2020-04-07 16:19:24,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
zhu24,IsDag,35,quiz_answer,2020-04-07 16:19:26,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
kfeinbe1,ThreeCycle,42,quiz_answer,2020-04-07 16:19:26,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
wdai8,IsDag,44,quiz_answer,2020-04-07 16:19:28,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
kding8,IsDag,58,quiz_answer,2020-04-07 16:19:29,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
zhu24,IsDag,36,quiz_answer,2020-04-07 16:19:31,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
wdai8,IsDag,45,quiz_answer,2020-04-07 16:19:32,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
kding8,IsDag,59,quiz_answer,2020-04-07 16:19:34,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
kfeinbe1,ThreeCycle,43,quiz_answer,2020-04-07 16:19:37,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
kfeinbe1,ThreeCycle,44,final_answer,2020-04-07 16:19:38,,,,,,at least one triangle formed with edges,
kding8,IsDag,60,quiz_answer,2020-04-07 16:19:38,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
zhu24,IsDag,37,quiz_answer,2020-04-07 16:19:42,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
wdai8,IsDag,46,quiz_answer,2020-04-07 16:19:43,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
kding8,IsDag,61,quiz_answer,2020-04-07 16:19:44,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
zhu24,IsDag,38,quiz_answer,2020-04-07 16:19:46,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
wdai8,IsDag,47,quiz_answer,2020-04-07 16:19:47,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
zhu24,IsDag,39,quiz_answer,2020-04-07 16:19:50,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
kding8,IsDag,62,quiz_answer,2020-04-07 16:19:51,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",true,7,false,false,,
wdai8,IsDag,48,quiz_answer,2020-04-07 16:19:51,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
zhu24,IsDag,40,quiz_answer,2020-04-07 16:20:07,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
kfeinbe1,IsBipartite,45,eval_input,2020-04-07 16:20:07,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A + D->A
}",false,,,,,
wdai8,IsDag,49,quiz_answer,2020-04-07 16:20:08,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
zhu24,IsDag,41,quiz_answer,2020-04-07 16:20:15,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
wdai8,IsDag,50,quiz_answer,2020-04-07 16:20:15,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
zhu24,IsDag,42,final_answer,2020-04-07 16:20:16,,,,,,The graph should be a directed acyclic graph,
kding8,IsDag,63,quiz_answer,2020-04-07 16:20:17,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kfeinbe1,IsBipartite,46,eval_input,2020-04-07 16:20:17,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
wdai8,IsDag,51,final_answer,2020-04-07 16:20:18,,,,,,Directed acyclic graph,
kding8,IsDag,64,quiz_answer,2020-04-07 16:20:21,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
kding8,IsDag,65,quiz_answer,2020-04-07 16:20:24,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
kding8,IsDag,66,quiz_answer,2020-04-07 16:20:29,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
kding8,IsDag,67,quiz_answer,2020-04-07 16:20:35,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
zhu24,IsBipartite,43,eval_input,2020-04-07 16:20:37,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A
}",true,,,,,
kding8,IsDag,68,quiz_answer,2020-04-07 16:20:40,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
kfeinbe1,IsBipartite,47,eval_input,2020-04-07 16:20:40,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B
}",true,,,,,
zhu24,IsBipartite,44,eval_input,2020-04-07 16:20:46,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",false,,,,,
kding8,IsDag,69,quiz_answer,2020-04-07 16:20:50,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
wdai8,IsBipartite,52,eval_input,2020-04-07 16:20:56,"inst myInst {
  Node = A
        + B
        + C
  edges = A->B + B->A
}",true,,,,,
kding8,IsDag,70,quiz_answer,2020-04-07 16:20:56,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
kding8,IsDag,71,final_answer,2020-04-07 16:20:57,,,,,,direct acrylic  graph,
kding8,ThreeCycle,72,eval_input,2020-04-07 16:21:03,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> B + B -> C + C -> A
}",true,,,,,
wdai8,IsBipartite,53,quiz_answer,2020-04-07 16:21:11,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kding8,ThreeCycle,73,eval_input,2020-04-07 16:21:11,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> B + B -> C + C -> D + D -> A
}",false,,,,,
kfeinbe1,IsBipartite,48,eval_input,2020-04-07 16:21:15,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
wdai8,IsBipartite,54,quiz_answer,2020-04-07 16:21:15,"inst myInst {
      Node = A
      edges = none
    }",false,1,true,false,,
kfeinbe1,IsBipartite,49,eval_input,2020-04-07 16:21:19,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->B
}",true,,,,,
wdai8,IsBipartite,55,final_answer,2020-04-07 16:21:24,,,,,,All cycles have and only have even nodes.,
kding8,ThreeCycle,74,quiz_answer,2020-04-07 16:21:26,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kfeinbe1,IsBipartite,50,eval_input,2020-04-07 16:21:27,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->C
}",false,,,,,
zhu24,IsBipartite,45,quiz_answer,2020-04-07 16:21:27,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kding8,ThreeCycle,75,quiz_answer,2020-04-07 16:21:33,"inst myInst {
      Node = A
      edges = none
    }",true,1,false,false,,
kfeinbe1,IsBipartite,51,eval_input,2020-04-07 16:21:33,"inst myInst {
  Node =C
  edges = C->C
}",false,,,,,
kfeinbe1,IsBipartite,52,eval_input,2020-04-07 16:21:40,"inst myInst {
  Node =C
  edges = C->C
}",false,,,,,
kding8,ThreeCycle,76,eval_input,2020-04-07 16:21:45,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> B
}",false,,,,,
kfeinbe1,IsBipartite,53,eval_input,2020-04-07 16:21:46,"inst myInst {
  Node = A + B
  edges = A->B
}",true,,,,,
kfeinbe1,IsBipartite,54,eval_input,2020-04-07 16:21:53,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",true,,,,,
zhu24,IsBipartite,46,quiz_answer,2020-04-07 16:22:00,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
zhu24,IsBipartite,47,quiz_answer,2020-04-07 16:22:05,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
kfeinbe1,IsBipartite,55,eval_input,2020-04-07 16:22:08,"inst myInst {
  Node = A + B
  edges = A->A
}",false,,,,,
kding8,ThreeCycle,77,quiz_answer,2020-04-07 16:22:08,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kding8,ThreeCycle,78,quiz_answer,2020-04-07 16:22:11,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
kfeinbe1,IsBipartite,56,eval_input,2020-04-07 16:22:14,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",true,,,,,
kding8,ThreeCycle,79,quiz_answer,2020-04-07 16:22:14,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
zhu24,IsBipartite,48,quiz_answer,2020-04-07 16:22:20,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
kding8,ThreeCycle,80,quiz_answer,2020-04-07 16:22:20,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
kding8,ThreeCycle,81,quiz_answer,2020-04-07 16:22:24,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
kfeinbe1,IsBipartite,57,eval_input,2020-04-07 16:22:26,"inst myInst {
  Node = A + B
  edges = A->B + B->A + B->B
}",false,,,,,
kding8,ThreeCycle,82,quiz_answer,2020-04-07 16:22:27,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
zhu24,IsBipartite,49,quiz_answer,2020-04-07 16:22:27,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
kding8,ThreeCycle,83,quiz_answer,2020-04-07 16:22:32,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
zhu24,IsBipartite,50,quiz_answer,2020-04-07 16:22:33,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
kding8,ThreeCycle,84,quiz_answer,2020-04-07 16:22:38,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
kding8,ThreeCycle,85,final_answer,2020-04-07 16:22:39,,,,,,must have one circle containing three nodes,
zhu24,IsBipartite,51,quiz_answer,2020-04-07 16:22:41,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
zhu24,IsBipartite,52,quiz_answer,2020-04-07 16:22:49,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
zhu24,IsBipartite,53,final_answer,2020-04-07 16:22:50,,,,,,All cycles have and only have even number of nodes,
kfeinbe1,IsBipartite,58,eval_input,2020-04-07 16:22:57,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + A->C
}",true,,,,,
kfeinbe1,IsBipartite,59,eval_input,2020-04-07 16:23:11,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",true,,,,,
kfeinbe1,IsBipartite,60,eval_input,2020-04-07 16:23:16,"inst myInst {
  Node = A + B + C
  edges = A->B
}",true,,,,,
kfeinbe1,IsBipartite,61,eval_input,2020-04-07 16:23:26,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
kfeinbe1,IsBipartite,62,eval_input,2020-04-07 16:23:32,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
kfeinbe1,IsBipartite,63,eval_input,2020-04-07 16:24:03,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C
}",true,,,,,
kfeinbe1,IsBipartite,64,eval_input,2020-04-07 16:24:03,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C
}",true,,,,,
kfeinbe1,IsBipartite,65,eval_input,2020-04-07 16:24:22,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C + C->B
}",true,,,,,
kfeinbe1,IsBipartite,66,eval_input,2020-04-07 16:24:34,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C + C->B + C->A
}",false,,,,,
kfeinbe1,IsBipartite,67,eval_input,2020-04-07 16:25:24,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C + C->B + B->A
}",false,,,,,
kfeinbe1,IsBipartite,68,eval_input,2020-04-07 16:25:39,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C + C->B + A->A
}",false,,,,,
kfeinbe1,IsBipartite,69,eval_input,2020-04-07 16:25:45,"inst myInst {
  Node = A + B + C
  edges = A->A
}",false,,,,,
kfeinbe1,IsBipartite,70,eval_input,2020-04-07 16:26:02,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",true,,,,,
kfeinbe1,IsBipartite,71,eval_input,2020-04-07 16:26:16,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
kfeinbe1,IsBipartite,72,eval_input,2020-04-07 16:26:50,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
kfeinbe1,IsBipartite,73,eval_input,2020-04-07 16:27:16,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
kfeinbe1,IsBipartite,74,eval_input,2020-04-07 16:27:24,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->A + D->A
}",false,,,,,
kfeinbe1,IsBipartite,75,quiz_answer,2020-04-07 16:27:31,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kfeinbe1,IsBipartite,76,quiz_answer,2020-04-07 16:27:35,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
kfeinbe1,IsBipartite,77,quiz_answer,2020-04-07 16:27:40,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
kfeinbe1,IsBipartite,78,quiz_answer,2020-04-07 16:27:48,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
kfeinbe1,IsBipartite,79,quiz_answer,2020-04-07 16:27:53,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
kfeinbe1,IsBipartite,80,quiz_answer,2020-04-07 16:28:01,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
kfeinbe1,IsBipartite,81,quiz_answer,2020-04-07 16:28:07,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
kfeinbe1,IsBipartite,82,quiz_answer,2020-04-07 16:28:14,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
kfeinbe1,IsBipartite,83,final_answer,2020-04-07 16:28:14,,,,,,false if there is cycle on odd number of nodes,
kfeinbe1,IsDag,84,eval_input,2020-04-07 16:28:37,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
kfeinbe1,IsDag,85,eval_input,2020-04-07 16:28:42,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
kfeinbe1,IsDag,86,eval_input,2020-04-07 16:28:44,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
kfeinbe1,IsDag,87,eval_input,2020-04-07 16:28:54,"inst myInst {
  Node = A + B
  edges = A->A
}",false,,,,,
kfeinbe1,IsDag,88,eval_input,2020-04-07 16:29:03,"inst myInst {
  Node = A + B
  edges = B->B + A->A
}",false,,,,,
kfeinbe1,IsDag,89,eval_input,2020-04-07 16:29:09,"inst myInst {
  Node = A + B
  edges = A->B
}",true,,,,,
kfeinbe1,IsDag,90,eval_input,2020-04-07 16:29:16,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
kfeinbe1,IsDag,91,eval_input,2020-04-07 16:29:24,"inst myInst {
  Node = A + B
  edges = B->A
}",true,,,,,
kfeinbe1,IsDag,92,eval_input,2020-04-07 16:29:40,"inst myInst {
  Node = A + B
  edges = A->B + B->A + A->A + B->B
}",false,,,,,
kfeinbe1,IsDag,93,eval_input,2020-04-07 16:29:47,"inst myInst {
  Node = A + B
  edges = A->B + B->A + A->A
}",false,,,,,
kfeinbe1,IsDag,94,eval_input,2020-04-07 16:29:54,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + A->A
}",false,,,,,
kfeinbe1,IsDag,95,eval_input,2020-04-07 16:30:01,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",false,,,,,
kfeinbe1,IsDag,96,eval_input,2020-04-07 16:30:09,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
kfeinbe1,IsDag,97,eval_input,2020-04-07 16:30:16,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
kfeinbe1,IsDag,98,eval_input,2020-04-07 16:30:31,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A + A->A
}",false,,,,,
kfeinbe1,IsDag,99,eval_input,2020-04-07 16:30:41,"inst myInst {
  Node = A + B + C
  edges = B->A
}",true,,,,,
kfeinbe1,IsDag,100,eval_input,2020-04-07 16:30:46,"inst myInst {
  Node = A + B + C
  edges = B->A + A->B
}",false,,,,,
kfeinbe1,IsDag,101,eval_input,2020-04-07 16:30:53,"inst myInst {
  Node = A + B + C
  edges = A->A
}",false,,,,,
kfeinbe1,IsDag,102,eval_input,2020-04-07 16:30:56,"inst myInst {
  Node = A + B + C
  edges = A->A
}",false,,,,,
kfeinbe1,IsDag,103,eval_input,2020-04-07 16:31:01,"inst myInst {
  Node = A + B + C + D
  edges = A->A
}",false,,,,,
kfeinbe1,IsDag,104,eval_input,2020-04-07 16:31:07,"inst myInst {
  Node = A + B + C + D
  edges = none
}",true,,,,,
kfeinbe1,IsDag,105,eval_input,2020-04-07 16:31:20,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
kfeinbe1,IsDag,106,eval_input,2020-04-07 16:31:35,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A + A->A + C->B
}",false,,,,,
kfeinbe1,IsDag,107,quiz_answer,2020-04-07 16:31:55,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kfeinbe1,IsDag,108,quiz_answer,2020-04-07 16:31:58,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
kfeinbe1,IsDag,109,quiz_answer,2020-04-07 16:32:00,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
kfeinbe1,IsDag,110,quiz_answer,2020-04-07 16:32:07,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
kfeinbe1,IsDag,111,quiz_answer,2020-04-07 16:32:10,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
kfeinbe1,IsDag,112,quiz_answer,2020-04-07 16:32:14,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
kfeinbe1,IsDag,113,quiz_answer,2020-04-07 16:32:19,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
kfeinbe1,IsDag,114,quiz_answer,2020-04-07 16:32:22,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
kfeinbe1,IsDag,115,final_answer,2020-04-07 16:32:23,,,,,,false if any cycle,
jwang73,ThreeCycle,0,eval_input,2020-04-07 17:48:57,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
jwang73,ThreeCycle,1,eval_input,2020-04-07 17:49:27,"inst myInst {
  Node = A
  edges = none
}",false,,,,,
jwang73,ThreeCycle,2,eval_input,2020-04-07 17:49:32,"inst myInst {
  Node = none
  edges = none
}",false,,,,,
jwang73,ThreeCycle,3,eval_input,2020-04-07 17:49:37,"inst myInst {
  Node = A + B + C + D
  edges = none
}",false,,,,,
jwang73,ThreeCycle,4,eval_input,2020-04-07 17:49:40,"inst myInst {
  Node = A + B + C + D
  edges = A->B
}",false,,,,,
jwang73,ThreeCycle,5,eval_input,2020-04-07 17:49:45,"inst myInst {
  Node = A + B
  edges = A->B
}",false,,,,,
jwang73,ThreeCycle,6,eval_input,2020-04-07 17:49:49,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
jwang73,ThreeCycle,7,eval_input,2020-04-07 17:50:04,"inst myInst {
  Node = none
  edges = none
}",false,,,,,
jwang73,ThreeCycle,8,eval_input,2020-04-07 17:50:11,"inst myInst {
  Node = A + B
  edges = A->A
}",false,,,,,
jwang73,ThreeCycle,9,eval_input,2020-04-07 17:50:14,"inst myInst {
  Node = A + B
  edges = A->A + B->B
}",false,,,,,
jwang73,ThreeCycle,10,eval_input,2020-04-07 17:50:17,"inst myInst {
  Node = A + B
  edges = A->B
}",false,,,,,
jwang73,ThreeCycle,11,eval_input,2020-04-07 17:50:22,"inst myInst {
  Node = A + B
  edges = B->A
}",false,,,,,
jwang73,ThreeCycle,12,eval_input,2020-04-07 17:50:31,"inst myInst {
  Node = A + B
  edges = B->A + A->B + A->A + B->B
}",false,,,,,
jwang73,ThreeCycle,13,eval_input,2020-04-07 17:50:44,"inst myInst {
  Node = A + B + C
  edges = B->A + A->B + A->A + B->B
}",false,,,,,
jwang73,ThreeCycle,14,eval_input,2020-04-07 17:51:01,"inst myInst {
  Node = A + B + C
  edges = B->A + A->B + A->A + B->B
}",false,,,,,
jwang73,ThreeCycle,15,eval_input,2020-04-07 17:51:20,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",false,,,,,
jwang73,ThreeCycle,16,eval_input,2020-04-07 17:51:24,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->C
}",false,,,,,
jwang73,ThreeCycle,17,eval_input,2020-04-07 17:51:51,"inst myInst {
  Node = A + B
  edges = A->B + A->A
}",false,,,,,
jwang73,ThreeCycle,18,eval_input,2020-04-07 17:51:56,"inst myInst {
  Node = A + B
  edges = B->B + A->A
}",false,,,,,
jwang73,ThreeCycle,19,eval_input,2020-04-07 17:51:57,"inst myInst {
  Node = A + B
  edges = B->B + A->B
}",false,,,,,
jwang73,ThreeCycle,20,eval_input,2020-04-07 17:52:00,"inst myInst {
  Node = A + B
  edges = B->B + B->A
}",false,,,,,
jwang73,ThreeCycle,21,eval_input,2020-04-07 17:52:04,"inst myInst {
  Node = A + B
  edges = B->B + B->A + A->A
}",false,,,,,
jwang73,ThreeCycle,22,eval_input,2020-04-07 17:52:06,"inst myInst {
  Node = A + B
  edges = B->B + B->A + A->B
}",false,,,,,
jwang73,ThreeCycle,23,quiz_answer,2020-04-07 17:52:22,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
jwang73,ThreeCycle,24,quiz_answer,2020-04-07 17:52:26,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
jwang73,ThreeCycle,25,quiz_answer,2020-04-07 17:52:28,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
jwang73,ThreeCycle,26,quiz_answer,2020-04-07 17:52:30,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
jwang73,ThreeCycle,27,quiz_answer,2020-04-07 17:52:32,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,true,false,,
jwang73,ThreeCycle,28,eval_input,2020-04-07 17:52:42,"inst myInst {
  Node = A + B
  edges = B->B + B->A + A->B
}",false,,,,,
jwang73,ThreeCycle,29,eval_input,2020-04-07 17:52:54,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",true,,,,,
jwang73,ThreeCycle,30,eval_input,2020-04-07 17:53:00,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
jwang73,ThreeCycle,31,eval_input,2020-04-07 17:53:07,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",true,,,,,
jwang73,ThreeCycle,32,eval_input,2020-04-07 17:53:14,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A + C->B
}",true,,,,,
jwang73,ThreeCycle,33,eval_input,2020-04-07 17:53:27,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A + C->C
}",true,,,,,
jwang73,ThreeCycle,34,eval_input,2020-04-07 17:53:33,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->C
}",false,,,,,
jwang73,ThreeCycle,35,eval_input,2020-04-07 17:53:37,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",false,,,,,
jwang73,ThreeCycle,36,eval_input,2020-04-07 17:53:44,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + A->C + C->B
}",true,,,,,
jwang73,ThreeCycle,37,eval_input,2020-04-07 17:53:59,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
jwang73,ThreeCycle,38,eval_input,2020-04-07 17:54:16,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
jwang73,ThreeCycle,39,eval_input,2020-04-07 17:54:34,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D
}",false,,,,,
jwang73,ThreeCycle,40,eval_input,2020-04-07 17:54:37,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->A
}",true,,,,,
jwang73,ThreeCycle,41,eval_input,2020-04-07 17:54:48,"inst myInst {
  Node = A + B + C + D + E
  edges = C->D + D->E + E->C
}",true,,,,,
jwang73,ThreeCycle,42,eval_input,2020-04-07 17:54:58,"inst myInst {
  Node = A + B + C + D + E
  edges = C->D + D->E + E->C + A->B + B->C
}",true,,,,,
jwang73,ThreeCycle,43,eval_input,2020-04-07 17:55:02,"inst myInst {
  Node = A + B + C + D + E
  edges = C->D + D->E + E->C + A->B + B->A
}",true,,,,,
jwang73,ThreeCycle,44,eval_input,2020-04-07 17:55:18,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->A + C->D + D->E + E->A
}",true,,,,,
jwang73,ThreeCycle,45,eval_input,2020-04-07 17:55:23,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->A
}",true,,,,,
jwang73,ThreeCycle,46,eval_input,2020-04-07 17:55:36,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D
}",false,,,,,
jwang73,ThreeCycle,47,eval_input,2020-04-07 17:55:39,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->A
}",true,,,,,
jwang73,ThreeCycle,48,eval_input,2020-04-07 17:56:00,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->A + C->D + D->E + E->C
}",true,,,,,
jwang73,ThreeCycle,49,eval_input,2020-04-07 17:56:12,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->A + D->E + E->F + F->D
}",true,,,,,
jwang73,ThreeCycle,50,eval_input,2020-04-07 17:56:17,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->A
}",true,,,,,
jwang73,ThreeCycle,51,quiz_answer,2020-04-07 17:56:30,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
jwang73,ThreeCycle,52,quiz_answer,2020-04-07 17:56:33,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
jwang73,ThreeCycle,53,quiz_answer,2020-04-07 17:56:35,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
jwang73,ThreeCycle,54,quiz_answer,2020-04-07 17:56:40,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
jwang73,ThreeCycle,55,quiz_answer,2020-04-07 17:56:43,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
jwang73,ThreeCycle,56,quiz_answer,2020-04-07 17:56:48,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
jwang73,ThreeCycle,57,quiz_answer,2020-04-07 17:56:54,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
jwang73,ThreeCycle,58,quiz_answer,2020-04-07 17:57:00,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
jwang73,ThreeCycle,59,final_answer,2020-04-07 17:57:01,,,,,,exists a loop of exactly three nodes?,
jwang73,IsDag,60,eval_input,2020-04-07 17:57:15,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->A
}",false,,,,,
jwang73,IsDag,61,eval_input,2020-04-07 17:57:30,"inst myInst {
  Node = A + B + C
  edges = none
}",true,,,,,
jwang73,IsDag,62,eval_input,2020-04-07 17:57:34,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
jwang73,IsDag,63,eval_input,2020-04-07 17:57:38,"inst myInst {
  Node = A + B + C
  edges = none
}",true,,,,,
jwang73,IsDag,64,eval_input,2020-04-07 17:57:40,"inst myInst {
  Node = A + B + C
  edges = A->A
}",false,,,,,
jwang73,IsDag,65,eval_input,2020-04-07 17:57:43,"inst myInst {
  Node = A + B + C
  edges = A->B
}",true,,,,,
jwang73,IsDag,66,eval_input,2020-04-07 17:57:47,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",false,,,,,
jwang73,IsDag,67,eval_input,2020-04-07 17:57:54,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",false,,,,,
jwang73,IsDag,68,eval_input,2020-04-07 17:57:59,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
jwang73,IsDag,69,eval_input,2020-04-07 17:58:03,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->C
}",false,,,,,
jwang73,IsDag,70,eval_input,2020-04-07 17:58:06,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
jwang73,IsDag,71,eval_input,2020-04-07 17:58:13,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B
}",true,,,,,
jwang73,IsDag,72,quiz_answer,2020-04-07 17:58:27,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
jwang73,IsDag,73,quiz_answer,2020-04-07 17:58:30,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
jwang73,IsDag,74,quiz_answer,2020-04-07 17:58:32,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
jwang73,IsDag,75,quiz_answer,2020-04-07 17:58:41,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
jwang73,IsDag,76,quiz_answer,2020-04-07 17:58:45,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
jwang73,IsDag,77,quiz_answer,2020-04-07 17:58:50,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
jwang73,IsDag,78,quiz_answer,2020-04-07 17:59:02,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
jwang73,IsDag,79,quiz_answer,2020-04-07 17:59:05,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
jwang73,IsDag,80,final_answer,2020-04-07 17:59:06,,,,,,no cycles in graph,
jwang73,IsBipartite,81,eval_input,2020-04-07 17:59:18,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B
}",true,,,,,
jwang73,IsBipartite,82,eval_input,2020-04-07 17:59:21,"inst myInst {
  Node = A + B + C
  edges = none
}",true,,,,,
jwang73,IsBipartite,83,eval_input,2020-04-07 17:59:28,"inst myInst {
  Node = A + B + C
  edges = A->A
}",false,,,,,
jwang73,IsBipartite,84,eval_input,2020-04-07 17:59:35,"inst myInst {
  Node = A + B + C
  edges = A->A + B->A
}",false,,,,,
jwang73,IsBipartite,85,eval_input,2020-04-07 17:59:39,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",true,,,,,
jwang73,IsBipartite,86,eval_input,2020-04-07 17:59:45,"inst myInst {
  Node = A + B + C
  edges = A->B
}",true,,,,,
jwang73,IsBipartite,87,eval_input,2020-04-07 17:59:47,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",true,,,,,
jwang73,IsBipartite,88,eval_input,2020-04-07 17:59:50,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + A->A
}",false,,,,,
jwang73,IsBipartite,89,eval_input,2020-04-07 17:59:58,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + B->C
}",true,,,,,
jwang73,IsBipartite,90,eval_input,2020-04-07 18:00:02,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + B->C + C->B
}",true,,,,,
jwang73,IsBipartite,91,eval_input,2020-04-07 18:00:07,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + B->C + C->B + A->C + C->A
}",false,,,,,
jwang73,IsBipartite,92,eval_input,2020-04-07 18:00:15,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + B->C + C->B + A->C
}",false,,,,,
jwang73,IsBipartite,93,eval_input,2020-04-07 18:00:26,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + B->C + C->B
}",true,,,,,
jwang73,IsBipartite,94,eval_input,2020-04-07 18:01:08,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
jwang73,IsBipartite,95,eval_input,2020-04-07 18:01:11,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
jwang73,IsBipartite,96,eval_input,2020-04-07 18:01:16,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C
}",true,,,,,
jwang73,IsBipartite,97,eval_input,2020-04-07 18:01:23,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C + C->A
}",false,,,,,
jwang73,IsBipartite,98,eval_input,2020-04-07 18:01:41,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C 
}",true,,,,,
jwang73,IsBipartite,99,eval_input,2020-04-07 18:01:57,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C + A->A
}",false,,,,,
jwang73,IsBipartite,100,eval_input,2020-04-07 18:02:02,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C
}",true,,,,,
jwang73,IsBipartite,101,eval_input,2020-04-07 18:02:05,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",true,,,,,
jwang73,IsBipartite,102,eval_input,2020-04-07 18:02:14,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
jwang73,IsBipartite,103,eval_input,2020-04-07 18:02:31,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
jwang73,IsBipartite,104,eval_input,2020-04-07 18:02:36,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->B
}",false,,,,,
jwang73,IsBipartite,105,eval_input,2020-04-07 18:02:38,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->C
}",true,,,,,
jwang73,IsBipartite,106,eval_input,2020-04-07 18:02:41,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
jwang73,IsBipartite,107,quiz_answer,2020-04-07 18:02:52,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
jwang73,IsBipartite,108,quiz_answer,2020-04-07 18:02:54,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
jwang73,IsBipartite,109,quiz_answer,2020-04-07 18:02:57,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
jwang73,IsBipartite,110,quiz_answer,2020-04-07 18:03:06,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
jwang73,IsBipartite,111,quiz_answer,2020-04-07 18:03:09,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
jwang73,IsBipartite,112,quiz_answer,2020-04-07 18:03:14,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
jwang73,IsBipartite,113,quiz_answer,2020-04-07 18:03:19,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
jwang73,IsBipartite,114,quiz_answer,2020-04-07 18:03:21,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
jwang73,IsBipartite,115,final_answer,2020-04-07 18:03:22,,,,,,no cycles with an odd number of nodes,
asriva11,ThreeCycle,0,eval_input,2020-04-07 21:13:47,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
asriva11,ThreeCycle,1,eval_input,2020-04-07 21:14:06,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",false,,,,,
asriva11,ThreeCycle,2,eval_input,2020-04-07 21:14:09,"inst myInst {
  Node = A
       + B
       + C
  edges = A->C
}",false,,,,,
asriva11,ThreeCycle,3,eval_input,2020-04-07 21:14:16,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
}",false,,,,,
asriva11,ThreeCycle,4,eval_input,2020-04-07 21:14:23,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",true,,,,,
asriva11,ThreeCycle,5,eval_input,2020-04-07 21:14:28,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + C->A
}",false,,,,,
asriva11,ThreeCycle,6,eval_input,2020-04-07 21:14:32,"inst myInst {
  Node = A
       + B
       + C
  edges = A->C + C->A
}",false,,,,,
asriva11,ThreeCycle,7,eval_input,2020-04-07 21:14:49,"inst myInst {
  Node = A
       + C
  edges = A->C + C->A
}",false,,,,,
asriva11,ThreeCycle,8,eval_input,2020-04-07 21:15:05,"inst myInst {
  Node = A
       + B
       + C
  edges = A->C + C->B + B->A
}",true,,,,,
asriva11,ThreeCycle,9,eval_input,2020-04-07 21:15:12,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->C + C->B + B->A
}",true,,,,,
asriva11,ThreeCycle,10,eval_input,2020-04-07 21:15:34,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
asriva11,ThreeCycle,11,eval_input,2020-04-07 21:16:35,"inst myInst {
  Node = none
  edges = none
}",false,,,,,
asriva11,ThreeCycle,12,eval_input,2020-04-07 21:16:56,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->A
}",false,,,,,
asriva11,ThreeCycle,13,eval_input,2020-04-07 21:17:45,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->B
}",false,,,,,
asriva11,ThreeCycle,14,eval_input,2020-04-07 21:17:54,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->B + B->A
}",false,,,,,
asriva11,ThreeCycle,15,quiz_answer,2020-04-07 21:18:42,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
asriva11,ThreeCycle,16,quiz_answer,2020-04-07 21:18:49,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
asriva11,ThreeCycle,17,quiz_answer,2020-04-07 21:18:54,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
asriva11,ThreeCycle,18,quiz_answer,2020-04-07 21:19:01,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
asriva11,ThreeCycle,19,quiz_answer,2020-04-07 21:19:06,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
asriva11,ThreeCycle,20,quiz_answer,2020-04-07 21:19:10,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
asriva11,ThreeCycle,21,quiz_answer,2020-04-07 21:19:17,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
asriva11,ThreeCycle,22,quiz_answer,2020-04-07 21:19:22,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
asriva11,ThreeCycle,23,final_answer,2020-04-07 21:19:24,,,,,,A predicate that returns true if there is a cycle with only three nodes,
asriva11,IsDag,24,eval_input,2020-04-07 21:19:44,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->B + B->A
}",false,,,,,
asriva11,IsDag,25,eval_input,2020-04-07 21:19:54,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
asriva11,IsDag,26,eval_input,2020-04-07 21:20:01,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
asriva11,IsDag,27,eval_input,2020-04-07 21:20:05,"inst myInst {
  Node = A + B
  edges = none
}",true,,,,,
asriva11,IsDag,28,eval_input,2020-04-07 21:20:08,"inst myInst {
  Node = A + B + C
  edges = none
}",true,,,,,
asriva11,IsDag,29,eval_input,2020-04-07 21:20:13,"inst myInst {
  Node = A + B 
  edges = A->B
}",true,,,,,
asriva11,IsDag,30,eval_input,2020-04-07 21:20:18,"inst myInst {
  Node = A + B 
  edges = A->B + B->A
}",false,,,,,
asriva11,IsDag,31,eval_input,2020-04-07 21:20:27,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
asriva11,IsDag,32,eval_input,2020-04-07 21:20:31,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C
}",true,,,,,
asriva11,IsDag,33,quiz_answer,2020-04-07 21:20:52,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
asriva11,IsDag,34,eval_input,2020-04-07 21:21:03,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C
}",true,,,,,
asriva11,IsDag,35,quiz_answer,2020-04-07 21:21:17,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
asriva11,IsDag,36,quiz_answer,2020-04-07 21:21:21,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
asriva11,IsDag,37,quiz_answer,2020-04-07 21:21:27,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
asriva11,IsDag,38,quiz_answer,2020-04-07 21:21:36,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
asriva11,IsDag,39,quiz_answer,2020-04-07 21:21:40,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
asriva11,IsDag,40,quiz_answer,2020-04-07 21:21:49,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
asriva11,IsDag,41,quiz_answer,2020-04-07 21:22:00,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
asriva11,IsDag,42,quiz_answer,2020-04-07 21:22:06,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
asriva11,IsDag,43,final_answer,2020-04-07 21:22:07,,,,,,predicate returns true if there are no cycles, else false
asriva11,IsBipartite,44,eval_input,2020-04-07 21:22:18,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C
}",true,,,,,
asriva11,IsBipartite,45,eval_input,2020-04-07 21:22:31,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C + C->A
}",false,,,,,
asriva11,IsBipartite,46,eval_input,2020-04-07 21:22:37,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
asriva11,IsBipartite,47,eval_input,2020-04-07 21:22:39,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
asriva11,IsBipartite,48,eval_input,2020-04-07 21:22:42,"inst myInst {
  Node = A + B
  edges = none
}",true,,,,,
asriva11,IsBipartite,49,eval_input,2020-04-07 21:22:47,"inst myInst {
  Node = A + B
  edges = A->B
}",true,,,,,
asriva11,IsBipartite,50,eval_input,2020-04-07 21:22:53,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",true,,,,,
asriva11,IsBipartite,51,eval_input,2020-04-07 21:23:05,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
asriva11,IsBipartite,52,quiz_answer,2020-04-07 21:23:51,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
asriva11,IsBipartite,53,eval_input,2020-04-07 21:23:57,"inst myInst {
  Node = A + B + C
  edges = A->A
}",false,,,,,
asriva11,IsBipartite,54,eval_input,2020-04-07 21:24:09,"inst myInst {
  Node = A + B + C
  edges = A->A + A->B
}",false,,,,,
asriva11,IsBipartite,55,eval_input,2020-04-07 21:24:14,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C
}",true,,,,,
asriva11,IsBipartite,56,quiz_answer,2020-04-07 21:25:29,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
asriva11,IsBipartite,57,quiz_answer,2020-04-07 21:25:33,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
asriva11,IsBipartite,58,quiz_answer,2020-04-07 21:25:40,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
asriva11,IsBipartite,59,quiz_answer,2020-04-07 21:25:46,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
asriva11,IsBipartite,60,quiz_answer,2020-04-07 21:25:50,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
asriva11,IsBipartite,61,quiz_answer,2020-04-07 21:25:55,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
asriva11,IsBipartite,62,quiz_answer,2020-04-07 21:25:59,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,true,false,,
asriva11,IsBipartite,63,eval_input,2020-04-07 21:26:31,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
asriva11,IsBipartite,64,eval_input,2020-04-07 21:26:43,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
asriva11,IsBipartite,65,quiz_answer,2020-04-07 21:27:09,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
asriva11,IsBipartite,66,quiz_answer,2020-04-07 21:27:29,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
asriva11,IsBipartite,67,quiz_answer,2020-04-07 21:27:33,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
asriva11,IsBipartite,68,quiz_answer,2020-04-07 21:27:38,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
asriva11,IsBipartite,69,quiz_answer,2020-04-07 21:27:44,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
asriva11,IsBipartite,70,quiz_answer,2020-04-07 21:27:48,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
asriva11,IsBipartite,71,quiz_answer,2020-04-07 21:27:52,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
asriva11,IsBipartite,72,quiz_answer,2020-04-07 21:28:00,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
asriva11,IsBipartite,73,quiz_answer,2020-04-07 21:28:04,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
asriva11,IsBipartite,74,final_answer,2020-04-07 21:28:05,,,,,,"predicate returns true if there are no cycles, or cycles with even number of nodes; else false",
okansper,IsDag,0,eval_input,2020-04-07 21:43:19,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
okansper,IsDag,1,eval_input,2020-04-07 21:43:33,"inst myInst {
  Node = A
       + B
      
  edges = none
}",true,,,,,
okansper,IsDag,2,eval_input,2020-04-07 21:43:37,"inst myInst {
  Node = A
      
      
  edges = none
}",true,,,,,
okansper,IsDag,3,eval_input,2020-04-07 21:43:41,"inst myInst {
  Node = none
      
      
  edges = none
}",true,,,,,
okansper,IsDag,4,eval_input,2020-04-07 21:43:52,"inst myInst {
  Node = A + B + C + D
  edges = none
}",true,,,,,
okansper,IsDag,5,eval_input,2020-04-07 21:44:19,"inst myInst {
  Node = A + B + C + D
  edges = A->B
}",true,,,,,
okansper,IsDag,6,eval_input,2020-04-07 21:44:27,"inst myInst {
  Node = A + B + C + D
  edges = A->B + A-> C
}",true,,,,,
okansper,IsDag,7,eval_input,2020-04-07 21:44:38,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + A->A
}",false,,,,,
okansper,IsDag,8,eval_input,2020-04-07 21:44:43,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + B->A
}",false,,,,,
okansper,IsDag,9,eval_input,2020-04-07 21:44:59,"inst myInst {
  Node = A + B + C
  edges = A->C + B->A
}",true,,,,,
okansper,IsDag,10,eval_input,2020-04-07 21:45:04,"inst myInst {
  Node = A + B + C
  edges = A->C + C->A
}",false,,,,,
okansper,IsDag,11,eval_input,2020-04-07 21:45:20,"inst myInst {
  Node = A + B + C
  edges = A->C + C->A + C->C
}",false,,,,,
okansper,IsDag,12,eval_input,2020-04-07 21:45:32,"inst myInst {
  Node = A + B + C
  edges = A->C + C->B + B->A
}",false,,,,,
okansper,IsDag,13,eval_input,2020-04-07 21:46:07,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
okansper,IsDag,14,eval_input,2020-04-07 21:46:14,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->B
}",false,,,,,
okansper,IsDag,15,eval_input,2020-04-07 21:46:34,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->B
}",false,,,,,
okansper,IsDag,16,eval_input,2020-04-07 21:46:43,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + D->B
}",true,,,,,
okansper,IsDag,17,quiz_answer,2020-04-07 21:49:16,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
okansper,IsDag,18,quiz_answer,2020-04-07 21:49:21,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
okansper,IsDag,19,quiz_answer,2020-04-07 21:49:26,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
okansper,IsDag,20,quiz_answer,2020-04-07 21:49:36,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
okansper,IsDag,21,quiz_answer,2020-04-07 21:49:41,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
okansper,IsDag,22,quiz_answer,2020-04-07 21:49:47,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
okansper,IsDag,23,quiz_answer,2020-04-07 21:49:58,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
okansper,IsDag,24,quiz_answer,2020-04-07 21:50:13,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
okansper,IsDag,25,final_answer,2020-04-07 21:50:15,,,,,,"I think it's checking to see whether the instance is acyclic. For example, reflexive and symmetric edge relations produce FALSE, as do edge relations that make a cycle, like A->B + B->C + C->A",
okansper,IsBipartite,26,eval_input,2020-04-07 21:50:31,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + D->B
}",true,,,,,
okansper,IsBipartite,27,eval_input,2020-04-07 21:50:58,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + D->B + B->A
}",true,,,,,
okansper,IsBipartite,28,eval_input,2020-04-07 21:51:21,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + D->B + B->A + B->D
}",true,,,,,
okansper,IsBipartite,29,eval_input,2020-04-07 21:51:44,"inst myInst {
  Node = A + B + C + D
  edges = A->A
}",false,,,,,
okansper,IsBipartite,30,eval_input,2020-04-07 21:51:54,"inst myInst {
  Node = A + B + C + D
  edges = A->B
}",true,,,,,
okansper,IsBipartite,31,eval_input,2020-04-07 21:55:26,"inst myInst {
  Node = A + B + C + D
  edges = A->B
}",true,,,,,
okansper,IsBipartite,32,eval_input,2020-04-07 21:55:31,"inst myInst {
  Node = A + B + C + D
  edges = B->B
}",false,,,,,
okansper,IsBipartite,33,eval_input,2020-04-07 21:55:37,"inst myInst {
  Node = B
  edges = B->B
}",false,,,,,
okansper,IsBipartite,34,eval_input,2020-04-07 21:55:45,"inst myInst {
  Node = A+B
  edges = B->A
}",true,,,,,
okansper,IsBipartite,35,eval_input,2020-04-07 21:55:53,"inst myInst {
  Node = A+B+C+D
  edges = B->C
}",true,,,,,
okansper,IsBipartite,36,eval_input,2020-04-07 21:56:08,"inst myInst {
  Node = A+B+C+D
  edges = B->C + C->D
}",true,,,,,
okansper,IsBipartite,37,eval_input,2020-04-07 21:56:33,"inst myInst {
  Node = A+B+C+D
  edges = B->C + C->D + D->C + D->A + D->B
}",false,,,,,
okansper,IsBipartite,38,eval_input,2020-04-07 21:57:23,"inst myInst {
  Node = A+B+C+D
  edges = B->C + C->D + D->C + D->A
}",true,,,,,
okansper,IsBipartite,39,eval_input,2020-04-07 21:58:22,"inst myInst {
  Node = A+B+C+D
  edges = B->C + C->D
}",true,,,,,
okansper,IsBipartite,40,eval_input,2020-04-07 21:58:45,"inst myInst {
  Node = A+B+C+D
  edges = B->C + C->D + D->B
}",false,,,,,
okansper,ThreeCycle,41,eval_input,2020-04-07 21:59:33,"inst myInst {
  Node = A+B+C+D
  edges = B->C + C->D + D->B
}",true,,,,,
okansper,ThreeCycle,42,eval_input,2020-04-07 21:59:53,"inst myInst {
  Node = A+B+C+D
  edges = B->C + C->D + D->B + D->C
}",true,,,,,
okansper,ThreeCycle,43,eval_input,2020-04-07 22:00:01,"inst myInst {
  Node = A+B+C+D
  edges = B->C + C->D + D->B + D->C + D->D
}",true,,,,,
okansper,ThreeCycle,44,eval_input,2020-04-07 22:00:33,"inst myInst {
  Node = A+B+C+D
  edges = B->D + C->D + D->B + A->D
}",false,,,,,
okansper,ThreeCycle,45,eval_input,2020-04-07 22:00:40,"inst myInst {
  Node = A+B+C+D
  edges = B->D + C->D + A->D
}",false,,,,,
okansper,ThreeCycle,46,eval_input,2020-04-07 22:00:57,"inst myInst {
  Node = A+B+C+D
  edges = B->D + C->D
}",false,,,,,
okansper,ThreeCycle,47,eval_input,2020-04-07 22:01:08,"inst myInst {
  Node = A+B+C+D
  edges = B->D + D->D
}",false,,,,,
okansper,ThreeCycle,48,eval_input,2020-04-07 22:01:31,"inst myInst {
  Node = A+B+C+D
  edges = B->D + B->A
}",false,,,,,
okansper,ThreeCycle,49,eval_input,2020-04-07 22:02:27,"inst myInst {
  Node = A+B+C+D
  edges = B->D + B->C
}",false,,,,,
okansper,ThreeCycle,50,eval_input,2020-04-07 22:02:40,"inst myInst {
  Node = A+B+C+D
  edges = D->C + B->C
}",false,,,,,
okansper,ThreeCycle,51,quiz_answer,2020-04-07 22:03:55,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
okansper,ThreeCycle,52,quiz_answer,2020-04-07 22:04:01,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
okansper,ThreeCycle,53,quiz_answer,2020-04-07 22:04:08,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,false,false,,
okansper,ThreeCycle,54,final_answer,2020-04-07 22:04:18,,,,,,"It is testing whether the instance is bijective (I think that's what it's called? i.e., as a function, each input corresponds to one and only one output, and each output can only be returned by one input)",
okansper,IsBipartite,55,eval_input,2020-04-07 22:04:43,"inst myInst {
  Node = A+B+C+D
  edges = D->C + B->C
}",true,,,,,
okansper,IsBipartite,56,eval_input,2020-04-07 22:04:58,"inst myInst {
  Node = A+B+C+D+E
  edges = D->C + B->C + C->A + C->E
}",true,,,,,
okansper,IsBipartite,57,eval_input,2020-04-07 22:05:03,"inst myInst {
  Node = A+B+C+D+E
  edges = D->C + B->C + C->A + C->B
}",true,,,,,
okansper,IsBipartite,58,eval_input,2020-04-07 22:05:30,"inst myInst {
  Node = A+B+C+D
  edges = D->C + B->C + A->C + C->C
}",false,,,,,
okansper,IsBipartite,59,eval_input,2020-04-07 22:05:40,"inst myInst {
  Node = A+B+C+D
  edges = D->C + B->C + C->C
}",false,,,,,
okansper,IsBipartite,60,eval_input,2020-04-07 22:05:46,"inst myInst {
  Node = A+B+C+D
  edges = C->C
}",false,,,,,
okansper,IsBipartite,61,eval_input,2020-04-07 22:05:51,"inst myInst {
  Node = A+B+C+D
  edges = A->C
}",true,,,,,
okansper,IsBipartite,62,eval_input,2020-04-07 22:05:59,"inst myInst {
  Node = A+B+C+D
  edges = none
}",true,,,,,
okansper,IsBipartite,63,eval_input,2020-04-07 22:06:08,"inst myInst {
  Node = A+B+C+D
  edges = A->B + B->A
}",true,,,,,
okansper,IsBipartite,64,eval_input,2020-04-07 22:06:12,"inst myInst {
  Node = A+B+C+D
  edges = A->B + B->B
}",false,,,,,
okansper,IsBipartite,65,eval_input,2020-04-07 22:06:35,"inst myInst {
  Node = A+B+C+D
  edges = A->B + B->C + C->D + D->A + C->A + C->B 
}",false,,,,,
okansper,IsBipartite,66,eval_input,2020-04-07 22:07:09,"inst myInst {
  Node = A+B+C+D+E
  edges = A->B + B->C + C->D + D->A + C->A + C->B 
}",false,,,,,
okansper,IsBipartite,67,eval_input,2020-04-07 22:07:17,"inst myInst {
  Node = A+B+C+D+E
  edges = A->B + B->C + C->D + D->A + C->A + C->B + D->E 
}",false,,,,,
okansper,IsBipartite,68,eval_input,2020-04-07 22:07:37,"inst myInst {
  Node = A+B+C+D
  edges = A->B + B->C + C->D + D->A + C->A + C->B + D->B 
}",false,,,,,
okansper,IsBipartite,69,eval_input,2020-04-07 22:09:29,"inst myInst {
  Node = A+B+C
  edges = A->B + B->C + C->A
}",false,,,,,
kkawamu1,IsDag,0,eval_input,2020-04-08 05:13:42,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
kkawamu1,IsDag,1,eval_input,2020-04-08 05:13:51,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
kkawamu1,IsDag,2,eval_input,2020-04-08 05:13:59,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B -> C
}",true,,,,,
kkawamu1,IsDag,3,eval_input,2020-04-08 05:14:08,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B -> C + C-> A
}",false,,,,,
kkawamu1,IsDag,4,eval_input,2020-04-08 05:14:28,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B -> C + B -> A
}",false,,,,,
kkawamu1,IsDag,5,eval_input,2020-04-08 05:14:38,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B -> C + C->B
}",false,,,,,
kkawamu1,IsDag,6,eval_input,2020-04-08 05:14:43,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B -> C + C -> B
}",false,,,,,
kkawamu1,IsDag,7,eval_input,2020-04-08 05:14:50,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + C -> B
}",true,,,,,
kkawamu1,IsDag,8,eval_input,2020-04-08 05:15:15,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = none
}",true,,,,,
kkawamu1,IsDag,9,eval_input,2020-04-08 05:15:21,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B
}",true,,,,,
kkawamu1,IsDag,10,eval_input,2020-04-08 05:15:27,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> A
}",false,,,,,
kkawamu1,IsDag,11,eval_input,2020-04-08 05:15:31,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> C
}",true,,,,,
kkawamu1,IsDag,12,eval_input,2020-04-08 05:15:34,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> D
}",true,,,,,
kkawamu1,IsDag,13,eval_input,2020-04-08 05:15:42,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> D + D -> A
}",false,,,,,
kkawamu1,IsDag,14,eval_input,2020-04-08 05:15:47,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> D + D -> B
}",false,,,,,
kkawamu1,IsDag,15,eval_input,2020-04-08 05:15:50,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> D + D -> C
}",true,,,,,
kkawamu1,IsDag,16,eval_input,2020-04-08 05:15:57,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> D + D -> C + C -> A
}",false,,,,,
kkawamu1,IsDag,17,quiz_answer,2020-04-08 05:16:51,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kkawamu1,IsDag,18,quiz_answer,2020-04-08 05:17:01,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
kkawamu1,IsDag,19,quiz_answer,2020-04-08 05:17:08,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
kkawamu1,IsDag,20,quiz_answer,2020-04-08 05:17:23,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
kkawamu1,IsDag,21,quiz_answer,2020-04-08 05:17:32,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
kkawamu1,IsDag,22,quiz_answer,2020-04-08 05:17:38,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
kkawamu1,IsDag,23,quiz_answer,2020-04-08 05:17:49,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
kkawamu1,IsDag,24,quiz_answer,2020-04-08 05:17:56,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
kkawamu1,IsDag,25,final_answer,2020-04-08 05:18:01,,,,,,no cycle,
kkawamu1,IsBipartite,26,eval_input,2020-04-08 05:18:24,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> D + D -> C + C -> A
}",true,,,,,
kkawamu1,IsBipartite,27,eval_input,2020-04-08 05:18:38,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = none
}",true,,,,,
kkawamu1,IsBipartite,28,eval_input,2020-04-08 05:18:47,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B 
}",true,,,,,
kkawamu1,IsBipartite,29,eval_input,2020-04-08 05:18:55,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> A
}",true,,,,,
kkawamu1,IsBipartite,30,eval_input,2020-04-08 05:19:30,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> D + D -> C 
}",true,,,,,
kkawamu1,IsBipartite,31,eval_input,2020-04-08 05:19:38,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> D + D -> C
}",true,,,,,
kkawamu1,IsBipartite,32,eval_input,2020-04-08 05:19:42,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> D
}",true,,,,,
kkawamu1,IsBipartite,33,eval_input,2020-04-08 05:19:50,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> A + B -> B
}",false,,,,,
kkawamu1,IsBipartite,34,eval_input,2020-04-08 05:19:54,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> A
}",false,,,,,
kkawamu1,IsBipartite,35,eval_input,2020-04-08 05:19:59,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = none
}",true,,,,,
kkawamu1,IsBipartite,36,eval_input,2020-04-08 05:20:05,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> A
}",false,,,,,
kkawamu1,IsBipartite,37,eval_input,2020-04-08 05:20:10,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> A + B->B
}",false,,,,,
kkawamu1,IsBipartite,38,eval_input,2020-04-08 05:20:21,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> A + B->B + C->C
}",false,,,,,
kkawamu1,IsBipartite,39,eval_input,2020-04-08 05:20:36,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> A + B->B + C -> C + D -> D
}",false,,,,,
kkawamu1,IsBipartite,40,eval_input,2020-04-08 05:20:41,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> A + B->B + C -> C + D -> A
}",false,,,,,
kkawamu1,IsBipartite,41,eval_input,2020-04-08 05:20:47,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> A + B->B + C -> C + D -> B
}",false,,,,,
kkawamu1,IsBipartite,42,eval_input,2020-04-08 05:21:01,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> A + B->B + C -> A + D -> A
}",false,,,,,
kkawamu1,IsBipartite,43,eval_input,2020-04-08 05:21:05,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> A + B->B + C -> D + D -> A
}",false,,,,,
kkawamu1,IsBipartite,44,eval_input,2020-04-08 05:21:09,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> A + B->B + C -> B + D -> A
}",false,,,,,
kkawamu1,IsBipartite,45,eval_input,2020-04-08 05:21:17,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> A + B->A + C -> A + D -> A
}",false,,,,,
kkawamu1,IsBipartite,46,eval_input,2020-04-08 05:21:22,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> A + B->D + C -> A + D -> A
}",false,,,,,
kkawamu1,IsBipartite,47,eval_input,2020-04-08 05:21:25,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> A + B->C + C -> A + D -> A
}",false,,,,,
kkawamu1,IsBipartite,48,eval_input,2020-04-08 05:21:30,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B->C + C -> A + D -> A
}",false,,,,,
kkawamu1,IsBipartite,49,eval_input,2020-04-08 05:21:35,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> C + B->C + C -> A + D -> A
}",true,,,,,
kkawamu1,IsBipartite,50,eval_input,2020-04-08 05:22:33,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> C + B->C + C -> B + D -> A
}",true,,,,,
kkawamu1,IsBipartite,51,eval_input,2020-04-08 05:22:43,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B->C + C -> B + D -> A
}",true,,,,,
kkawamu1,IsBipartite,52,eval_input,2020-04-08 05:22:52,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> A
}",false,,,,,
kkawamu1,IsBipartite,53,eval_input,2020-04-08 05:23:13,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> A
}",true,,,,,
kkawamu1,IsBipartite,54,eval_input,2020-04-08 05:23:23,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> A + A -> C
}",true,,,,,
kkawamu1,IsBipartite,55,eval_input,2020-04-08 05:23:57,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> A + A -> C + C -> A
}",true,,,,,
kkawamu1,IsBipartite,56,eval_input,2020-04-08 05:24:02,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> A + A -> D
}",true,,,,,
kkawamu1,IsBipartite,57,eval_input,2020-04-08 05:24:06,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> D + A -> D
}",true,,,,,
kkawamu1,IsBipartite,58,eval_input,2020-04-08 05:25:09,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = B->B
}",false,,,,,
kkawamu1,IsBipartite,59,eval_input,2020-04-08 05:25:16,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->A
}",false,,,,,
kkawamu1,IsBipartite,60,eval_input,2020-04-08 05:25:21,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = C->C
}",false,,,,,
kkawamu1,IsBipartite,61,eval_input,2020-04-08 05:25:25,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = D->D
}",false,,,,,
kkawamu1,IsBipartite,62,eval_input,2020-04-08 05:25:30,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B
}",true,,,,,
kkawamu1,IsBipartite,63,eval_input,2020-04-08 05:25:34,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->C
}",true,,,,,
kkawamu1,IsBipartite,64,eval_input,2020-04-08 05:25:37,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->D
}",true,,,,,
kkawamu1,IsBipartite,65,eval_input,2020-04-08 05:25:46,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->A + A ->  B
}",false,,,,,
kkawamu1,IsBipartite,66,eval_input,2020-04-08 05:25:55,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->A
}",false,,,,,
kkawamu1,IsBipartite,67,eval_input,2020-04-08 05:26:00,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->A + A->B
}",false,,,,,
kkawamu1,IsBipartite,68,eval_input,2020-04-08 05:26:03,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->A + A->C
}",false,,,,,
kkawamu1,IsBipartite,69,eval_input,2020-04-08 05:26:21,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->A + A-> D
}",false,,,,,
kkawamu1,IsBipartite,70,eval_input,2020-04-08 05:26:29,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->A
}",false,,,,,
kkawamu1,IsBipartite,71,eval_input,2020-04-08 05:26:43,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + A-> D
}",true,,,,,
kkawamu1,IsBipartite,72,eval_input,2020-04-08 05:26:54,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + A-> A
}",false,,,,,
kkawamu1,IsBipartite,73,eval_input,2020-04-08 05:26:58,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + A-> D
}",true,,,,,
kkawamu1,IsBipartite,74,eval_input,2020-04-08 05:27:04,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + A-> C
}",true,,,,,
kkawamu1,IsBipartite,75,eval_input,2020-04-08 05:27:15,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B -> B
}",false,,,,,
kkawamu1,IsBipartite,76,eval_input,2020-04-08 05:27:26,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B -> A
}",true,,,,,
kkawamu1,IsBipartite,77,eval_input,2020-04-08 05:27:34,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + C -> C
}",false,,,,,
kkawamu1,IsBipartite,78,eval_input,2020-04-08 05:28:36,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges =A -> B + B->C + C -> A + D -> A
}",false,,,,,
kkawamu1,IsBipartite,79,eval_input,2020-04-08 05:29:23,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges =A -> B + B->C + C -> A + D -> D
}",false,,,,,
kkawamu1,IsBipartite,80,eval_input,2020-04-08 05:29:36,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges =A -> B + B->C + C -> A + A -> C
}",false,,,,,
kkawamu1,IsBipartite,81,eval_input,2020-04-08 05:29:45,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges =A -> B + B->C + C -> A 
}",false,,,,,
kkawamu1,IsBipartite,82,eval_input,2020-04-08 05:29:57,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges =A -> B + B->C + C -> A
}",false,,,,,
kkawamu1,IsBipartite,83,eval_input,2020-04-08 11:51:07,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges =A -> B + B->C + C -> A
}",false,,,,,
kkawamu1,IsBipartite,84,eval_input,2020-04-08 11:52:47,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges =A -> B + B->C + C -> A
}",false,,,,,
kkawamu1,IsBipartite,85,eval_input,2020-04-08 11:53:34,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = none
}",true,,,,,
kkawamu1,IsBipartite,86,eval_input,2020-04-08 11:53:51,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> A
  
}",false,,,,,
kkawamu1,IsBipartite,87,eval_input,2020-04-08 11:54:06,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> A + A->B
  
}",false,,,,,
kkawamu1,IsBipartite,88,eval_input,2020-04-08 11:54:29,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> A + A -> B + B -> A
  
}",false,,,,,
kkawamu1,IsBipartite,89,eval_input,2020-04-08 11:54:43,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> A  + B -> A
  
}",false,,,,,
kkawamu1,IsBipartite,90,eval_input,2020-04-08 11:54:52,"inst myInst {
  Node = A
       + B

  edges = A -> A  + B -> A
  
}",false,,,,,
kkawamu1,IsBipartite,91,eval_input,2020-04-08 11:54:59,"inst myInst {
  Node = A
       + B

  edges = none
  
}",true,,,,,
kkawamu1,IsBipartite,92,eval_input,2020-04-08 11:55:10,"inst myInst {
  Node = A
       + B

  edges = A->A
  
}",false,,,,,
kkawamu1,IsBipartite,93,eval_input,2020-04-08 11:55:13,"inst myInst {
  Node = A
       + B

  edges = A->B
  
}",true,,,,,
kkawamu1,IsBipartite,94,eval_input,2020-04-08 11:55:18,"inst myInst {
  Node = A
       + B

  edges = B->B
  
}",false,,,,,
kkawamu1,IsBipartite,95,eval_input,2020-04-08 11:55:20,"inst myInst {
  Node = A
       + B

  edges = B->A
  
}",true,,,,,
kkawamu1,IsBipartite,96,eval_input,2020-04-08 11:55:29,"inst myInst {
  Node = A
       + B

  edges = A->B + B->A
  
}",true,,,,,
kkawamu1,IsBipartite,97,eval_input,2020-04-08 11:55:36,"inst myInst {
  Node = A
       + B

  edges = A->A
  
}",false,,,,,
kkawamu1,IsBipartite,98,eval_input,2020-04-08 11:55:42,"inst myInst {
  Node = A
       + B
       + C

  edges = A->A
  
}",false,,,,,
kkawamu1,IsBipartite,99,eval_input,2020-04-08 11:55:45,"inst myInst {
  Node = A
       + B
       + C

  edges = A->B
  
}",true,,,,,
kkawamu1,IsBipartite,100,eval_input,2020-04-08 11:55:51,"inst myInst {
  Node = A
       + B
       + C

  edges = A->B + B->A
  
}",true,,,,,
kkawamu1,IsBipartite,101,eval_input,2020-04-08 11:55:56,"inst myInst {
  Node = A
       + B
       + C

  edges = A->B + B->C
  
}",true,,,,,
kkawamu1,IsBipartite,102,eval_input,2020-04-08 11:56:01,"inst myInst {
  Node = A
       + B
       + C

  edges = A->B + B->B
  
}",false,,,,,
kkawamu1,IsBipartite,103,eval_input,2020-04-08 11:56:14,"inst myInst {
  Node = A
       + B
       + C

  edges = A->B + B->C
  
}",true,,,,,
kkawamu1,IsBipartite,104,eval_input,2020-04-08 11:56:22,"inst myInst {
  Node = A
       + B
       + C

  edges = none
  
}",true,,,,,
kkawamu1,IsBipartite,105,eval_input,2020-04-08 11:56:34,"inst myInst {
  Node = A
       + B
       + C

  edges = A->B + B->C
  
}",true,,,,,
kkawamu1,IsBipartite,106,eval_input,2020-04-08 11:56:38,"inst myInst {
  Node = A
       + B
       + C

  edges = A->B + B->A
  
}",true,,,,,
kkawamu1,IsBipartite,107,eval_input,2020-04-08 11:56:43,"inst myInst {
  Node = A
       + B
       + C

  edges = A->B + B->B
  
}",false,,,,,
kkawamu1,IsBipartite,108,eval_input,2020-04-08 11:57:02,"inst myInst {
  Node = A
       + B
       + C

  edges = A->B + B->C
  
}",true,,,,,
kkawamu1,IsBipartite,109,eval_input,2020-04-08 11:57:13,"inst myInst {
  Node = A
       + B
       + C

  edges = A->B + B->C + C->A
  
}",false,,,,,
kkawamu1,IsBipartite,110,eval_input,2020-04-08 11:57:17,"inst myInst {
  Node = A
       + B
       + C

  edges = A->B + B->C + C->B
  
}",true,,,,,
kkawamu1,IsBipartite,111,eval_input,2020-04-08 11:57:22,"inst myInst {
  Node = A
       + B
       + C

  edges = A->B + B->C + C->A
  
}",false,,,,,
kkawamu1,IsBipartite,112,eval_input,2020-04-08 11:57:31,"inst myInst {
  Node = A
       + B
       + C

  edges = A->B + B->C + C->B
  
}",true,,,,,
kkawamu1,IsBipartite,113,eval_input,2020-04-08 11:57:51,"inst myInst {
  Node = A
       + B
       + C

  edges = A->B + B->C + C->C
  
}",false,,,,,
kkawamu1,IsBipartite,114,eval_input,2020-04-08 11:58:00,"inst myInst {
  Node = A
       + B
       + C

  edges = none
  
}",true,,,,,
kkawamu1,IsBipartite,115,eval_input,2020-04-08 11:58:07,"inst myInst {
  Node = A
       + B
       + C

  edges = A -> B
  
}",true,,,,,
kkawamu1,IsBipartite,116,eval_input,2020-04-08 11:58:13,"inst myInst {
  Node = A
       + B
       + C

  edges = A -> A
  
}",false,,,,,
kkawamu1,IsBipartite,117,eval_input,2020-04-08 11:58:20,"inst myInst {
  Node = A
       + B
       + C

  edges = A -> B
  
}",true,,,,,
kkawamu1,IsBipartite,118,quiz_answer,2020-04-08 12:02:03,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kkawamu1,IsBipartite,119,quiz_answer,2020-04-08 12:02:09,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
kkawamu1,IsBipartite,120,quiz_answer,2020-04-08 12:02:15,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,true,false,,
kkawamu1,IsBipartite,121,final_answer,2020-04-08 12:02:20,,,,,,I have no idea... A->A kind of thing is doing something though...,
pimemkam,IsBipartite,0,eval_input,2020-04-08 18:10:16,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
ali62,IsBipartite,0,eval_input,2020-04-09 11:49:07,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
ali62,IsBipartite,1,eval_input,2020-04-09 11:49:24,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
ali62,IsBipartite,2,eval_input,2020-04-09 11:50:09,"inst myInst {
  Node = A + B
  edges = A->B
}",true,,,,,
ali62,IsBipartite,3,eval_input,2020-04-09 11:50:14,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",true,,,,,
ali62,IsBipartite,4,eval_input,2020-04-09 11:50:21,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",true,,,,,
ali62,IsBipartite,5,eval_input,2020-04-09 11:50:24,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",true,,,,,
ali62,IsBipartite,6,eval_input,2020-04-09 11:50:28,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",true,,,,,
ali62,IsBipartite,7,eval_input,2020-04-09 11:50:34,"inst myInst {
  Node = A + B + C + D
  edges = A->B
}",true,,,,,
ali62,IsBipartite,8,eval_input,2020-04-09 11:50:37,"inst myInst {
  Node = A + B + C + D
  edges = A->A
}",false,,,,,
ali62,IsBipartite,9,eval_input,2020-04-09 11:50:41,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
ali62,IsBipartite,10,eval_input,2020-04-09 11:50:52,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",true,,,,,
ali62,IsBipartite,11,eval_input,2020-04-09 11:51:00,"inst myInst {
  Node = A + B
  edges = B->B
}",false,,,,,
ali62,IsBipartite,12,eval_input,2020-04-09 11:51:05,"inst myInst {
  Node = A + B + C
  edges = B->B
}",false,,,,,
ali62,IsBipartite,13,eval_input,2020-04-09 11:51:10,"inst myInst {
  Node = A + B + C
  edges = B->B + C->C
}",false,,,,,
ali62,IsBipartite,14,eval_input,2020-04-09 11:51:15,"inst myInst {
  Node = A + B + C
  edges = B->B + C->C + A->A
}",false,,,,,
ali62,IsBipartite,15,eval_input,2020-04-09 11:51:27,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
ali62,IsBipartite,16,eval_input,2020-04-09 11:51:48,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",true,,,,,
ali62,IsBipartite,17,eval_input,2020-04-09 11:51:57,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",true,,,,,
ali62,IsBipartite,18,eval_input,2020-04-09 11:52:03,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + B->C
}",true,,,,,
ali62,IsBipartite,19,eval_input,2020-04-09 11:52:06,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + B->C + C->A
}",false,,,,,
ali62,IsBipartite,20,eval_input,2020-04-09 11:52:12,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
ali62,IsBipartite,21,eval_input,2020-04-09 11:52:17,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + C->A
}",true,,,,,
ali62,IsBipartite,22,eval_input,2020-04-09 11:52:24,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
}",false,,,,,
ali62,IsBipartite,23,eval_input,2020-04-09 11:52:29,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
ali62,IsBipartite,24,eval_input,2020-04-09 11:52:32,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
}",false,,,,,
ali62,IsBipartite,25,eval_input,2020-04-09 11:52:39,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A + D->C
}",false,,,,,
ali62,IsBipartite,26,eval_input,2020-04-09 11:52:45,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + D->C
}",true,,,,,
ali62,IsBipartite,27,eval_input,2020-04-09 11:52:48,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + D->C
}",true,,,,,
ali62,IsBipartite,28,eval_input,2020-04-09 11:52:48,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + D->C
}",true,,,,,
ali62,IsBipartite,29,eval_input,2020-04-09 11:52:51,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + D->C
}",true,,,,,
ali62,IsBipartite,30,eval_input,2020-04-09 11:52:58,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
ali62,IsBipartite,31,eval_input,2020-04-09 11:53:03,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->B
}",false,,,,,
ali62,IsBipartite,32,eval_input,2020-04-09 11:53:52,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D
}",true,,,,,
ali62,IsBipartite,33,eval_input,2020-04-09 11:54:20,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
ali62,IsBipartite,34,eval_input,2020-04-09 11:54:22,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->B
}",true,,,,,
ali62,IsBipartite,35,eval_input,2020-04-09 11:54:25,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->C
}",false,,,,,
ali62,IsBipartite,36,eval_input,2020-04-09 11:54:39,"inst myInst {
  Node = A + B + C
  edges = A->A
}",false,,,,,
ali62,IsBipartite,37,eval_input,2020-04-09 11:54:42,"inst myInst {
  Node = A + B + C
  edges = A->C
}",true,,,,,
ali62,IsBipartite,38,eval_input,2020-04-09 11:54:56,"inst myInst {
  Node = A + B + C
  edges = A->A + A->C
}",false,,,,,
ali62,IsBipartite,39,eval_input,2020-04-09 11:55:02,"inst myInst {
  Node = A + B + C
  edges = A->A
}",false,,,,,
ali62,IsBipartite,40,eval_input,2020-04-09 11:55:52,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
ali62,IsBipartite,41,eval_input,2020-04-09 11:56:01,"inst myInst {
  Node = A + B
  edges = A->A + A->B
}",false,,,,,
ali62,IsBipartite,42,eval_input,2020-04-09 11:57:02,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",true,,,,,
ali62,IsBipartite,43,eval_input,2020-04-09 11:57:08,"inst myInst {
  Node = A + B
  edges = B->A + A->B
}",true,,,,,
ali62,IsBipartite,44,eval_input,2020-04-09 11:57:32,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
ali62,IsBipartite,45,eval_input,2020-04-09 11:57:47,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->B
}",true,,,,,
ali62,IsBipartite,46,eval_input,2020-04-09 11:58:08,"inst myInst {
  Node = A + B + C
  edges = C->A + B->C + C->B
}",true,,,,,
ali62,IsBipartite,47,eval_input,2020-04-09 11:58:27,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + B->C
}",true,,,,,
ali62,IsBipartite,48,eval_input,2020-04-09 11:58:46,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C
}",true,,,,,
ali62,IsBipartite,49,eval_input,2020-04-09 11:59:13,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C
}",true,,,,,
ali62,IsBipartite,50,eval_input,2020-04-09 11:59:19,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + A->A
}",false,,,,,
ali62,IsBipartite,51,eval_input,2020-04-09 11:59:29,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + A->A
}",false,,,,,
ali62,IsBipartite,52,eval_input,2020-04-09 11:59:33,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + A->A + B->C
}",false,,,,,
ali62,IsBipartite,53,eval_input,2020-04-09 11:59:54,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + A->A + C->B
}",false,,,,,
ali62,IsBipartite,54,eval_input,2020-04-09 12:00:08,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + A->A
}",false,,,,,
ali62,IsBipartite,55,eval_input,2020-04-09 12:00:15,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + A->A + B->A
}",false,,,,,
ali62,IsBipartite,56,eval_input,2020-04-09 12:00:20,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + A->A + B->A + C->A
}",false,,,,,
ali62,IsBipartite,57,eval_input,2020-04-09 12:00:28,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + B->A + C->A
}",true,,,,,
ali62,IsBipartite,58,eval_input,2020-04-09 12:01:07,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
ali62,IsBipartite,59,eval_input,2020-04-09 12:01:15,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
}",false,,,,,
ali62,IsBipartite,60,eval_input,2020-04-09 12:01:45,"inst myInst {
  Node = A + B
  edges = A->A
}",false,,,,,
ali62,IsBipartite,61,eval_input,2020-04-09 12:01:52,"inst myInst {
  Node = A + B
  edges = A->B
}",true,,,,,
ali62,IsBipartite,62,eval_input,2020-04-09 12:02:30,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
ali62,IsBipartite,63,eval_input,2020-04-09 12:02:53,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->B
}",false,,,,,
ali62,IsBipartite,64,eval_input,2020-04-09 12:03:12,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
ali62,IsBipartite,65,quiz_answer,2020-04-09 12:04:45,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ali62,IsBipartite,66,quiz_answer,2020-04-09 12:04:56,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
ali62,IsBipartite,67,quiz_answer,2020-04-09 12:05:08,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
ali62,IsBipartite,68,quiz_answer,2020-04-09 12:05:58,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
ali62,IsBipartite,69,quiz_answer,2020-04-09 12:06:10,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
ali62,IsBipartite,70,quiz_answer,2020-04-09 12:06:32,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
ali62,IsBipartite,71,quiz_answer,2020-04-09 12:06:49,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
ali62,IsBipartite,72,quiz_answer,2020-04-09 12:07:12,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
ali62,IsBipartite,73,final_answer,2020-04-09 12:07:13,,,,,,"This predicate evaluates to false when there exists a loop with an odd number of nodes in the loop, and false otherwise",
ali62,ThreeCycle,74,eval_input,2020-04-09 12:08:09,"inst myInst {
  Node = A
  edges = none
}",false,,,,,
ali62,ThreeCycle,75,eval_input,2020-04-09 12:08:12,"inst myInst {
  Node = none
  edges = none
}",false,,,,,
ali62,ThreeCycle,76,eval_input,2020-04-09 12:08:47,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
ali62,ThreeCycle,77,eval_input,2020-04-09 12:09:02,"inst myInst {
  Node = A +B
  edges = A->B
}",false,,,,,
ali62,ThreeCycle,78,eval_input,2020-04-09 12:09:12,"inst myInst {
  Node = A + B
  edges = A->A
}",false,,,,,
ali62,ThreeCycle,79,eval_input,2020-04-09 12:09:26,"inst myInst {
  Node = A + B
  edges = A->A
}",false,,,,,
ali62,ThreeCycle,80,eval_input,2020-04-09 12:09:34,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
ali62,ThreeCycle,81,eval_input,2020-04-09 12:09:37,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",false,,,,,
ali62,ThreeCycle,82,eval_input,2020-04-09 12:09:42,"inst myInst {
  Node = A + B + C
  edges = none
}",false,,,,,
ali62,ThreeCycle,83,eval_input,2020-04-09 12:09:56,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",false,,,,,
ali62,ThreeCycle,84,eval_input,2020-04-09 12:10:12,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
ali62,ThreeCycle,85,eval_input,2020-04-09 12:10:29,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C
}",false,,,,,
ali62,ThreeCycle,86,eval_input,2020-04-09 12:10:40,"inst myInst {
  Node = A + B + C
  edges = A->B + C->A
}",false,,,,,
ali62,ThreeCycle,87,eval_input,2020-04-09 12:26:01,"inst myInst {
  Node = A + B + C
  edges = A->B + C->C
}",false,,,,,
ali62,ThreeCycle,88,eval_input,2020-04-09 12:26:31,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->C
}",false,,,,,
ali62,ThreeCycle,89,eval_input,2020-04-09 12:26:32,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->C
}",false,,,,,
ali62,ThreeCycle,90,eval_input,2020-04-09 12:26:32,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->C
}",false,,,,,
ali62,ThreeCycle,91,eval_input,2020-04-09 12:26:35,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + C->C
}",false,,,,,
ali62,ThreeCycle,92,eval_input,2020-04-09 12:26:46,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + C->D + D->C
}",false,,,,,
ali62,ThreeCycle,93,eval_input,2020-04-09 12:30:19,"inst myInst {
  Node = A + B + C
  edges = B->A + C->A
}",false,,,,,
ali62,ThreeCycle,94,eval_input,2020-04-09 12:30:32,"inst myInst {
  Node = A + B + C
  edges = B->A + C->A + B->C
}",false,,,,,
ali62,ThreeCycle,95,eval_input,2020-04-09 12:32:22,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",false,,,,,
ali62,ThreeCycle,96,eval_input,2020-04-09 12:32:28,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->C
}",false,,,,,
ali62,ThreeCycle,97,eval_input,2020-04-09 12:32:42,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->C + C->D
}",false,,,,,
ali62,ThreeCycle,98,eval_input,2020-04-09 12:32:53,"inst myInst {
  Node = A + B + C + D
  edges = none
}",false,,,,,
ali62,ThreeCycle,99,eval_input,2020-04-09 12:33:25,"inst myInst {
  Node = A + B
  edges = A->A + B->B
}",false,,,,,
ali62,ThreeCycle,100,eval_input,2020-04-09 12:33:34,"inst myInst {
  Node = A + B
  edges = A->B + B->B
}",false,,,,,
ali62,ThreeCycle,101,quiz_answer,2020-04-09 12:45:37,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ali62,ThreeCycle,102,quiz_answer,2020-04-09 12:45:40,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
ali62,ThreeCycle,103,quiz_answer,2020-04-09 12:45:43,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
ali62,ThreeCycle,104,quiz_answer,2020-04-09 12:45:46,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
ali62,ThreeCycle,105,quiz_answer,2020-04-09 12:45:49,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,true,false,,
ali62,ThreeCycle,106,final_answer,2020-04-09 12:45:56,,,,,,I have no idea,
ali62,IsDag,107,eval_input,2020-04-09 12:46:16,"inst myInst {
  Node = A + B
  edges = none
}",true,,,,,
ali62,IsDag,108,eval_input,2020-04-09 12:46:21,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
ali62,IsDag,109,eval_input,2020-04-09 12:46:25,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
ali62,IsDag,110,eval_input,2020-04-09 12:46:31,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
ali62,IsDag,111,eval_input,2020-04-09 12:46:35,"inst myInst {
  Node = A + B
  edges = A->A
}",false,,,,,
ali62,IsDag,112,eval_input,2020-04-09 12:46:46,"inst myInst {
  Node = A + B
  edges = A->B
}",true,,,,,
ali62,IsDag,113,eval_input,2020-04-09 12:47:02,"inst myInst {
  Node = A + B + C
  edges = A->B
}",true,,,,,
ali62,IsDag,114,eval_input,2020-04-09 12:47:09,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",false,,,,,
ali62,IsDag,115,eval_input,2020-04-09 12:47:25,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
ali62,IsDag,116,eval_input,2020-04-09 12:47:35,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->B
}",false,,,,,
ali62,IsDag,117,eval_input,2020-04-09 12:47:45,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->B + C->A
}",false,,,,,
ali62,IsDag,118,eval_input,2020-04-09 12:48:13,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
ali62,IsDag,119,eval_input,2020-04-09 12:48:45,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B
}",true,,,,,
ali62,IsDag,120,eval_input,2020-04-09 12:48:46,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B
}",true,,,,,
ali62,IsDag,121,eval_input,2020-04-09 12:48:47,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B
}",true,,,,,
ali62,IsDag,122,eval_input,2020-04-09 12:48:53,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B + B->B
}",false,,,,,
ali62,IsDag,123,eval_input,2020-04-09 12:49:10,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D
}",true,,,,,
ali62,IsDag,124,eval_input,2020-04-09 12:49:14,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
ali62,IsDag,125,quiz_answer,2020-04-09 12:49:38,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ali62,IsDag,126,quiz_answer,2020-04-09 12:49:43,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
ali62,IsDag,127,quiz_answer,2020-04-09 12:49:46,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
ali62,IsDag,128,quiz_answer,2020-04-09 12:49:58,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
ali62,IsDag,129,quiz_answer,2020-04-09 12:50:02,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
ali62,IsDag,130,quiz_answer,2020-04-09 12:50:07,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
ali62,IsDag,131,quiz_answer,2020-04-09 12:50:12,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
ali62,IsDag,132,quiz_answer,2020-04-09 12:50:20,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
ali62,IsDag,133,final_answer,2020-04-09 12:50:21,,,,,,"This predicate evaluates to true if there does not exist a cycle, false otherwise",
stumay,ThreeCycle,0,eval_input,2020-04-09 16:05:16,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
jpirozzo,ThreeCycle,0,eval_input,2020-04-09 16:05:29,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
jpirozzo,ThreeCycle,1,eval_input,2020-04-09 16:05:37,"inst myInst {
  Node = A
  edges = none
}",false,,,,,
jpirozzo,ThreeCycle,2,eval_input,2020-04-09 16:05:42,"inst myInst {
  Node = A + B
  edges = none
}",false,,,,,
jpirozzo,ThreeCycle,3,eval_input,2020-04-09 16:05:49,"inst myInst {
  Node = A + B
  edges = A->B
}",false,,,,,
jpirozzo,ThreeCycle,4,eval_input,2020-04-09 16:05:55,"inst myInst {
  Node = A + B
  edges = A->A
}",false,,,,,
jpirozzo,ThreeCycle,5,eval_input,2020-04-09 16:06:00,"inst myInst {
  Node = A + B
  edges = A->A + B->B
}",false,,,,,
jpirozzo,ThreeCycle,6,eval_input,2020-04-09 16:06:14,"inst myInst {
  Node = A + B + C
  edges = A->A + B->B
}",false,,,,,
jpirozzo,ThreeCycle,7,eval_input,2020-04-09 16:06:18,"inst myInst {
  Node = A + B + C
  edges = A->A + B->B + C->C
}",false,,,,,
stumay,ThreeCycle,1,eval_input,2020-04-09 16:06:18,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",false,,,,,
stumay,ThreeCycle,2,eval_input,2020-04-09 16:06:27,"inst myInst {
  Node = A
       + B
       + C
  edges = B->A
}",false,,,,,
jpirozzo,ThreeCycle,8,eval_input,2020-04-09 16:06:27,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",false,,,,,
jpirozzo,ThreeCycle,9,eval_input,2020-04-09 16:06:39,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
stumay,ThreeCycle,3,eval_input,2020-04-09 16:06:43,"inst myInst {
  Node = A
       + B
       + C
  edges = B->A + B->C
}",false,,,,,
stumay,ThreeCycle,4,eval_input,2020-04-09 16:06:48,"inst myInst {
  Node = A
       + B
       + C
  edges = B->A + B->C + B->B
}",false,,,,,
stumay,ThreeCycle,5,eval_input,2020-04-09 16:07:00,"inst myInst {
  Node = A
       + B
       + C
  edges = B->A + B->C + C->A
}",false,,,,,
jpirozzo,ThreeCycle,10,eval_input,2020-04-09 16:07:01,"inst myInst {
  Node = A + B
  edges = none
}",false,,,,,
stumay,ThreeCycle,6,eval_input,2020-04-09 16:07:18,"inst myInst {
  Node = A
       + B
  edges = B->A + A->B
}",false,,,,,
stumay,ThreeCycle,7,eval_input,2020-04-09 16:07:42,"inst myInst {
  Node = A
  edges = none
}",false,,,,,
stumay,ThreeCycle,8,eval_input,2020-04-09 16:07:47,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
stumay,ThreeCycle,9,eval_input,2020-04-09 16:07:59,"inst myInst {
  Node = A + B + C
  edges = A->A + B->B + C->C
}",false,,,,,
stumay,ThreeCycle,10,eval_input,2020-04-09 16:08:36,"inst myInst {
  Node = A + B
  edges = none
}",false,,,,,
stumay,ThreeCycle,11,eval_input,2020-04-09 16:08:55,"inst myInst {
  Node = A + B
  edges = B->A
}",false,,,,,
stumay,ThreeCycle,12,eval_input,2020-04-09 16:08:59,"inst myInst {
  Node = A + B
  edges = A->B
}",false,,,,,
stumay,ThreeCycle,13,eval_input,2020-04-09 16:09:11,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",true,,,,,
jpirozzo,ThreeCycle,11,eval_input,2020-04-09 16:09:27,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",true,,,,,
stumay,ThreeCycle,14,eval_input,2020-04-09 16:09:36,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
jpirozzo,ThreeCycle,12,eval_input,2020-04-09 16:09:37,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
jpirozzo,ThreeCycle,13,eval_input,2020-04-09 16:10:07,"inst myInst {
  Node = A + B + C
  edges = A->C + C->B + B->A
}",true,,,,,
stumay,ThreeCycle,15,eval_input,2020-04-09 16:11:13,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
jpirozzo,ThreeCycle,14,quiz_answer,2020-04-09 16:11:17,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
jpirozzo,ThreeCycle,15,quiz_answer,2020-04-09 16:11:23,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
stumay,ThreeCycle,16,eval_input,2020-04-09 16:11:24,"inst myInst {
  Node = A
  edges = none
}",false,,,,,
jpirozzo,ThreeCycle,16,quiz_answer,2020-04-09 16:11:32,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
stumay,ThreeCycle,17,eval_input,2020-04-09 16:11:50,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C
}",false,,,,,
jpirozzo,ThreeCycle,17,quiz_answer,2020-04-09 16:11:53,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
jpirozzo,ThreeCycle,18,quiz_answer,2020-04-09 16:12:00,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
stumay,ThreeCycle,18,eval_input,2020-04-09 16:12:03,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->C
}",false,,,,,
stumay,ThreeCycle,19,eval_input,2020-04-09 16:12:07,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",true,,,,,
stumay,ThreeCycle,20,eval_input,2020-04-09 16:12:17,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B
}",false,,,,,
jpirozzo,ThreeCycle,19,quiz_answer,2020-04-09 16:12:21,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
jpirozzo,ThreeCycle,20,quiz_answer,2020-04-09 16:12:30,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
stumay,ThreeCycle,21,eval_input,2020-04-09 16:12:54,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
jpirozzo,ThreeCycle,21,quiz_answer,2020-04-09 16:12:58,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
jpirozzo,ThreeCycle,22,final_answer,2020-04-09 16:12:59,,,,,,Cycle containing three nodes.,
jpirozzo,IsDag,23,eval_input,2020-04-09 16:13:17,"inst myInst {
  Node = A + B + C
  edges = A->C + C->B + B->A
}",false,,,,,
stumay,ThreeCycle,22,quiz_answer,2020-04-09 16:13:30,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
stumay,ThreeCycle,23,quiz_answer,2020-04-09 16:13:35,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
stumay,ThreeCycle,24,quiz_answer,2020-04-09 16:13:38,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
stumay,ThreeCycle,25,quiz_answer,2020-04-09 16:13:42,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
stumay,ThreeCycle,26,quiz_answer,2020-04-09 16:13:45,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
jpirozzo,IsDag,24,eval_input,2020-04-09 16:13:47,"inst myInst {
  Node = A + B + C
  edges = A->A + B->B + C->C
}",false,,,,,
stumay,ThreeCycle,27,quiz_answer,2020-04-09 16:13:48,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
stumay,ThreeCycle,28,quiz_answer,2020-04-09 16:13:51,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
stumay,ThreeCycle,29,quiz_answer,2020-04-09 16:13:53,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
jpirozzo,IsDag,25,eval_input,2020-04-09 16:13:55,"inst myInst {
  Node = A
  edges = A->A 
}",false,,,,,
jpirozzo,IsDag,26,eval_input,2020-04-09 16:14:03,"inst myInst {
  Node = A
  edges = none 
}",true,,,,,
jpirozzo,IsDag,27,eval_input,2020-04-09 16:14:08,"inst myInst {
  Node = A + B
  edges = none
}",true,,,,,
jpirozzo,IsDag,28,eval_input,2020-04-09 16:14:14,"inst myInst {
  Node = A + B + C
  edges = none
}",true,,,,,
stumay,IsDag,31,eval_input,2020-04-09 16:14:19,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
stumay,IsDag,32,eval_input,2020-04-09 16:14:33,"inst myInst {
  Node = A + B + C + D + E
  edges = none
}",true,,,,,
stumay,IsDag,33,eval_input,2020-04-09 16:14:37,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B
}",true,,,,,
jpirozzo,IsDag,29,eval_input,2020-04-09 16:14:40,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",false,,,,,
stumay,IsDag,34,eval_input,2020-04-09 16:14:42,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->A
}",false,,,,,
jpirozzo,IsDag,30,eval_input,2020-04-09 16:14:48,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B
}",true,,,,,
stumay,IsDag,35,eval_input,2020-04-09 16:14:58,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E
}",true,,,,,
jpirozzo,IsDag,31,eval_input,2020-04-09 16:15:02,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B + B->A
}",false,,,,,
stumay,IsDag,36,eval_input,2020-04-09 16:15:07,"inst myInst {
  Node = A + B + C + D + E
  edges = A->A
}",false,,,,,
stumay,IsDag,37,eval_input,2020-04-09 16:15:19,"inst myInst {
  Node = A + B + C + D + E
  edges = A->A + B->B
}",false,,,,,
stumay,IsDag,38,eval_input,2020-04-09 16:16:04,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
stumay,IsDag,39,eval_input,2020-04-09 16:16:08,"inst myInst {
  Node = A + B
  edges = A->B
}",true,,,,,
jpirozzo,IsDag,32,eval_input,2020-04-09 16:16:11,"inst myInst {
  Node = A + B + C
  edges = none
}",true,,,,,
jpirozzo,IsDag,33,quiz_answer,2020-04-09 16:16:16,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
stumay,IsDag,40,quiz_answer,2020-04-09 16:16:18,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
stumay,IsDag,41,quiz_answer,2020-04-09 16:16:21,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
jpirozzo,IsDag,34,quiz_answer,2020-04-09 16:16:22,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
stumay,IsDag,42,quiz_answer,2020-04-09 16:16:24,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
jpirozzo,IsDag,35,quiz_answer,2020-04-09 16:16:26,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
jpirozzo,IsDag,36,quiz_answer,2020-04-09 16:16:39,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
stumay,IsDag,43,quiz_answer,2020-04-09 16:16:55,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
stumay,IsDag,44,quiz_answer,2020-04-09 16:17:02,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
stumay,IsDag,45,quiz_answer,2020-04-09 16:17:06,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
jpirozzo,IsDag,37,quiz_answer,2020-04-09 16:17:07,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
jpirozzo,IsDag,38,quiz_answer,2020-04-09 16:17:11,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
stumay,IsDag,46,quiz_answer,2020-04-09 16:17:13,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
jpirozzo,IsDag,39,quiz_answer,2020-04-09 16:17:15,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
stumay,IsDag,47,quiz_answer,2020-04-09 16:17:17,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
stumay,IsDag,48,final_answer,2020-04-09 16:17:18,,,,,,This predicate evaluates to true when there are no cycles in the edges. This includes self cycles. It does not matter how many nodes are in the set.,
jpirozzo,IsDag,40,quiz_answer,2020-04-09 16:17:19,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
jpirozzo,IsDag,41,quiz_answer,2020-04-09 16:17:25,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
jpirozzo,IsDag,42,quiz_answer,2020-04-09 16:17:33,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
stumay,IsBipartite,49,eval_input,2020-04-09 16:17:34,"inst myInst {
  Node = A + B
  edges = none
}",true,,,,,
jpirozzo,IsDag,43,quiz_answer,2020-04-09 16:17:37,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
stumay,IsBipartite,50,eval_input,2020-04-09 16:17:38,"inst myInst {
  Node = A + B
  edges = A->A
}",false,,,,,
stumay,IsBipartite,51,eval_input,2020-04-09 16:17:42,"inst myInst {
  Node = A + B
  edges = A->A + A->B
}",false,,,,,
jpirozzo,IsDag,44,quiz_answer,2020-04-09 16:17:42,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
jpirozzo,IsDag,45,final_answer,2020-04-09 16:17:43,,,,,,"no cycles, including self-cycles",
stumay,IsBipartite,52,eval_input,2020-04-09 16:17:47,"inst myInst {
  Node = A + B
  edges = B->A
}",true,,,,,
jpirozzo,IsBipartite,46,eval_input,2020-04-09 16:17:51,"inst myInst {
  Node = A + B + C
  edges = none
}",true,,,,,
stumay,IsBipartite,53,eval_input,2020-04-09 16:17:52,"inst myInst {
  Node = A + B
  edges = B->A + B->B
}",false,,,,,
jpirozzo,IsBipartite,47,eval_input,2020-04-09 16:17:55,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
jpirozzo,IsBipartite,48,eval_input,2020-04-09 16:17:59,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
stumay,IsBipartite,54,eval_input,2020-04-09 16:18:00,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B
}",true,,,,,
jpirozzo,IsBipartite,49,eval_input,2020-04-09 16:18:05,"inst myInst {
  Node = A + B
  edges = A->B
}",true,,,,,
stumay,IsBipartite,55,eval_input,2020-04-09 16:18:05,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B + A->A
}",false,,,,,
jpirozzo,IsBipartite,50,eval_input,2020-04-09 16:18:11,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",true,,,,,
jpirozzo,IsBipartite,51,eval_input,2020-04-09 16:18:18,"inst myInst {
  Node = A + B
  edges = A->B + B->A + B->B
}",false,,,,,
stumay,IsBipartite,56,eval_input,2020-04-09 16:18:32,"inst myInst {
  Node = A + B
  edges = B->A
}",true,,,,,
jpirozzo,IsBipartite,52,eval_input,2020-04-09 16:18:32,"inst myInst {
  Node = A + B
  edges = A->B + B->A + B->B
}",false,,,,,
jpirozzo,IsBipartite,53,eval_input,2020-04-09 16:18:38,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",true,,,,,
stumay,IsBipartite,57,eval_input,2020-04-09 16:18:45,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
jpirozzo,IsBipartite,54,quiz_answer,2020-04-09 16:18:45,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
jpirozzo,IsBipartite,55,quiz_answer,2020-04-09 16:18:48,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
jpirozzo,IsBipartite,56,quiz_answer,2020-04-09 16:18:54,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
jpirozzo,IsBipartite,57,quiz_answer,2020-04-09 16:19:01,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
jpirozzo,IsBipartite,58,quiz_answer,2020-04-09 16:19:06,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,false,false,,
stumay,IsBipartite,58,eval_input,2020-04-09 16:19:07,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A + C->C
}",false,,,,,
jpirozzo,IsBipartite,59,eval_input,2020-04-09 16:19:18,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
jpirozzo,IsBipartite,60,eval_input,2020-04-09 16:19:34,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",true,,,,,
jpirozzo,IsBipartite,61,eval_input,2020-04-09 16:19:45,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
stumay,IsBipartite,59,eval_input,2020-04-09 16:19:46,"inst myInst {
  Node = A + B + C
  edges = A->B 
}",true,,,,,
jpirozzo,IsBipartite,62,eval_input,2020-04-09 16:20:06,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
stumay,IsBipartite,60,eval_input,2020-04-09 16:20:13,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
jpirozzo,IsBipartite,63,quiz_answer,2020-04-09 16:20:18,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
jpirozzo,IsBipartite,64,quiz_answer,2020-04-09 16:20:22,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
jpirozzo,IsBipartite,65,quiz_answer,2020-04-09 16:20:30,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
stumay,IsBipartite,61,eval_input,2020-04-09 16:20:33,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
jpirozzo,IsBipartite,66,quiz_answer,2020-04-09 16:20:34,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
jpirozzo,IsBipartite,67,quiz_answer,2020-04-09 16:20:37,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
stumay,IsBipartite,62,eval_input,2020-04-09 16:20:40,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",true,,,,,
jpirozzo,IsBipartite,68,quiz_answer,2020-04-09 16:20:41,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
jpirozzo,IsBipartite,69,quiz_answer,2020-04-09 16:20:46,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
jpirozzo,IsBipartite,70,quiz_answer,2020-04-09 16:20:49,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
jpirozzo,IsBipartite,71,final_answer,2020-04-09 16:20:50,,,,,,no cycles with an odd number of elements,
stumay,IsBipartite,63,eval_input,2020-04-09 16:20:59,"inst myInst {
  Node = A + B
  edges = A->B + B->A + A->A
}",false,,,,,
stumay,IsBipartite,64,quiz_answer,2020-04-09 16:21:13,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
stumay,IsBipartite,65,quiz_answer,2020-04-09 16:21:19,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
stumay,IsBipartite,66,quiz_answer,2020-04-09 16:21:24,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
stumay,IsBipartite,67,quiz_answer,2020-04-09 16:21:35,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
stumay,IsBipartite,68,quiz_answer,2020-04-09 16:21:40,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
stumay,IsBipartite,69,quiz_answer,2020-04-09 16:21:57,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
stumay,IsBipartite,70,quiz_answer,2020-04-09 16:22:02,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
stumay,IsBipartite,71,quiz_answer,2020-04-09 16:22:18,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
stumay,IsBipartite,72,final_answer,2020-04-09 16:22:19,,,,,,"No odd number of nodes with a cycle, but an even number of nodes can have a cycle, not including self cycles.",
drebman,IsBipartite,0,eval_input,2020-04-09 17:22:20,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
drebman,IsBipartite,1,eval_input,2020-04-09 17:22:43,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + A->C
}",true,,,,,
drebman,IsBipartite,2,eval_input,2020-04-09 17:22:46,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + A->C
}",true,,,,,
drebman,IsBipartite,3,eval_input,2020-04-09 17:22:52,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + A->C + B->C
}",true,,,,,
drebman,IsBipartite,4,eval_input,2020-04-09 17:23:02,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A
}",false,,,,,
drebman,IsBipartite,5,eval_input,2020-04-09 17:23:16,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A + B->B
}",false,,,,,
drebman,IsBipartite,6,eval_input,2020-04-09 17:23:19,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A + B->A
}",false,,,,,
drebman,IsBipartite,7,eval_input,2020-04-09 17:23:31,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",false,,,,,
drebman,IsBipartite,8,eval_input,2020-04-09 17:23:49,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->C
}",false,,,,,
drebman,IsBipartite,9,eval_input,2020-04-09 17:23:53,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->B
}",true,,,,,
drebman,IsBipartite,10,eval_input,2020-04-09 17:24:26,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->B + A->C
}",true,,,,,
drebman,IsBipartite,11,eval_input,2020-04-09 17:24:34,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->B + A->C + C->A
}",false,,,,,
drebman,IsBipartite,12,eval_input,2020-04-09 17:24:47,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->B + A->C
}",true,,,,,
drebman,IsBipartite,13,eval_input,2020-04-09 17:25:25,"inst myInst {
  Node = A
       + B
       + C
  edges = B->C + C->B
}",true,,,,,
drebman,IsBipartite,14,eval_input,2020-04-09 17:25:36,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = B->C + C->B
}",true,,,,,
drebman,IsBipartite,15,eval_input,2020-04-09 17:25:49,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D
}",true,,,,,
drebman,IsBipartite,16,eval_input,2020-04-09 17:25:54,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
drebman,IsBipartite,17,eval_input,2020-04-09 17:26:12,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + D->A + D->D
}",false,,,,,
drebman,IsBipartite,18,eval_input,2020-04-09 17:26:22,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + D->A + C->A
}",false,,,,,
drebman,IsBipartite,19,quiz_answer,2020-04-09 17:27:50,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
drebman,IsBipartite,20,quiz_answer,2020-04-09 17:27:55,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
drebman,IsBipartite,21,quiz_answer,2020-04-09 17:27:58,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
drebman,IsBipartite,22,quiz_answer,2020-04-09 17:28:17,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
drebman,IsBipartite,23,quiz_answer,2020-04-09 17:28:27,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
drebman,IsBipartite,24,quiz_answer,2020-04-09 17:28:33,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
drebman,IsBipartite,25,quiz_answer,2020-04-09 17:28:40,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
drebman,IsBipartite,26,quiz_answer,2020-04-09 17:28:46,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
drebman,IsBipartite,27,final_answer,2020-04-09 17:28:48,,,,,,"There can't be loops comprised of an odd number of atoms. Self-loops, for example, are prohibited.",
drebman,ThreeCycle,28,eval_input,2020-04-09 17:29:08,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + D->A + C->A
}",true,,,,,
drebman,ThreeCycle,29,eval_input,2020-04-09 17:29:20,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A
}",false,,,,,
drebman,ThreeCycle,30,eval_input,2020-04-09 17:29:32,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A + B->B
}",false,,,,,
drebman,ThreeCycle,31,eval_input,2020-04-09 17:29:41,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A + B->B + C->C
}",false,,,,,
drebman,ThreeCycle,32,eval_input,2020-04-09 17:29:51,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
drebman,ThreeCycle,33,eval_input,2020-04-09 17:30:07,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + A->C
}",false,,,,,
drebman,ThreeCycle,34,eval_input,2020-04-09 17:30:23,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + A->C + C->B
}",false,,,,,
drebman,ThreeCycle,35,eval_input,2020-04-09 17:30:36,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",true,,,,,
drebman,ThreeCycle,36,eval_input,2020-04-09 17:31:02,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
drebman,ThreeCycle,37,eval_input,2020-04-09 17:31:29,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->A + C->D + D->C
}",false,,,,,
drebman,ThreeCycle,38,eval_input,2020-04-09 17:31:54,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
drebman,ThreeCycle,39,eval_input,2020-04-09 17:32:08,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A->B + B->C + C->A
}",true,,,,,
drebman,ThreeCycle,40,eval_input,2020-04-09 17:32:34,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C + C->A + D->E + E->F + F->D
}",true,,,,,
drebman,ThreeCycle,41,eval_input,2020-04-09 17:32:45,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B->C + C->A + D->E + E->D + F->D
}",true,,,,,
drebman,ThreeCycle,42,eval_input,2020-04-09 17:33:20,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->A + D->D
}",true,,,,,
drebman,ThreeCycle,43,eval_input,2020-04-09 17:33:31,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + D->D
}",false,,,,,
drebman,ThreeCycle,44,eval_input,2020-04-09 17:34:10,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->B
}",false,,,,,
drebman,ThreeCycle,45,eval_input,2020-04-09 17:34:30,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + C->D + B->C + D->A
}",false,,,,,
drebman,ThreeCycle,46,quiz_answer,2020-04-09 17:34:37,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
drebman,ThreeCycle,47,quiz_answer,2020-04-09 17:34:41,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
drebman,ThreeCycle,48,quiz_answer,2020-04-09 17:34:44,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
drebman,ThreeCycle,49,quiz_answer,2020-04-09 17:34:58,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
drebman,ThreeCycle,50,quiz_answer,2020-04-09 17:35:02,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
drebman,ThreeCycle,51,quiz_answer,2020-04-09 17:35:07,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
drebman,ThreeCycle,52,quiz_answer,2020-04-09 17:35:11,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
drebman,ThreeCycle,53,quiz_answer,2020-04-09 17:35:20,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
drebman,ThreeCycle,54,final_answer,2020-04-09 17:35:21,,,,,,There must be at least one loop comprised of exactly three atoms.,
drebman,IsDag,55,eval_input,2020-04-09 17:35:29,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + C->D + B->C + D->A
}",false,,,,,
drebman,IsDag,56,eval_input,2020-04-09 17:35:38,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = none
}",true,,,,,
drebman,IsDag,57,eval_input,2020-04-09 17:35:54,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->A
}",false,,,,,
drebman,IsDag,58,eval_input,2020-04-09 17:36:11,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->A
}",false,,,,,
drebman,IsDag,59,eval_input,2020-04-09 17:36:32,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->A
}",false,,,,,
drebman,IsDag,60,eval_input,2020-04-09 17:36:45,"inst myInst {
  Node = A
       + B
       + C
       
  edges = A->B + B->C + C->A
}",false,,,,,
drebman,IsDag,61,eval_input,2020-04-09 17:36:55,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
drebman,IsDag,62,eval_input,2020-04-09 17:37:16,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + C->B
}",true,,,,,
drebman,IsDag,63,eval_input,2020-04-09 17:37:33,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + C->B + D->D
}",false,,,,,
drebman,IsDag,64,eval_input,2020-04-09 17:37:37,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + C->B + D->A
}",true,,,,,
drebman,IsDag,65,eval_input,2020-04-09 17:38:04,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B
}",true,,,,,
drebman,IsDag,66,eval_input,2020-04-09 17:38:17,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = D->C + C->B + B->A
}",true,,,,,
drebman,IsDag,67,eval_input,2020-04-09 17:38:23,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = D->C + C->B + B->A + A->B
}",false,,,,,
drebman,IsDag,68,eval_input,2020-04-09 17:38:27,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = D->C + C->B + B->A + A->C
}",false,,,,,
drebman,IsDag,69,eval_input,2020-04-09 17:38:30,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = D->C + C->B + B->A + A->D
}",false,,,,,
drebman,IsDag,70,quiz_answer,2020-04-09 17:38:41,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
drebman,IsDag,71,quiz_answer,2020-04-09 17:38:44,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
drebman,IsDag,72,quiz_answer,2020-04-09 17:38:47,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
drebman,IsDag,73,quiz_answer,2020-04-09 17:39:02,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
drebman,IsDag,74,quiz_answer,2020-04-09 17:39:09,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
drebman,IsDag,75,quiz_answer,2020-04-09 17:39:13,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
drebman,IsDag,76,quiz_answer,2020-04-09 17:39:18,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
drebman,IsDag,77,quiz_answer,2020-04-09 17:39:25,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
drebman,IsDag,78,final_answer,2020-04-09 17:39:26,,,,,,There can't be any loops,
ngoodson,IsBipartite,0,eval_input,2020-04-10 09:58:39,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
ngoodson,IsBipartite,1,eval_input,2020-04-10 09:58:46,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
ngoodson,IsBipartite,2,eval_input,2020-04-10 09:59:08,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
ngoodson,IsBipartite,3,eval_input,2020-04-10 09:59:30,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
ngoodson,IsBipartite,4,eval_input,2020-04-10 09:59:54,"inst myInst {
  Node = A
  edges = A -> A
}",false,,,,,
ngoodson,IsBipartite,5,eval_input,2020-04-10 10:00:11,"inst myInst {
  Node = A + B
  edges = A -> A
}",false,,,,,
ngoodson,IsBipartite,6,eval_input,2020-04-10 10:00:19,"inst myInst {
  Node = A + B
  edges = A -> B
}",true,,,,,
ngoodson,IsBipartite,7,eval_input,2020-04-10 10:00:30,"inst myInst {
  Node = A + B
  edges = A -> B + B -> A
}",true,,,,,
ngoodson,IsBipartite,8,eval_input,2020-04-10 10:00:39,"inst myInst {
  Node = A + B
  edges = A -> B + B -> A + B -> B
}",false,,,,,
ngoodson,IsBipartite,9,quiz_answer,2020-04-10 10:02:06,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ngoodson,IsBipartite,10,quiz_answer,2020-04-10 10:02:12,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
ngoodson,IsBipartite,11,quiz_answer,2020-04-10 10:02:18,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
ngoodson,IsBipartite,12,quiz_answer,2020-04-10 10:02:25,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
ngoodson,IsBipartite,13,quiz_answer,2020-04-10 10:02:29,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,false,false,,
ngoodson,IsBipartite,14,eval_input,2020-04-10 10:02:52,"inst myInst {
  Node = A + B
  edges = A -> B + B -> A 
}",true,,,,,
ngoodson,IsBipartite,15,eval_input,2020-04-10 10:03:03,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> A 
}",true,,,,,
ngoodson,IsBipartite,16,eval_input,2020-04-10 10:03:08,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> A 
}",true,,,,,
ngoodson,IsBipartite,17,eval_input,2020-04-10 10:03:19,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C 
}",true,,,,,
ngoodson,IsBipartite,18,eval_input,2020-04-10 10:03:40,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + C -> A
}",false,,,,,
ngoodson,IsBipartite,19,eval_input,2020-04-10 10:03:57,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> A
}",false,,,,,
ngoodson,IsBipartite,20,eval_input,2020-04-10 10:04:06,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> D
}",true,,,,,
ngoodson,IsBipartite,21,eval_input,2020-04-10 10:04:28,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> D + D -> A
}",true,,,,,
ngoodson,IsBipartite,22,eval_input,2020-04-10 10:05:52,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + C -> D + D -> A
}",true,,,,,
ngoodson,IsBipartite,23,eval_input,2020-04-10 10:06:02,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + C -> D + D -> E + E -> A
}",false,,,,,
ngoodson,IsBipartite,24,quiz_answer,2020-04-10 10:06:31,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ngoodson,IsBipartite,25,quiz_answer,2020-04-10 10:06:35,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
ngoodson,IsBipartite,26,quiz_answer,2020-04-10 10:06:41,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
ngoodson,IsBipartite,27,quiz_answer,2020-04-10 10:06:49,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
ngoodson,IsBipartite,28,quiz_answer,2020-04-10 10:06:55,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
ngoodson,IsBipartite,29,quiz_answer,2020-04-10 10:07:01,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
ngoodson,IsBipartite,30,quiz_answer,2020-04-10 10:07:09,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
ngoodson,IsBipartite,31,quiz_answer,2020-04-10 10:07:14,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
ngoodson,IsBipartite,32,final_answer,2020-04-10 10:07:17,,,,,,No loops that connect/include an odd number of nodes,
ngoodson,ThreeCycle,33,eval_input,2020-04-10 10:07:58,"inst myInst {
  Node = none
  edges =  none
}",false,,,,,
ngoodson,ThreeCycle,34,eval_input,2020-04-10 10:08:04,"inst myInst {
  Node = A
  edges =  none
}",false,,,,,
ngoodson,ThreeCycle,35,eval_input,2020-04-10 10:08:15,"inst myInst {
  Node = A
  edges =  A -> A
}",false,,,,,
ngoodson,ThreeCycle,36,eval_input,2020-04-10 10:08:27,"inst myInst {
  Node = A + B
  edges =  none
}",false,,,,,
ngoodson,ThreeCycle,37,eval_input,2020-04-10 10:08:37,"inst myInst {
  Node = A + B
  edges =  A -> B
}",false,,,,,
ngoodson,ThreeCycle,38,eval_input,2020-04-10 10:08:47,"inst myInst {
  Node = A + B
  edges =  A -> B + B -> A
}",false,,,,,
ngoodson,ThreeCycle,39,eval_input,2020-04-10 10:09:00,"inst myInst {
  Node = A + B + C
  edges = none
}",false,,,,,
ngoodson,ThreeCycle,40,eval_input,2020-04-10 10:09:09,"inst myInst {
  Node = A + B + C
  edges = A -> B
}",false,,,,,
ngoodson,ThreeCycle,41,eval_input,2020-04-10 10:09:17,"inst myInst {
  Node = A + B + C
  edges = A -> B + A -> C
}",false,,,,,
ngoodson,ThreeCycle,42,eval_input,2020-04-10 10:09:29,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C 
}",false,,,,,
ngoodson,ThreeCycle,43,eval_input,2020-04-10 10:09:40,"inst myInst {
  Node = A + B + C
  edges = A -> B + C -> A 
}",false,,,,,
ngoodson,ThreeCycle,44,eval_input,2020-04-10 10:09:50,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + C -> A 
}",true,,,,,
ngoodson,ThreeCycle,45,eval_input,2020-04-10 10:10:01,"inst myInst {
  Node = A + B + C
  edges = none 
}",false,,,,,
ngoodson,ThreeCycle,46,eval_input,2020-04-10 10:10:09,"inst myInst {
  Node = A + B + C + D
  edges = none 
}",false,,,,,
ngoodson,ThreeCycle,47,eval_input,2020-04-10 10:10:34,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> D + D -> A 
}",false,,,,,
ngoodson,ThreeCycle,48,eval_input,2020-04-10 10:10:50,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> D  
}",false,,,,,
ngoodson,ThreeCycle,49,eval_input,2020-04-10 10:11:04,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + C -> D  + D -> E
}",false,,,,,
ngoodson,ThreeCycle,50,eval_input,2020-04-10 10:11:12,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + C -> D  + D -> E + E -> A
}",false,,,,,
ngoodson,ThreeCycle,51,eval_input,2020-04-10 10:11:24,"inst myInst {
  Node = A + B + C + D + E
  edges = none
}",false,,,,,
ngoodson,ThreeCycle,52,eval_input,2020-04-10 10:11:56,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + C -> E + E -> D
}",false,,,,,
ngoodson,ThreeCycle,53,eval_input,2020-04-10 10:12:10,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A -> B + B -> C 
}",false,,,,,
ngoodson,ThreeCycle,54,eval_input,2020-04-10 10:12:23,"inst myInst {
  Node = A + B + C + D + E + F
  edges = none
}",false,,,,,
ngoodson,ThreeCycle,55,eval_input,2020-04-10 10:12:55,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A -> B + B -> C + C -> D + D -> E + E -> F + F -> A
}",false,,,,,
ngoodson,ThreeCycle,56,eval_input,2020-04-10 10:13:27,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A -> B + B -> C + C -> A
}",true,,,,,
ngoodson,ThreeCycle,57,eval_input,2020-04-10 10:13:39,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A -> B + B -> C + C -> A + E -> F
}",true,,,,,
ngoodson,ThreeCycle,58,quiz_answer,2020-04-10 10:14:06,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ngoodson,ThreeCycle,59,quiz_answer,2020-04-10 10:14:12,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
ngoodson,ThreeCycle,60,quiz_answer,2020-04-10 10:14:15,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
ngoodson,ThreeCycle,61,quiz_answer,2020-04-10 10:14:19,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
ngoodson,ThreeCycle,62,quiz_answer,2020-04-10 10:14:22,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
ngoodson,ThreeCycle,63,quiz_answer,2020-04-10 10:14:28,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
ngoodson,ThreeCycle,64,quiz_answer,2020-04-10 10:14:36,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
ngoodson,ThreeCycle,65,quiz_answer,2020-04-10 10:14:41,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
ngoodson,ThreeCycle,66,final_answer,2020-04-10 10:14:46,,,,,,a graph where a loop/cycle is formed between exactly 3 nodes,
ngoodson,IsDag,68,eval_input,2020-04-10 10:15:36,"inst myInst {
  Node = A 
  edges = A -> A
}",false,,,,,
ngoodson,IsDag,69,eval_input,2020-04-10 10:15:48,"inst myInst {
  Node = A + B
  edges = A -> A
}",false,,,,,
ngoodson,IsDag,70,eval_input,2020-04-10 10:15:53,"inst myInst {
  Node = A + B
  edges = A -> B
}",true,,,,,
ngoodson,IsDag,71,eval_input,2020-04-10 10:16:06,"inst myInst {
  Node = A + B
  edges = A -> B + B -> A
}",false,,,,,
ngoodson,IsDag,72,eval_input,2020-04-10 10:16:17,"inst myInst {
  Node = A + B
  edges = A -> B + B -> B
}",false,,,,,
ngoodson,IsDag,73,eval_input,2020-04-10 10:16:25,"inst myInst {
  Node = A + B + C
  edges = A -> B 
}",true,,,,,
ngoodson,IsDag,74,eval_input,2020-04-10 10:16:35,"inst myInst {
  Node = A + B + C
  edges = A -> B + C -> A
}",true,,,,,
ngoodson,IsDag,75,eval_input,2020-04-10 10:16:43,"inst myInst {
  Node = A + B + C
  edges = A -> B + C -> A + B -> C
}",false,,,,,
mgans,IsDag,0,eval_input,2020-04-10 10:55:00,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
mgans,IsDag,1,eval_input,2020-04-10 10:55:20,"inst myInst {
  Node = A
       + B
       
  edges = none
}",true,,,,,
mgans,IsDag,2,eval_input,2020-04-10 10:55:26,"inst myInst {
  Node = A
       
  edges = none
}",true,,,,,
mgans,IsDag,3,eval_input,2020-04-10 10:55:31,"inst myInst {
  Node = none
       
  edges = none
}",true,,,,,
mgans,IsDag,4,eval_input,2020-04-10 10:55:41,"inst myInst {
  Node = A + B + C + D
       
  edges = none
}",true,,,,,
mgans,IsDag,5,eval_input,2020-04-10 10:55:46,"inst myInst {
  Node = A + B + C + D + E
       
  edges = none
}",true,,,,,
mgans,IsDag,6,eval_input,2020-04-10 10:55:50,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = none
}",true,,,,,
mgans,IsDag,7,eval_input,2020-04-10 10:55:56,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = A->A
}",false,,,,,
mgans,IsDag,8,eval_input,2020-04-10 10:55:59,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = A->B
}",true,,,,,
mgans,IsDag,9,eval_input,2020-04-10 10:56:03,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = A->C
}",true,,,,,
mgans,IsDag,10,eval_input,2020-04-10 10:56:05,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = A->D
}",true,,,,,
mgans,IsDag,11,eval_input,2020-04-10 10:56:08,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = A->E
}",true,,,,,
mgans,IsDag,12,eval_input,2020-04-10 10:56:11,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = A->F
}",true,,,,,
mgans,IsDag,13,eval_input,2020-04-10 10:56:30,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = B->A
}",true,,,,,
mgans,IsDag,14,eval_input,2020-04-10 10:56:33,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = B->B
}",false,,,,,
mgans,IsDag,15,eval_input,2020-04-10 10:56:36,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = B->C
}",true,,,,,
mgans,IsDag,16,eval_input,2020-04-10 10:56:39,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = B->D
}",true,,,,,
mgans,IsDag,17,eval_input,2020-04-10 10:56:44,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = B->E
}",true,,,,,
mgans,IsDag,18,eval_input,2020-04-10 10:56:54,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = A->A + B->B
}",false,,,,,
mgans,IsDag,19,eval_input,2020-04-10 10:57:01,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = A->A + B->C
}",false,,,,,
mgans,IsDag,20,eval_input,2020-04-10 10:57:14,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = A->A + B->C + C->C
}",false,,,,,
mgans,IsDag,21,eval_input,2020-04-10 10:57:22,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = A->B + C->B
}",true,,,,,
mgans,IsDag,22,eval_input,2020-04-10 10:57:27,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = A->B + C->B + D->B
}",true,,,,,
mgans,IsDag,23,eval_input,2020-04-10 10:57:31,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = A->B + C->B + D->D
}",false,,,,,
mgans,IsDag,24,eval_input,2020-04-10 10:57:41,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = A->B + A->C + D->E
}",true,,,,,
mgans,IsDag,25,eval_input,2020-04-10 10:57:46,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = A->B + A->C + A->D
}",true,,,,,
mbeards1,IsDag,0,eval_input,2020-04-10 10:59:48,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
mbeards1,IsDag,1,eval_input,2020-04-10 10:59:58,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
mbeards1,IsDag,2,eval_input,2020-04-10 11:00:07,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
}",true,,,,,
mbeards1,IsDag,3,eval_input,2020-04-10 11:00:17,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",false,,,,,
mbeards1,IsDag,4,eval_input,2020-04-10 11:00:24,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + A->C
}",true,,,,,
mgans,IsDag,26,quiz_answer,2020-04-10 11:00:33,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mgans,IsDag,27,quiz_answer,2020-04-10 11:00:36,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mbeards1,IsDag,5,eval_input,2020-04-10 11:00:37,"inst myInst {
  Node = A
       + B
       + C
  edges = A->C + B->C
}",true,,,,,
mgans,IsDag,28,quiz_answer,2020-04-10 11:00:40,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,false,false,,
mgans,IsDag,29,eval_input,2020-04-10 11:00:54,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = A->B + B->A
}",false,,,,,
mbeards1,IsDag,6,eval_input,2020-04-10 11:01:00,"inst myInst {
  Node = A
       + B
       + C
  edges = A->C + B->C + C->A
}",false,,,,,
mbeards1,IsDag,7,eval_input,2020-04-10 11:01:04,"inst myInst {
  Node = A
       + B
       + C
  edges = B->C + C->A
}",true,,,,,
mbeards1,IsDag,8,eval_input,2020-04-10 11:01:09,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
mbeards1,IsDag,9,eval_input,2020-04-10 11:01:24,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A
}",false,,,,,
mbeards1,IsDag,10,eval_input,2020-04-10 11:01:34,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A + A->C
}",false,,,,,
mbeards1,IsDag,11,eval_input,2020-04-10 11:01:38,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + A->C
}",true,,,,,
mbeards1,IsDag,12,eval_input,2020-04-10 11:01:50,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->B
}",false,,,,,
mbeards1,IsDag,13,eval_input,2020-04-10 11:01:57,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + B->A
}",false,,,,,
mgans,IsDag,30,eval_input,2020-04-10 11:01:58,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = A->B + B->C + C->A
}",false,,,,,
mbeards1,IsDag,14,eval_input,2020-04-10 11:02:04,"inst myInst {
  Node = A
       + B
  edges = none
}",true,,,,,
mdrisco5,ThreeCycle,0,eval_input,2020-04-10 11:02:04,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
mbeards1,IsDag,15,eval_input,2020-04-10 11:02:11,"inst myInst {
  Node = A
       + B
  edges = A->B
}",true,,,,,
mdrisco5,ThreeCycle,1,eval_input,2020-04-10 11:02:14,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",false,,,,,
mbeards1,IsDag,16,eval_input,2020-04-10 11:02:17,"inst myInst {
  Node = A
       + B
  edges = A->B + B->A
}",false,,,,,
mdrisco5,ThreeCycle,2,eval_input,2020-04-10 11:02:22,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
}",false,,,,,
mbeards1,IsDag,17,eval_input,2020-04-10 11:02:37,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D
}",true,,,,,
mdrisco5,ThreeCycle,3,eval_input,2020-04-10 11:02:42,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",true,,,,,
mbeards1,IsDag,18,eval_input,2020-04-10 11:02:43,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + A->D
}",true,,,,,
mdrisco5,ThreeCycle,4,eval_input,2020-04-10 11:02:51,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A
}",false,,,,,
mbeards1,IsDag,19,eval_input,2020-04-10 11:02:52,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + A->D + D->A
}",false,,,,,
mbeards1,IsDag,20,eval_input,2020-04-10 11:03:01,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + A->D + D->C
}",false,,,,,
mgans,IsDag,32,quiz_answer,2020-04-10 11:03:03,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mgans,IsDag,33,quiz_answer,2020-04-10 11:03:06,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mdrisco5,ThreeCycle,5,eval_input,2020-04-10 11:03:13,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B -> C + C->A
}",true,,,,,
mgans,IsDag,34,quiz_answer,2020-04-10 11:03:17,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mgans,IsDag,35,quiz_answer,2020-04-10 11:03:22,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mgans,IsDag,36,quiz_answer,2020-04-10 11:03:29,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mdrisco5,ThreeCycle,6,eval_input,2020-04-10 11:03:31,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B -> C + C->D
}",false,,,,,
mgans,IsDag,37,quiz_answer,2020-04-10 11:03:35,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mdrisco5,ThreeCycle,7,eval_input,2020-04-10 11:03:38,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B -> C + C->D + D->A
}",false,,,,,
mgans,IsDag,38,quiz_answer,2020-04-10 11:03:39,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mgans,IsDag,39,final_answer,2020-04-10 11:03:40,,,,,,no iden & *edges,
mgans,ThreeCycle,40,eval_input,2020-04-10 11:03:53,"inst myInst {
  Node = A + B + C + D + E + F
       
  edges = A->B + B->C + C->A
}",true,,,,,
mgans,ThreeCycle,41,eval_input,2020-04-10 11:04:04,"inst myInst {
  Node = none
       
  edges = none
}",false,,,,,
mgans,ThreeCycle,42,eval_input,2020-04-10 11:04:08,"inst myInst {
  Node = A
       
  edges = none
}",false,,,,,
mdrisco5,ThreeCycle,8,eval_input,2020-04-10 11:04:09,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A->B + B -> C + C->D + D-> E + E -> A
}",false,,,,,
mbeards1,IsDag,21,quiz_answer,2020-04-10 11:04:12,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mgans,ThreeCycle,43,eval_input,2020-04-10 11:04:13,"inst myInst {
  Node = A + B
       
  edges = none
}",false,,,,,
mbeards1,IsDag,22,quiz_answer,2020-04-10 11:04:20,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mbeards1,IsDag,23,quiz_answer,2020-04-10 11:04:26,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mgans,ThreeCycle,44,eval_input,2020-04-10 11:04:26,"inst myInst {
  Node = A
       
  edges = A -> A
}",false,,,,,
mgans,ThreeCycle,45,eval_input,2020-04-10 11:04:30,"inst myInst {
  Node = A + B
       
  edges = A -> A
}",false,,,,,
mgans,ThreeCycle,46,eval_input,2020-04-10 11:04:33,"inst myInst {
  Node = A + B
       
  edges = A -> B
}",false,,,,,
mgans,ThreeCycle,47,eval_input,2020-04-10 11:04:37,"inst myInst {
  Node = A + B
       
  edges = A->B
}",false,,,,,
mbeards1,IsDag,24,quiz_answer,2020-04-10 11:04:39,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mdrisco5,ThreeCycle,9,eval_input,2020-04-10 11:04:42,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
  edges = A->B + B -> C + C->D + D-> E + E -> F + F->A
}",false,,,,,
mgans,ThreeCycle,48,eval_input,2020-04-10 11:04:44,"inst myInst {
  Node = A + B
       
  edges = A->B + B->A
}",false,,,,,
mbeards1,IsDag,25,quiz_answer,2020-04-10 11:04:46,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mgans,ThreeCycle,49,eval_input,2020-04-10 11:04:49,"inst myInst {
  Node = A + B
       
  edges = A->A + B->B
}",false,,,,,
mbeards1,IsDag,26,quiz_answer,2020-04-10 11:04:56,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mgans,ThreeCycle,50,eval_input,2020-04-10 11:04:57,"inst myInst {
  Node = A + B + C
       
  edges = A->B + B->C
}",false,,,,,
mbeards1,IsDag,27,quiz_answer,2020-04-10 11:05:03,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mdrisco5,ThreeCycle,10,eval_input,2020-04-10 11:05:04,"inst myInst {
  Node = A
       + B
  edges = A->B + B -> A
}",false,,,,,
mgans,ThreeCycle,51,eval_input,2020-04-10 11:05:09,"inst myInst {
  Node = A + B + C
       
  edges = A->B + B->C + C->A
}",true,,,,,
mdrisco5,ThreeCycle,11,eval_input,2020-04-10 11:05:09,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B -> A
}",false,,,,,
mbeards1,IsDag,28,quiz_answer,2020-04-10 11:05:10,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mbeards1,IsDag,29,final_answer,2020-04-10 11:05:12,,,,,,I think that this predicate evaluates to false if nodes are in their own transitive closure and true otherwise.,
mgans,ThreeCycle,52,eval_input,2020-04-10 11:05:17,"inst myInst {
  Node = A + B + C
       
  edges = A->B + B->C + C->C
}",false,,,,,
mdrisco5,ThreeCycle,12,eval_input,2020-04-10 11:05:17,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B -> C + C -> A
}",true,,,,,
mgans,ThreeCycle,53,eval_input,2020-04-10 11:05:20,"inst myInst {
  Node = A + B + C
       
  edges = A->B + B->C + C->B
}",false,,,,,
mgans,ThreeCycle,54,eval_input,2020-04-10 11:05:25,"inst myInst {
  Node = A + B + C + D
       
  edges = A->B + B->C + C->D
}",false,,,,,
mgans,ThreeCycle,55,eval_input,2020-04-10 11:05:30,"inst myInst {
  Node = A + B + C + D
       
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
mdrisco5,ThreeCycle,13,eval_input,2020-04-10 11:05:34,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A
}",false,,,,,
mbeards1,ThreeCycle,30,eval_input,2020-04-10 11:05:36,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + A->D + D->C
}",false,,,,,
mdrisco5,ThreeCycle,14,eval_input,2020-04-10 11:05:37,"inst myInst {
  Node = A
       
  edges = A->A
}",false,,,,,
mgans,ThreeCycle,56,eval_input,2020-04-10 11:05:40,"inst myInst {
  Node = A + B + C + D + E
       
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
mgans,ThreeCycle,57,eval_input,2020-04-10 11:05:46,"inst myInst {
  Node = A + B + C + D + E
       
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
mgans,ThreeCycle,58,eval_input,2020-04-10 11:05:51,"inst myInst {
  Node = A + B + C + D + E
       
  edges = A->B + B->C + C->A + D->E + E->A
}",true,,,,,
mgans,ThreeCycle,59,eval_input,2020-04-10 11:05:58,"inst myInst {
  Node = A + B + C + D + E
       
  edges = A->B + B->C + C->A + D->A + E->A
}",true,,,,,
mdrisco5,ThreeCycle,15,eval_input,2020-04-10 11:06:01,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C -> B
}",false,,,,,
mgans,ThreeCycle,60,eval_input,2020-04-10 11:06:04,"inst myInst {
  Node = A + B + C + D + E
       
  edges = A->B + B->C + C->A + D->B + E->A
}",true,,,,,
mgans,ThreeCycle,61,eval_input,2020-04-10 11:06:08,"inst myInst {
  Node = A + B + C + D + E
       
  edges = A->B + B->C + C->E + D->B + E->A
}",false,,,,,
mgans,ThreeCycle,62,eval_input,2020-04-10 11:06:13,"inst myInst {
  Node = A + B + C + D + E
       
  edges = A->B + B->C + C->E + D->B + E->B
}",true,,,,,
mbeards1,ThreeCycle,31,eval_input,2020-04-10 11:06:18,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + A->D 
}",false,,,,,
mbeards1,ThreeCycle,32,eval_input,2020-04-10 11:06:21,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D 
}",false,,,,,
mbeards1,ThreeCycle,33,eval_input,2020-04-10 11:06:24,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C 
}",false,,,,,
mbeards1,ThreeCycle,34,eval_input,2020-04-10 11:06:26,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B 
}",false,,,,,
mbeards1,ThreeCycle,35,eval_input,2020-04-10 11:06:31,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = none
}",false,,,,,
mdrisco5,ThreeCycle,16,eval_input,2020-04-10 11:06:38,"inst myInst {
  Node = A
       + B
       + C
  edges = C->B + B->A + A -> C
}",true,,,,,
mbeards1,ThreeCycle,36,eval_input,2020-04-10 11:06:40,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> D
}",false,,,,,
mgans,ThreeCycle,63,quiz_answer,2020-04-10 11:06:44,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mbeards1,ThreeCycle,37,eval_input,2020-04-10 11:06:45,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> C
}",false,,,,,
mgans,ThreeCycle,64,quiz_answer,2020-04-10 11:06:47,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
mbeards1,ThreeCycle,38,eval_input,2020-04-10 11:06:49,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> C + C->A
}",false,,,,,
mgans,ThreeCycle,65,quiz_answer,2020-04-10 11:06:51,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mbeards1,ThreeCycle,39,eval_input,2020-04-10 11:06:57,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> C + B->C
}",false,,,,,
mgans,ThreeCycle,66,quiz_answer,2020-04-10 11:06:57,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
mgans,ThreeCycle,67,quiz_answer,2020-04-10 11:07:01,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
mgans,ThreeCycle,68,quiz_answer,2020-04-10 11:07:04,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
mbeards1,ThreeCycle,40,eval_input,2020-04-10 11:07:05,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B->C + A->C
}",false,,,,,
mgans,ThreeCycle,69,quiz_answer,2020-04-10 11:07:09,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mgans,ThreeCycle,70,quiz_answer,2020-04-10 11:07:12,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mgans,ThreeCycle,71,final_answer,2020-04-10 11:07:13,,,,,,"true if 3 nodes form a cycle, false otherwise",
mbeards1,ThreeCycle,41,eval_input,2020-04-10 11:07:14,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B->C + A->C + C->A
}",true,,,,,
mdrisco5,ThreeCycle,17,eval_input,2020-04-10 11:07:26,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = C->B + B->A + A -> C
}",true,,,,,
mgans,IsBipartite,72,eval_input,2020-04-10 11:07:31,"inst myInst {
  Node = none
       
  edges = none
}",true,,,,,
mbeards1,ThreeCycle,42,eval_input,2020-04-10 11:07:32,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B->C + A->C + C->A + C->D
}",true,,,,,
mgans,IsBipartite,73,eval_input,2020-04-10 11:07:41,"inst myInst {
  Node = A
       
  edges = none
}",true,,,,,
mbeards1,ThreeCycle,43,eval_input,2020-04-10 11:07:43,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B->C + A->C + C->A + C->D + D->C
}",true,,,,,
mgans,IsBipartite,74,eval_input,2020-04-10 11:07:48,"inst myInst {
  Node = A + B
       
  edges = none
}",true,,,,,
mgans,IsBipartite,75,eval_input,2020-04-10 11:07:55,"inst myInst {
  Node = A
       
  edges = A->A
}",false,,,,,
mgans,IsBipartite,76,eval_input,2020-04-10 11:08:02,"inst myInst {
  Node = A + B
       
  edges = A->B
}",true,,,,,
mbeards1,ThreeCycle,44,eval_input,2020-04-10 11:08:03,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->D + A -> B + B->C + A->C + C->A + C->D + D->C
}",true,,,,,
mbeards1,ThreeCycle,45,eval_input,2020-04-10 11:08:08,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->D + A -> B + A->C + C->A + C->D + D->C
}",true,,,,,
mgans,IsBipartite,77,eval_input,2020-04-10 11:08:09,"inst myInst {
  Node = A + B
       
  edges = A->B + B->A
}",true,,,,,
mbeards1,ThreeCycle,46,eval_input,2020-04-10 11:08:13,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->D + A -> B + C->A + C->D + D->C
}",true,,,,,
mgans,IsBipartite,78,eval_input,2020-04-10 11:08:16,"inst myInst {
  Node = A + B
       
  edges = A->A + B->A
}",false,,,,,
mbeards1,ThreeCycle,47,eval_input,2020-04-10 11:08:17,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges =  A -> B + C->A + C->D + D->C
}",false,,,,,
mgans,IsBipartite,79,eval_input,2020-04-10 11:08:19,"inst myInst {
  Node = A + B
       
  edges = A->A + B->B
}",false,,,,,
mgans,IsBipartite,80,eval_input,2020-04-10 11:08:25,"inst myInst {
  Node = A + B + C
       
  edges = A->A + B->B
}",false,,,,,
mgans,IsBipartite,81,eval_input,2020-04-10 11:08:29,"inst myInst {
  Node = A + B + C
       
  edges = A->B + B->C
}",true,,,,,
mgans,IsBipartite,82,eval_input,2020-04-10 11:08:35,"inst myInst {
  Node = A + B + C
       
  edges = A->B + B->C + C->A
}",false,,,,,
mdrisco5,ThreeCycle,18,quiz_answer,2020-04-10 11:08:51,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mgans,IsBipartite,83,eval_input,2020-04-10 11:08:55,"inst myInst {
  Node = A + B + C + D
       
  edges = A->B + B->C + C->A
}",false,,,,,
mdrisco5,ThreeCycle,19,quiz_answer,2020-04-10 11:08:57,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
mgans,IsBipartite,84,eval_input,2020-04-10 11:08:58,"inst myInst {
  Node = A + B + C + D
       
  edges = A->B + B->C + C->D
}",true,,,,,
mdrisco5,ThreeCycle,20,quiz_answer,2020-04-10 11:09:01,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mgans,IsBipartite,85,eval_input,2020-04-10 11:09:02,"inst myInst {
  Node = A + B + C + D
       
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
mgans,IsBipartite,86,eval_input,2020-04-10 11:09:15,"inst myInst {
  Node = A + B + C + D
       
  edges = A->B + B->C + C->D + D->B
}",false,,,,,
mgans,IsBipartite,87,eval_input,2020-04-10 11:09:18,"inst myInst {
  Node = A + B + C + D + E
       
  edges = A->B + B->C + C->D + D->B
}",false,,,,,
mdrisco5,ThreeCycle,21,quiz_answer,2020-04-10 11:09:21,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
mgans,IsBipartite,88,eval_input,2020-04-10 11:09:24,"inst myInst {
  Node = A + B + C + D + E
       
  edges = A->A + B->B + C->C + D->B
}",false,,,,,
mdrisco5,ThreeCycle,22,quiz_answer,2020-04-10 11:09:32,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
mgans,IsBipartite,89,eval_input,2020-04-10 11:09:36,"inst myInst {
  Node = A + B + C + D + E
      
  edges = A->E + B->E + C->E + D->B
}",true,,,,,
mdrisco5,ThreeCycle,23,quiz_answer,2020-04-10 11:09:37,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
mdrisco5,ThreeCycle,24,quiz_answer,2020-04-10 11:09:43,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mgans,IsBipartite,90,eval_input,2020-04-10 11:09:46,"inst myInst {
  Node = A + B + C + D + E
      
  edges = A->E + B->E + C->E + D->B + B->A
}",true,,,,,
mdrisco5,ThreeCycle,25,quiz_answer,2020-04-10 11:09:48,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mdrisco5,ThreeCycle,26,final_answer,2020-04-10 11:09:50,,,,,,"The predicate evaluates to True when there is a cycle with three nodes and each node is in the cycle (like a ring of size 3). A sub cycle with 3 Nodes but only 2 in the cycle, for example is not True.",
mgans,IsBipartite,91,eval_input,2020-04-10 11:09:50,"inst myInst {
  Node = A + B + C + D + E
      
  edges = A->E + B->D + C->E + D->B + B->A
}",true,,,,,
mgans,IsBipartite,92,eval_input,2020-04-10 11:09:56,"inst myInst {
  Node = A + B + C + D + E
      
  edges = A->B + B->D + C->E + D->B + B->A
}",true,,,,,
mdrisco5,IsDag,27,eval_input,2020-04-10 11:09:59,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = C->B + B->A + A -> C
}",false,,,,,
mgans,IsBipartite,93,eval_input,2020-04-10 11:10:06,"inst myInst {
  Node = A + B + C + D + E
      
  edges = A->B + B->D + C->E + D->B + D->A
}",false,,,,,
mbeards1,ThreeCycle,48,eval_input,2020-04-10 11:10:19,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges =  A -> B + B->C + A->C
}",false,,,,,
mdrisco5,IsDag,28,eval_input,2020-04-10 11:10:24,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = C->B + B->A + A -> C + C -> D + D -> A
}",false,,,,,
mbeards1,ThreeCycle,49,eval_input,2020-04-10 11:10:25,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges =  A -> B + B->C + A->C + C->A
}",true,,,,,
mgans,IsBipartite,94,quiz_answer,2020-04-10 11:10:25,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mgans,IsBipartite,95,quiz_answer,2020-04-10 11:10:28,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mgans,IsBipartite,96,quiz_answer,2020-04-10 11:10:31,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mgans,IsBipartite,97,quiz_answer,2020-04-10 11:10:35,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mgans,IsBipartite,98,quiz_answer,2020-04-10 11:10:39,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mgans,IsBipartite,99,quiz_answer,2020-04-10 11:10:42,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mgans,IsBipartite,100,quiz_answer,2020-04-10 11:10:47,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
mgans,IsBipartite,101,quiz_answer,2020-04-10 11:10:50,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",true,7,false,false,,
mdrisco5,IsDag,29,eval_input,2020-04-10 11:10:51,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = C->B + B->A + A -> D + D -> C
}",false,,,,,
mbeards1,ThreeCycle,50,eval_input,2020-04-10 11:11:07,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges =  A -> B + B->C + A->C + B->A
}",false,,,,,
mdrisco5,IsDag,30,eval_input,2020-04-10 11:11:09,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = none
}",true,,,,,
mdrisco5,IsDag,31,eval_input,2020-04-10 11:11:22,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> A
}",false,,,,,
mgans,IsBipartite,102,eval_input,2020-04-10 11:11:22,"inst myInst {
  Node = A + B + C + D + E
      
  edges = A->B + B->C + C->E + D->E + E->A
}",true,,,,,
mdrisco5,IsDag,32,eval_input,2020-04-10 11:11:31,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B
}",true,,,,,
mbeards1,ThreeCycle,51,eval_input,2020-04-10 11:11:35,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges =  A -> B + B->C + C->A + B->A
}",true,,,,,
mgans,IsBipartite,103,eval_input,2020-04-10 11:11:39,"inst myInst {
  Node = A + B + C + D + E
      
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
mdrisco5,IsDag,33,eval_input,2020-04-10 11:11:42,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> A
}",false,,,,,
mdrisco5,IsDag,34,eval_input,2020-04-10 11:11:45,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> C
}",true,,,,,
mgans,IsBipartite,104,eval_input,2020-04-10 11:11:49,"inst myInst {
  Node = A + B + C + D + E + F
      
  edges = A->B + B->C + C->D + D->E + E->F + F->A
}",true,,,,,
mdrisco5,IsDag,35,eval_input,2020-04-10 11:11:52,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A -> B + B -> C + C -> D
}",true,,,,,
mgans,IsBipartite,105,eval_input,2020-04-10 11:12:01,"inst myInst {
  Node = A + B + C + D + E + F + G
      
  edges = A->B + B->C + C->D + D->E + E->F + F->G + G->A
}",false,,,,,
mdrisco5,IsDag,36,eval_input,2020-04-10 11:12:03,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> B + B -> C + C -> D + A -> E
}",true,,,,,
mdrisco5,IsDag,37,eval_input,2020-04-10 11:12:22,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> B + B -> C + C -> D + A -> E + E ->B
}",true,,,,,
mgans,IsBipartite,106,quiz_answer,2020-04-10 11:12:29,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mgans,IsBipartite,107,quiz_answer,2020-04-10 11:12:33,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mgans,IsBipartite,108,quiz_answer,2020-04-10 11:12:36,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mdrisco5,IsDag,38,eval_input,2020-04-10 11:12:37,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A -> B + B -> C + C -> D + A -> E + D ->A
}",false,,,,,
mgans,IsBipartite,109,quiz_answer,2020-04-10 11:12:39,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mgans,IsBipartite,110,quiz_answer,2020-04-10 11:12:43,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mgans,IsBipartite,111,quiz_answer,2020-04-10 11:12:47,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mgans,IsBipartite,112,quiz_answer,2020-04-10 11:12:50,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
mgans,IsBipartite,113,quiz_answer,2020-04-10 11:12:53,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mgans,IsBipartite,114,final_answer,2020-04-10 11:12:54,,,,,,"false if odd-number cycle (i.e. 1, 3, 5, 7 nodes)",
mdrisco5,IsDag,39,eval_input,2020-04-10 11:13:31,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B + B -> C + C -> D + A -> E + D ->A + F-> G
}",false,,,,,
mbeards1,ThreeCycle,52,eval_input,2020-04-10 11:13:37,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges =  A->B + B->C + A->C
}",false,,,,,
mdrisco5,IsDag,40,eval_input,2020-04-10 11:13:38,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B + B -> C + C -> D + A -> E  + F-> G
}",true,,,,,
mbeards1,ThreeCycle,53,eval_input,2020-04-10 11:13:44,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges =  A->B + B->C + A->C + C->B
}",false,,,,,
mbeards1,ThreeCycle,54,eval_input,2020-04-10 11:13:51,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges =  A->B + B->C + A->C + C->B + B->A
}",true,,,,,
mbeards1,ThreeCycle,55,eval_input,2020-04-10 11:14:16,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges =  A->B + B->C  + C->B + B->A
}",false,,,,,
mbeards1,ThreeCycle,56,eval_input,2020-04-10 11:14:32,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges =  A->B + B->C + A->C + B->A
}",false,,,,,
mdrisco5,IsDag,41,quiz_answer,2020-04-10 11:14:51,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mdrisco5,IsDag,42,quiz_answer,2020-04-10 11:14:56,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mdrisco5,IsDag,43,quiz_answer,2020-04-10 11:15:00,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mdrisco5,IsDag,44,quiz_answer,2020-04-10 11:15:18,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mdrisco5,IsDag,45,quiz_answer,2020-04-10 11:15:27,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mdrisco5,IsDag,46,quiz_answer,2020-04-10 11:15:39,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mbeards1,ThreeCycle,57,eval_input,2020-04-10 11:15:42,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges =  A->B + B->C + C->A
}",true,,,,,
mdrisco5,IsDag,47,quiz_answer,2020-04-10 11:15:46,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mbeards1,ThreeCycle,58,quiz_answer,2020-04-10 11:16:00,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
mdrisco5,IsDag,48,quiz_answer,2020-04-10 11:16:01,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mdrisco5,IsDag,49,final_answer,2020-04-10 11:16:02,,,,,,"True when no cycles
False when there is a cycle",
mdrisco5,IsBipartite,50,eval_input,2020-04-10 11:16:12,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B + B -> C + C -> D + A -> E  + F-> G
}",true,,,,,
mbeards1,ThreeCycle,59,eval_input,2020-04-10 11:16:30,"inst myInst {
  Node = A
       + B
       + C
  edges =  A->B + B->C + C->A
}",true,,,,,
mbeards1,ThreeCycle,60,eval_input,2020-04-10 11:16:39,"inst myInst {
  Node = A
       + B
       + C
  edges =  A->B + B->C + C->B
}",false,,,,,
mdrisco5,IsBipartite,51,eval_input,2020-04-10 11:16:43,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = none
}",true,,,,,
mbeards1,ThreeCycle,61,eval_input,2020-04-10 11:16:43,"inst myInst {
  Node = A
       + B
       + C
  edges =  A->B + B->C + C->A
}",true,,,,,
mbeards1,ThreeCycle,62,eval_input,2020-04-10 11:16:53,"inst myInst {
  Node = A
       + B
       + C
  edges =  A->B + B->C + B->A + C->B
}",false,,,,,
mdrisco5,IsBipartite,52,eval_input,2020-04-10 11:16:54,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> A
}",false,,,,,
mdrisco5,IsBipartite,53,eval_input,2020-04-10 11:17:02,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B
}",true,,,,,
mdrisco5,IsBipartite,54,eval_input,2020-04-10 11:17:07,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B + B->A
}",true,,,,,
mdrisco5,IsBipartite,55,eval_input,2020-04-10 11:17:12,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B + B->A + B->B
}",false,,,,,
mbeards1,ThreeCycle,63,eval_input,2020-04-10 11:17:19,"inst myInst {
  Node = A
       + B
       + C
  edges =  A->B + B->C + B->A + C->B + C->A
}",true,,,,,
mdrisco5,IsBipartite,56,eval_input,2020-04-10 11:17:30,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B + B->C 
}",true,,,,,
mdrisco5,IsBipartite,57,eval_input,2020-04-10 11:17:35,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B + B->C + C -> A
}",false,,,,,
mbeards1,ThreeCycle,64,eval_input,2020-04-10 11:17:35,"inst myInst {
  Node = A
       + B
       + C
  edges =  A->B + B->C + C->A
}",true,,,,,
mbeards1,ThreeCycle,65,eval_input,2020-04-10 11:18:19,"inst myInst {
  Node = A
       + B
       + C
  edges =  A->B + B->C + C->B
  
}",false,,,,,
mbeards1,ThreeCycle,66,eval_input,2020-04-10 11:18:38,"inst myInst {
  Node = A
       + B
       + C
  edges =  B->A + B->C + C->B
  
}",false,,,,,
mdrisco5,IsBipartite,58,eval_input,2020-04-10 11:18:48,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B + B->C + C -> D + D -> C
}",true,,,,,
mbeards1,ThreeCycle,67,eval_input,2020-04-10 11:18:54,"inst myInst {
  Node = A
       + B
       + C
  edges =  B->A + B->C + C->A
  
}",false,,,,,
mdrisco5,IsBipartite,59,eval_input,2020-04-10 11:19:11,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B + B->C + C -> D + D -> B
}",false,,,,,
mbeards1,ThreeCycle,68,eval_input,2020-04-10 11:19:16,"inst myInst {
  Node = A
       + B
       + C
  edges =  B->A + B->C + A->C
  
}",false,,,,,
mbeards1,ThreeCycle,69,eval_input,2020-04-10 11:19:40,"inst myInst {
  Node = A
       + B
       + C
  edges =  B->A + B->C + A->C + C->B
  
}",true,,,,,
mdrisco5,IsBipartite,60,eval_input,2020-04-10 11:19:40,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B + B->C + C -> D + D -> D
}",false,,,,,
mdrisco5,IsBipartite,61,eval_input,2020-04-10 11:20:00,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B + B->C + C -> D + D -> B
}",false,,,,,
mbeards1,ThreeCycle,70,eval_input,2020-04-10 11:20:18,"inst myInst {
  Node = A
       + B
       + C
  edges =  A->A
  
}",false,,,,,
mdrisco5,IsBipartite,62,eval_input,2020-04-10 11:20:20,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B + B->C + C -> D + D -> C
}",true,,,,,
mbeards1,ThreeCycle,71,eval_input,2020-04-10 11:20:28,"inst myInst {
  Node = A

  edges =  A->A
  
}",false,,,,,
mbeards1,ThreeCycle,72,eval_input,2020-04-10 11:20:44,"inst myInst {
  Node = A + B + C

  edges =  A->C + C->A
  
}",false,,,,,
mdrisco5,IsBipartite,63,eval_input,2020-04-10 11:20:46,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B + B->C + C -> D + D -> C + C -> B
}",true,,,,,
mbeards1,ThreeCycle,73,eval_input,2020-04-10 11:20:58,"inst myInst {
  Node = A + C

  edges =  A->C + C->A
  
}",false,,,,,
mdrisco5,IsBipartite,64,eval_input,2020-04-10 11:21:31,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B + B->C + C -> D + D -> C + C -> B + B -> A
}",true,,,,,
mbeards1,ThreeCycle,74,eval_input,2020-04-10 11:21:33,"inst myInst {
  Node = A + B + C

  edges =  A->B + B->C + C->B + B->A
  
}",false,,,,,
mdrisco5,IsBipartite,65,eval_input,2020-04-10 11:21:41,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B + B->C + C -> D + D -> C + C -> B + B -> A
}",true,,,,,
mdrisco5,IsBipartite,66,eval_input,2020-04-10 11:21:49,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B + B->C + C -> D + D -> C + C -> B + B -> A + A -> A
}",false,,,,,
mbeards1,ThreeCycle,75,eval_input,2020-04-10 11:22:22,"inst myInst {
  Node = A + B + C

  edges =  A->B + B->C + A->C + B->A
  
}",false,,,,,
mdrisco5,IsBipartite,67,eval_input,2020-04-10 11:22:42,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B + B->C 
}",true,,,,,
mdrisco5,IsBipartite,68,eval_input,2020-04-10 11:22:47,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B  
}",true,,,,,
mdrisco5,IsBipartite,69,eval_input,2020-04-10 11:22:51,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = none  
}",true,,,,,
mdrisco5,IsBipartite,70,eval_input,2020-04-10 11:23:11,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B + B -> C + C -> A  
}",false,,,,,
mdrisco5,IsBipartite,71,quiz_answer,2020-04-10 11:23:25,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mbeards1,ThreeCycle,76,quiz_answer,2020-04-10 11:23:27,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mdrisco5,IsBipartite,72,quiz_answer,2020-04-10 11:23:29,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mbeards1,ThreeCycle,77,quiz_answer,2020-04-10 11:23:31,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
mbeards1,ThreeCycle,78,quiz_answer,2020-04-10 11:23:36,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mdrisco5,IsBipartite,73,quiz_answer,2020-04-10 11:23:37,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mbeards1,ThreeCycle,79,quiz_answer,2020-04-10 11:23:41,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
mbeards1,ThreeCycle,80,quiz_answer,2020-04-10 11:23:46,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
mbeards1,ThreeCycle,81,quiz_answer,2020-04-10 11:23:51,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
mdrisco5,IsBipartite,74,quiz_answer,2020-04-10 11:23:54,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mdrisco5,IsBipartite,75,quiz_answer,2020-04-10 11:24:06,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mbeards1,ThreeCycle,82,quiz_answer,2020-04-10 11:24:08,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,false,false,,
mdrisco5,IsBipartite,76,quiz_answer,2020-04-10 11:24:18,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mdrisco5,IsBipartite,77,quiz_answer,2020-04-10 11:24:29,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,true,false,,
mbeards1,ThreeCycle,83,quiz_answer,2020-04-10 11:24:37,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mbeards1,ThreeCycle,84,quiz_answer,2020-04-10 11:24:42,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
mdrisco5,IsBipartite,78,eval_input,2020-04-10 11:24:44,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B + B -> C + C -> D + D -> A
}",true,,,,,
mbeards1,ThreeCycle,85,quiz_answer,2020-04-10 11:24:49,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mbeards1,ThreeCycle,86,quiz_answer,2020-04-10 11:24:54,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
mbeards1,ThreeCycle,87,quiz_answer,2020-04-10 11:25:00,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,true,false,,
mdrisco5,IsBipartite,79,eval_input,2020-04-10 11:25:48,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
       + F
       + G
  edges = A -> B + B -> C + C -> D + D -> E + E->F + F -> A
}",true,,,,,
mdrisco5,IsBipartite,80,quiz_answer,2020-04-10 11:25:57,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mdrisco5,IsBipartite,81,quiz_answer,2020-04-10 11:26:02,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mdrisco5,IsBipartite,82,quiz_answer,2020-04-10 11:26:09,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mdrisco5,IsBipartite,83,quiz_answer,2020-04-10 11:26:20,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mdrisco5,IsBipartite,84,quiz_answer,2020-04-10 11:26:26,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mdrisco5,IsBipartite,85,quiz_answer,2020-04-10 11:26:30,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mdrisco5,IsBipartite,86,quiz_answer,2020-04-10 11:26:42,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
mdrisco5,IsBipartite,87,quiz_answer,2020-04-10 11:26:58,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mdrisco5,IsBipartite,88,final_answer,2020-04-10 11:27:00,,,,,,"True when there are no cycles or an even number of nodes in the cycles that exist
False when there is a cycle with an odd number of node involved",
mbeards1,ThreeCycle,88,eval_input,2020-04-10 11:29:21,"inst myInst {
  Node = A + B + C

  edges =  none
  
  
}",false,,,,,
mbeards1,ThreeCycle,89,eval_input,2020-04-10 11:31:08,"inst myInst {
  Node = A + B + C

  edges =  A->C
  
  
}",false,,,,,
mbeards1,ThreeCycle,90,eval_input,2020-04-10 11:31:12,"inst myInst {
  Node = A + B + C

  edges =  A->C + B->C
  
  
}",false,,,,,
mbeards1,ThreeCycle,91,eval_input,2020-04-10 11:31:20,"inst myInst {
  Node = A + B + C

  edges =  A->C + B->C + A->B
  
  
}",false,,,,,
mbeards1,ThreeCycle,92,eval_input,2020-04-10 11:31:27,"inst myInst {
  Node = A + B + C

  edges =  A->C + C->A
  
  
}",false,,,,,
mbeards1,ThreeCycle,93,eval_input,2020-04-10 11:31:36,"inst myInst {
  Node = A + B + C

  edges =  A->A
  
  
}",false,,,,,
mbeards1,ThreeCycle,94,eval_input,2020-04-10 11:31:40,"inst myInst {
  Node = A 

  edges =  A->A
  
  
}",false,,,,,
mbeards1,ThreeCycle,95,eval_input,2020-04-10 11:31:43,"inst myInst {
  Node = A 

  edges =  none
  
  
}",false,,,,,
mbeards1,ThreeCycle,96,eval_input,2020-04-10 11:31:51,"inst myInst {
  Node = A + B

  edges =  A->B
  
  
}",false,,,,,
mbeards1,ThreeCycle,97,eval_input,2020-04-10 11:31:56,"inst myInst {
  Node = A + B

  edges =  A->B + B->A
  
  
}",false,,,,,
mbeards1,ThreeCycle,98,eval_input,2020-04-10 11:32:03,"inst myInst {
  Node = A + B

  edges =  A->B + B->A + A->A + B->B
  
  
}",false,,,,,
mbeards1,ThreeCycle,99,eval_input,2020-04-10 11:32:15,"inst myInst {
  Node = A + B

  edges =  none
  
  
}",false,,,,,
mbeards1,ThreeCycle,100,eval_input,2020-04-10 11:32:26,"inst myInst {
  Node = A + B + C

  edges =  A->B + B->C
  
  
}",false,,,,,
mbeards1,ThreeCycle,101,eval_input,2020-04-10 11:32:32,"inst myInst {
  Node = A + B + C

  edges =  A->B + B->C + A->C
  
  
}",false,,,,,
mbeards1,ThreeCycle,102,eval_input,2020-04-10 11:32:49,"inst myInst {
  Node = A + B + C

  edges =  A->B + B->C + C->A
}",true,,,,,
mbeards1,ThreeCycle,103,eval_input,2020-04-10 11:32:57,"inst myInst {
  Node = A + B + C

  edges =  A->B + B->C + C->A + C->B
}",true,,,,,
mbeards1,ThreeCycle,104,eval_input,2020-04-10 11:33:02,"inst myInst {
  Node = A + B + C

  edges =  A->B + B->C + C->A + C->B + B->A
}",true,,,,,
mbeards1,ThreeCycle,105,eval_input,2020-04-10 11:33:06,"inst myInst {
  Node = A + B + C

  edges =  A->B + B->C + C->B + B->A
}",false,,,,,
mbeards1,ThreeCycle,106,eval_input,2020-04-10 11:34:20,"inst myInst {
  Node = A + B + C

  edges =  A->B + B->C + C->B + B->A
}",false,,,,,
mbeards1,ThreeCycle,107,eval_input,2020-04-10 11:34:39,"inst myInst {
  Node = A + B + C

  edges =  A->B + B->C + C->B + B->A+ C->A
}",true,,,,,
mbeards1,ThreeCycle,108,eval_input,2020-04-10 11:35:08,"inst myInst {
  Node = A + B + C

  edges =  A->B + B->C + A->C
}",false,,,,,
mbeards1,ThreeCycle,109,eval_input,2020-04-10 11:35:33,"inst myInst {
  Node = A + B + C

  edges =  A->B + B->C + C->A
}",true,,,,,
mbeards1,ThreeCycle,110,eval_input,2020-04-10 11:35:38,"inst myInst {
  Node = A + B + C

  edges =  A->B + B->C + C->A + A->A
}",true,,,,,
mbeards1,ThreeCycle,111,eval_input,2020-04-10 11:35:50,"inst myInst {
  Node = A + B + C + D

  edges =  A->B + B->C + C->A 
}",true,,,,,
mbeards1,ThreeCycle,112,eval_input,2020-04-10 11:36:12,"inst myInst {
  Node = A + B + C + D

  edges =  A->B + B->C + C->D + D->A
}",false,,,,,
mbeards1,ThreeCycle,113,eval_input,2020-04-10 11:36:30,"inst myInst {
  Node = A + B + C + D

  edges =  A->B + B->C + C->D + D->A + C->A
}",true,,,,,
mbeards1,ThreeCycle,114,eval_input,2020-04-10 11:36:58,"inst myInst {
  Node = A + B + C + D

  edges =  A->B + B->C + C->D + D->A + A->C
}",true,,,,,
mbeards1,ThreeCycle,115,eval_input,2020-04-10 11:37:02,"inst myInst {
  Node = A + B + C + D

  edges =  A->B + B->C + C->D + D->A + B->D
}",true,,,,,
mbeards1,ThreeCycle,116,eval_input,2020-04-10 11:37:19,"inst myInst {
  Node = A + B + C + D

  edges =  A->B + B->C + C->D + D->A + A->D
}",false,,,,,
mbeards1,ThreeCycle,117,eval_input,2020-04-10 11:37:55,"inst myInst {
  Node = A + B + C + D

  edges =  A->B + B->C + C->D + D->A 
}",false,,,,,
mbeards1,ThreeCycle,118,eval_input,2020-04-10 11:38:26,"inst myInst {
  Node = A + B + C + D

  edges =  A->B + B->C + C->D + C->A
}",true,,,,,
mbeards1,ThreeCycle,119,quiz_answer,2020-04-10 11:38:52,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mbeards1,ThreeCycle,120,quiz_answer,2020-04-10 11:38:55,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
mbeards1,ThreeCycle,121,quiz_answer,2020-04-10 11:38:58,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mbeards1,ThreeCycle,122,quiz_answer,2020-04-10 11:39:15,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
mbeards1,ThreeCycle,123,quiz_answer,2020-04-10 11:39:21,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
mbeards1,ThreeCycle,124,quiz_answer,2020-04-10 11:39:25,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
mbeards1,ThreeCycle,125,quiz_answer,2020-04-10 11:39:38,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mbeards1,ThreeCycle,126,quiz_answer,2020-04-10 11:40:01,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mbeards1,ThreeCycle,127,final_answer,2020-04-10 11:40:02,,,,,,true if there is a three node cycle,
mbeards1,IsBipartite,128,eval_input,2020-04-10 11:40:43,"inst myInst {
  Node = A + B + C + D

  edges =  A->B + B->C + C->D + C->A
}",false,,,,,
mbeards1,IsBipartite,129,eval_input,2020-04-10 11:40:50,"inst myInst {
  Node = A 

  edges =  none
}",true,,,,,
mbeards1,IsBipartite,130,eval_input,2020-04-10 11:40:55,"inst myInst {
  Node = A 

  edges =  A->A
}",false,,,,,
mbeards1,IsBipartite,131,eval_input,2020-04-10 11:41:28,"inst myInst {
  Node = none

  edges =  none
}",true,,,,,
mbeards1,IsBipartite,132,eval_input,2020-04-10 11:41:35,"inst myInst {
  Node = A + B

  edges =  A->B
}",true,,,,,
mbeards1,IsBipartite,133,eval_input,2020-04-10 11:41:45,"inst myInst {
  Node = A + B

  edges =  A->B + B->A
}",true,,,,,
mbeards1,IsBipartite,134,eval_input,2020-04-10 11:41:55,"inst myInst {
  Node = A + B

  edges =  A->B + B->A + A->A
}",false,,,,,
mbeards1,IsBipartite,135,eval_input,2020-04-10 11:42:10,"inst myInst {
  Node = A + B + C

  edges =  A->B + B->C
}",true,,,,,
mbeards1,IsBipartite,136,eval_input,2020-04-10 11:42:57,"inst myInst {
  Node = A + B + C

  edges =  A->B + B->C + C->A
  
}",false,,,,,
mbeards1,IsBipartite,137,eval_input,2020-04-10 11:43:08,"inst myInst {
  Node = A + B + C

  edges =  A->B + B->C + C->B
}",true,,,,,
mbeards1,IsBipartite,138,eval_input,2020-04-10 11:43:30,"inst myInst {
  Node = A + B + C

  edges =  A->B + B->C + C->B + B->A
}",true,,,,,
mbeards1,IsBipartite,139,eval_input,2020-04-10 11:43:45,"inst myInst {
  Node = A + B + C

  edges =  A->B + B->C + C->B + B->A + A->C
}",false,,,,,
mbeards1,IsBipartite,140,eval_input,2020-04-10 11:44:33,"inst myInst {
  Node = A + B + C + D

  edges =  A->B + B->C + C->D
}",true,,,,,
mbeards1,IsBipartite,141,eval_input,2020-04-10 11:44:39,"inst myInst {
  Node = A + B + C + D

  edges =  A->B + B->C + C->D + D->A
}",true,,,,,
mbeards1,IsBipartite,142,eval_input,2020-04-10 11:44:58,"inst myInst {
  Node = A + B + C + D

  edges =  A->B + B->C + C->A
}",false,,,,,
mbeards1,IsBipartite,143,eval_input,2020-04-10 11:45:22,"inst myInst {
  Node = A + B + C + D

  edges =  A->B + B->C + C->A + C->D + D->A
}",false,,,,,
mbeards1,IsBipartite,144,eval_input,2020-04-10 11:45:55,"inst myInst {
  Node = A + B + C + D

  edges =  A->B + B->C + C->A + C->D + D->A + A->A
}",false,,,,,
mbeards1,IsBipartite,145,eval_input,2020-04-10 11:46:05,"inst myInst {
  Node = A + B + C + D

  edges =  A->B + B->C + C->D + D->A 
}",true,,,,,
mbeards1,IsBipartite,146,eval_input,2020-04-10 11:46:11,"inst myInst {
  Node = A + B + C + D

  edges =  A->B + B->C + C->D + D->A + D->D
}",false,,,,,
mbeards1,IsBipartite,147,eval_input,2020-04-10 11:46:17,"inst myInst {
  Node = A + B + C + D

  edges =  A->B + B->C + C->D + D->A + D->C
}",true,,,,,
mbeards1,IsBipartite,148,quiz_answer,2020-04-10 11:46:33,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mbeards1,IsBipartite,149,quiz_answer,2020-04-10 11:46:37,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mbeards1,IsBipartite,150,quiz_answer,2020-04-10 11:46:42,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mbeards1,IsBipartite,151,quiz_answer,2020-04-10 11:47:08,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mbeards1,IsBipartite,152,quiz_answer,2020-04-10 11:47:14,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mbeards1,IsBipartite,153,quiz_answer,2020-04-10 11:47:26,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mbeards1,IsBipartite,154,quiz_answer,2020-04-10 11:47:41,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
mbeards1,IsBipartite,155,quiz_answer,2020-04-10 11:47:59,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",true,7,false,false,,
mbeards1,IsBipartite,156,eval_input,2020-04-10 11:48:42,"inst myInst {
  Node = A + B + C + D + E

  edges =  A->B + B->C + C->D + D->E + E->A
}",false,,,,,
mbeards1,IsBipartite,157,quiz_answer,2020-04-10 11:48:56,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mbeards1,IsBipartite,158,quiz_answer,2020-04-10 11:48:59,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mbeards1,IsBipartite,159,quiz_answer,2020-04-10 11:49:03,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mbeards1,IsBipartite,160,quiz_answer,2020-04-10 11:49:06,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mbeards1,IsBipartite,161,quiz_answer,2020-04-10 11:49:13,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mbeards1,IsBipartite,162,quiz_answer,2020-04-10 11:49:17,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mbeards1,IsBipartite,163,quiz_answer,2020-04-10 11:49:22,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
mbeards1,IsBipartite,164,quiz_answer,2020-04-10 11:49:26,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mbeards1,IsBipartite,165,final_answer,2020-04-10 11:49:27,,,,,,true if no cycles with an odd number of an elements,
mlunghi,ThreeCycle,0,eval_input,2020-04-10 12:46:43,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
mlunghi,ThreeCycle,1,eval_input,2020-04-10 12:46:49,"inst myInst {
  Node = A
       + B
  edges = none
}",false,,,,,
mlunghi,ThreeCycle,2,eval_input,2020-04-10 12:46:58,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",false,,,,,
mlunghi,ThreeCycle,3,eval_input,2020-04-10 12:47:04,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
}",false,,,,,
mlunghi,ThreeCycle,4,eval_input,2020-04-10 12:47:11,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",true,,,,,
mlunghi,ThreeCycle,5,eval_input,2020-04-10 12:47:22,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A
}",false,,,,,
mlunghi,ThreeCycle,6,eval_input,2020-04-10 12:47:44,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + A->C
}",false,,,,,
mlunghi,ThreeCycle,7,eval_input,2020-04-10 12:47:54,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + A->C + B->C
}",false,,,,,
mlunghi,ThreeCycle,8,eval_input,2020-04-10 12:48:07,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + B->A
}",false,,,,,
mlunghi,ThreeCycle,9,eval_input,2020-04-10 12:48:09,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",true,,,,,
mlunghi,ThreeCycle,10,quiz_answer,2020-04-10 12:48:49,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
mlunghi,ThreeCycle,11,eval_input,2020-04-10 12:49:16,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
mlunghi,ThreeCycle,12,eval_input,2020-04-10 12:49:34,"inst myInst {
  Node = A + B
  edges = A->A
}",false,,,,,
mlunghi,ThreeCycle,13,eval_input,2020-04-10 12:49:38,"inst myInst {
  Node = A + B
  edges = A->B
}",false,,,,,
mlunghi,ThreeCycle,14,eval_input,2020-04-10 12:49:42,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
mlunghi,ThreeCycle,15,eval_input,2020-04-10 12:50:04,"inst myInst {
  Node = A 
  edges = none
}",false,,,,,
mlunghi,ThreeCycle,16,eval_input,2020-04-10 12:50:29,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
mlunghi,ThreeCycle,17,eval_input,2020-04-10 12:50:38,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
}",true,,,,,
mlunghi,ThreeCycle,18,quiz_answer,2020-04-10 12:50:52,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mlunghi,ThreeCycle,19,quiz_answer,2020-04-10 12:50:55,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
mlunghi,ThreeCycle,20,quiz_answer,2020-04-10 12:50:58,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mlunghi,ThreeCycle,21,quiz_answer,2020-04-10 12:51:03,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
mlunghi,ThreeCycle,22,quiz_answer,2020-04-10 12:51:07,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
mlunghi,ThreeCycle,23,quiz_answer,2020-04-10 12:51:10,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
mlunghi,ThreeCycle,24,quiz_answer,2020-04-10 12:51:15,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mlunghi,ThreeCycle,25,quiz_answer,2020-04-10 12:51:17,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mlunghi,ThreeCycle,26,final_answer,2020-04-10 12:51:18,,,,,,Only returns true if the instance has a cycle of 3 nodes.,
mlunghi,IsBipartite,27,eval_input,2020-04-10 12:51:28,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
}",false,,,,,
mlunghi,IsBipartite,28,eval_input,2020-04-10 12:51:39,"inst myInst {
  Node = A 
  edges = none
}",true,,,,,
mlunghi,IsBipartite,29,eval_input,2020-04-10 12:51:43,"inst myInst {
  Node = A 
  edges = A->A
}",false,,,,,
mlunghi,IsBipartite,30,eval_input,2020-04-10 12:52:15,"inst myInst {
  Node = A + B
  edges = A->A + A->B
}",false,,,,,
mlunghi,IsBipartite,31,eval_input,2020-04-10 12:52:21,"inst myInst {
  Node = A + B
  edges = A->B
}",true,,,,,
mlunghi,IsBipartite,32,eval_input,2020-04-10 12:52:29,"inst myInst {
  Node = A + B + C
  edges = A->B
}",true,,,,,
mlunghi,IsBipartite,33,eval_input,2020-04-10 12:52:37,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
mlunghi,IsBipartite,34,eval_input,2020-04-10 12:52:41,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
mlunghi,IsBipartite,35,quiz_answer,2020-04-10 12:53:00,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mlunghi,IsBipartite,36,quiz_answer,2020-04-10 12:53:03,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mlunghi,IsBipartite,37,quiz_answer,2020-04-10 12:53:06,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,true,false,,
mlunghi,IsBipartite,38,eval_input,2020-04-10 12:53:18,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
mlunghi,IsBipartite,39,eval_input,2020-04-10 12:53:28,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",true,,,,,
mlunghi,IsBipartite,40,eval_input,2020-04-10 12:53:40,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
mlunghi,IsBipartite,41,eval_input,2020-04-10 12:53:53,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C 
}",true,,,,,
mlunghi,IsBipartite,42,eval_input,2020-04-10 12:54:00,"inst myInst {
  Node = A + B + C + D
  edges = B->C + C->D
}",true,,,,,
mlunghi,IsBipartite,43,quiz_answer,2020-04-10 12:54:10,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mlunghi,IsBipartite,44,quiz_answer,2020-04-10 12:54:14,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mlunghi,IsBipartite,45,quiz_answer,2020-04-10 12:54:17,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mlunghi,IsBipartite,46,quiz_answer,2020-04-10 12:54:24,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
mlunghi,IsBipartite,47,eval_input,2020-04-10 12:54:45,"inst myInst {
  Node = A + B + C + D
  edges = B->C + C->D + D->A
}",true,,,,,
mlunghi,IsBipartite,48,eval_input,2020-04-10 12:55:09,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
mlunghi,IsBipartite,49,eval_input,2020-04-10 12:55:30,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->A
}",true,,,,,
mlunghi,IsBipartite,50,quiz_answer,2020-04-10 12:55:36,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mlunghi,IsBipartite,51,quiz_answer,2020-04-10 12:55:38,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mlunghi,IsBipartite,52,quiz_answer,2020-04-10 12:55:42,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mlunghi,IsBipartite,53,quiz_answer,2020-04-10 12:55:44,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
mlunghi,IsBipartite,54,eval_input,2020-04-10 12:55:49,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->A
}",true,,,,,
mlunghi,IsBipartite,55,quiz_answer,2020-04-10 12:56:00,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mlunghi,IsBipartite,56,quiz_answer,2020-04-10 12:56:02,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mlunghi,IsBipartite,57,quiz_answer,2020-04-10 12:56:06,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mlunghi,IsBipartite,58,quiz_answer,2020-04-10 12:56:08,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mlunghi,IsBipartite,59,quiz_answer,2020-04-10 12:56:25,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,false,false,,
mlunghi,IsBipartite,60,quiz_answer,2020-04-10 12:56:58,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mlunghi,IsBipartite,61,quiz_answer,2020-04-10 12:57:01,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mlunghi,IsBipartite,62,quiz_answer,2020-04-10 12:57:03,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mlunghi,IsBipartite,63,quiz_answer,2020-04-10 12:57:09,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mlunghi,IsBipartite,64,quiz_answer,2020-04-10 12:57:16,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mlunghi,IsBipartite,65,quiz_answer,2020-04-10 12:57:31,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,true,false,,
mlunghi,IsBipartite,66,quiz_answer,2020-04-10 12:58:02,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mlunghi,IsBipartite,67,quiz_answer,2020-04-10 12:58:05,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mlunghi,IsBipartite,68,quiz_answer,2020-04-10 12:58:07,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mlunghi,IsBipartite,69,quiz_answer,2020-04-10 12:58:30,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mlunghi,IsBipartite,70,quiz_answer,2020-04-10 12:58:49,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,false,false,,
mlunghi,IsBipartite,71,eval_input,2020-04-10 12:59:28,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
mlunghi,IsBipartite,72,quiz_answer,2020-04-10 13:00:59,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
mlunghi,IsBipartite,73,eval_input,2020-04-10 13:01:50,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",true,,,,,
mlunghi,IsBipartite,74,eval_input,2020-04-10 13:01:56,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + B->C
}",true,,,,,
mlunghi,IsBipartite,75,eval_input,2020-04-10 13:02:02,"inst myInst {
  Node = A + B + C
  edges = none
}",true,,,,,
mlunghi,IsBipartite,76,eval_input,2020-04-10 13:02:06,"inst myInst {
  Node = A + B + C + D
  edges = none
}",true,,,,,
mlunghi,IsBipartite,77,eval_input,2020-04-10 13:02:22,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
}",false,,,,,
mlunghi,IsBipartite,78,quiz_answer,2020-04-10 13:02:32,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mlunghi,IsBipartite,79,quiz_answer,2020-04-10 13:02:34,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mlunghi,IsBipartite,80,quiz_answer,2020-04-10 13:02:48,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mlunghi,IsBipartite,81,quiz_answer,2020-04-10 13:03:04,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mlunghi,IsBipartite,82,quiz_answer,2020-04-10 13:03:27,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mlunghi,IsBipartite,83,quiz_answer,2020-04-10 13:03:46,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mlunghi,IsBipartite,84,quiz_answer,2020-04-10 13:04:08,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
mlunghi,IsBipartite,85,quiz_answer,2020-04-10 13:04:30,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mlunghi,IsBipartite,86,final_answer,2020-04-10 13:04:31,,,,,,false if odd number of nodes in cycle,
mlunghi,IsDag,87,eval_input,2020-04-10 13:05:55,"inst myInst {
  Node = A + B + C + D
  edges = none
}",true,,,,,
mlunghi,IsDag,88,eval_input,2020-04-10 13:06:01,"inst myInst {
  Node = A + B + C + D
  edges = A->A
}",false,,,,,
mlunghi,IsDag,89,eval_input,2020-04-10 13:06:04,"inst myInst {
  Node = A + B + C + D
  edges = A->B
}",true,,,,,
mlunghi,IsDag,90,eval_input,2020-04-10 13:06:07,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->A
}",false,,,,,
mlunghi,IsDag,91,eval_input,2020-04-10 13:06:15,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
}",false,,,,,
mlunghi,IsDag,92,quiz_answer,2020-04-10 13:06:28,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mlunghi,IsDag,93,quiz_answer,2020-04-10 13:06:49,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mlunghi,IsDag,94,quiz_answer,2020-04-10 13:06:59,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mlunghi,IsDag,95,quiz_answer,2020-04-10 13:07:24,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mlunghi,IsDag,96,quiz_answer,2020-04-10 13:07:39,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mlunghi,IsDag,97,quiz_answer,2020-04-10 13:07:52,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mlunghi,IsDag,98,quiz_answer,2020-04-10 13:08:06,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mlunghi,IsDag,100,final_answer,2020-04-10 13:08:16,,,,,,"True if graph is acylic, false otherwise.",
mlunghi,IsDag,99,quiz_answer,2020-04-10 13:08:16,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
jmcclel1,ThreeCycle,0,eval_input,2020-04-10 15:58:06,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
jmcclel1,ThreeCycle,1,eval_input,2020-04-10 15:58:21,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",false,,,,,
jmcclel1,ThreeCycle,2,eval_input,2020-04-10 15:58:29,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
}",false,,,,,
jmcclel1,ThreeCycle,3,eval_input,2020-04-10 15:58:39,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",true,,,,,
jmcclel1,ThreeCycle,4,eval_input,2020-04-10 15:58:48,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->A
}",true,,,,,
jmcclel1,ThreeCycle,5,eval_input,2020-04-10 15:58:58,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->A + D->A
}",true,,,,,
jmcclel1,ThreeCycle,6,eval_input,2020-04-10 15:59:08,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A
}",false,,,,,
jmcclel1,ThreeCycle,7,eval_input,2020-04-10 15:59:44,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A + A->C + B->C
}",false,,,,,
jmcclel1,ThreeCycle,8,eval_input,2020-04-10 16:00:20,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A
}",false,,,,,
jmcclel1,ThreeCycle,9,eval_input,2020-04-10 16:01:10,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
jmcclel1,ThreeCycle,10,eval_input,2020-04-10 16:01:47,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->A + B->D + D->A
}",true,,,,,
mheller6,IsDag,0,eval_input,2020-04-10 16:02:37,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
jmcclel1,ThreeCycle,11,eval_input,2020-04-10 16:02:39,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->A + B->D + D->A + C->B
}",true,,,,,
mheller6,IsDag,1,eval_input,2020-04-10 16:03:27,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",false,,,,,
mheller6,IsDag,2,eval_input,2020-04-10 16:03:33,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
}",true,,,,,
jmcclel1,ThreeCycle,12,quiz_answer,2020-04-10 16:03:40,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mheller6,IsDag,3,eval_input,2020-04-10 16:03:43,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->B
}",false,,,,,
jmcclel1,ThreeCycle,13,quiz_answer,2020-04-10 16:03:45,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
jmcclel1,ThreeCycle,14,quiz_answer,2020-04-10 16:03:50,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
jmcclel1,ThreeCycle,15,quiz_answer,2020-04-10 16:03:57,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
jmcclel1,ThreeCycle,16,quiz_answer,2020-04-10 16:04:03,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
mheller6,IsDag,4,eval_input,2020-04-10 16:04:04,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + C->C + C->B
}",false,,,,,
jmcclel1,ThreeCycle,17,quiz_answer,2020-04-10 16:04:09,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
mheller6,IsDag,5,eval_input,2020-04-10 16:04:10,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + C->A + C->B
}",true,,,,,
jmcclel1,ThreeCycle,18,quiz_answer,2020-04-10 16:04:24,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mheller6,IsDag,6,eval_input,2020-04-10 16:04:32,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A + C->C + B->B
}",false,,,,,
mheller6,IsDag,7,eval_input,2020-04-10 16:04:37,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A + C->B + B->B
}",false,,,,,
jmcclel1,ThreeCycle,19,quiz_answer,2020-04-10 16:04:41,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mheller6,IsDag,8,eval_input,2020-04-10 16:04:41,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A + C->C + B->B
}",false,,,,,
jmcclel1,ThreeCycle,20,final_answer,2020-04-10 16:04:45,,,,,,"There exists a 3-cycle (distinct nodes A, B, and C such that A->B, B->C, and C->A are in edges)",
jmcclel1,IsDag,21,eval_input,2020-04-10 16:05:12,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->A + B->D + D->A + C->B
}",false,,,,,
mheller6,IsDag,9,eval_input,2020-04-10 16:05:38,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A + C->C
}",false,,,,,
mheller6,IsDag,10,eval_input,2020-04-10 16:05:58,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A + C->B
}",false,,,,,
mheller6,IsDag,11,eval_input,2020-04-10 16:06:01,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A + C->A
}",false,,,,,
mheller6,IsDag,12,eval_input,2020-04-10 16:06:15,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A + C->A
}",false,,,,,
jmcclel1,IsDag,22,eval_input,2020-04-10 16:06:30,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = none
}",true,,,,,
jmcclel1,IsDag,23,eval_input,2020-04-10 16:06:44,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->A
}",false,,,,,
jmcclel1,IsDag,24,eval_input,2020-04-10 16:06:49,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C
}",true,,,,,
jmcclel1,IsDag,25,eval_input,2020-04-10 16:06:57,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->A
}",false,,,,,
jmcclel1,IsDag,26,eval_input,2020-04-10 16:07:05,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->A
}",false,,,,,
jmcclel1,IsDag,27,eval_input,2020-04-10 16:07:17,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + D->C
}",true,,,,,
jmcclel1,IsDag,28,eval_input,2020-04-10 16:07:49,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + D->C + B->D
}",true,,,,,
mheller6,IsDag,13,eval_input,2020-04-10 16:08:17,"inst myInst {
  Node = A
       + B
       + C
  edges = C->A
}",true,,,,,
jmcclel1,IsDag,29,eval_input,2020-04-10 16:08:18,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B
}",true,,,,,
mheller6,IsDag,14,eval_input,2020-04-10 16:08:24,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A
}",false,,,,,
mheller6,IsDag,15,eval_input,2020-04-10 16:08:29,"inst myInst {
  Node = A
       + B
       + C
  edges = B->B
}",false,,,,,
mheller6,IsDag,16,eval_input,2020-04-10 16:08:34,"inst myInst {
  Node = A
       + B
       + C
  edges = C->C
}",false,,,,,
jmcclel1,IsDag,30,quiz_answer,2020-04-10 16:09:00,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
jmcclel1,IsDag,31,quiz_answer,2020-04-10 16:09:04,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
jmcclel1,IsDag,32,quiz_answer,2020-04-10 16:09:08,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mheller6,IsDag,17,quiz_answer,2020-04-10 16:09:15,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mheller6,IsDag,18,quiz_answer,2020-04-10 16:09:23,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
jmcclel1,IsDag,33,quiz_answer,2020-04-10 16:09:28,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
mheller6,IsDag,19,quiz_answer,2020-04-10 16:09:30,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mheller6,IsDag,20,quiz_answer,2020-04-10 16:09:39,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mheller6,IsDag,21,quiz_answer,2020-04-10 16:09:46,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mheller6,IsDag,22,quiz_answer,2020-04-10 16:09:54,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mheller6,IsDag,23,quiz_answer,2020-04-10 16:10:00,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mheller6,IsDag,24,quiz_answer,2020-04-10 16:10:06,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mheller6,IsDag,25,final_answer,2020-04-10 16:10:08,,,,,,I think the predicate returns true if the graph formed by the edges is acyclic,
jmcclel1,IsDag,34,eval_input,2020-04-10 16:10:35,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + A->C
}",true,,,,,
mheller6,IsBipartite,26,eval_input,2020-04-10 16:10:50,"inst myInst {
  Node = A
       + B
       + C
  edges = C->C
}",false,,,,,
jmcclel1,IsDag,35,quiz_answer,2020-04-10 16:11:02,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mheller6,IsBipartite,27,eval_input,2020-04-10 16:11:04,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
jmcclel1,IsDag,36,quiz_answer,2020-04-10 16:11:08,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mheller6,IsBipartite,28,eval_input,2020-04-10 16:11:12,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A
}",false,,,,,
jmcclel1,IsDag,37,quiz_answer,2020-04-10 16:11:12,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
jmcclel1,IsDag,38,quiz_answer,2020-04-10 16:11:18,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
mheller6,IsBipartite,29,eval_input,2020-04-10 16:11:18,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
mheller6,IsBipartite,30,eval_input,2020-04-10 16:11:23,"inst myInst {
  Node = A
       + B
       + C
  edges = B->B
}",false,,,,,
mheller6,IsBipartite,31,eval_input,2020-04-10 16:11:26,"inst myInst {
  Node = A
       + B
       + C
  edges = B->C
}",true,,,,,
mheller6,IsBipartite,32,eval_input,2020-04-10 16:11:34,"inst myInst {
  Node = A
       + B
       + C
  edges = B->C + C->A + A->B
}",false,,,,,
mheller6,IsBipartite,33,eval_input,2020-04-10 16:11:39,"inst myInst {
  Node = A
       + B
       + C
  edges = C->C
}",false,,,,,
mheller6,IsBipartite,34,eval_input,2020-04-10 16:11:47,"inst myInst {
  Node = A
       + B
       + C
  edges = C->C
}",false,,,,,
mheller6,IsBipartite,35,eval_input,2020-04-10 16:12:05,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A
}",true,,,,,
jmcclel1,IsDag,39,quiz_answer,2020-04-10 16:12:14,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
jmcclel1,IsDag,40,quiz_answer,2020-04-10 16:12:17,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
jmcclel1,IsDag,41,quiz_answer,2020-04-10 16:12:20,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
jmcclel1,IsDag,42,quiz_answer,2020-04-10 16:12:24,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
jmcclel1,IsDag,43,quiz_answer,2020-04-10 16:12:30,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
jmcclel1,IsDag,44,quiz_answer,2020-04-10 16:12:43,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
jmcclel1,IsDag,45,quiz_answer,2020-04-10 16:12:52,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mheller6,IsBipartite,36,eval_input,2020-04-10 16:12:57,"inst myInst {
  Node = A
       + B
       + C
  edges = C->B + B->A
}",true,,,,,
jmcclel1,IsDag,46,quiz_answer,2020-04-10 16:12:58,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
jmcclel1,IsDag,47,final_answer,2020-04-10 16:13:00,,,,,,"edges is acyclic (under the directed interpretation)
(I keep messing up in answering)",
jmcclel1,IsBipartite,48,eval_input,2020-04-10 16:13:12,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + A->C
}",true,,,,,
jmcclel1,IsBipartite,49,eval_input,2020-04-10 16:13:30,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
jmcclel1,IsBipartite,50,eval_input,2020-04-10 16:13:43,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
jmcclel1,IsBipartite,51,eval_input,2020-04-10 16:13:55,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A
}",true,,,,,
jmcclel1,IsBipartite,52,eval_input,2020-04-10 16:13:59,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A
}",false,,,,,
jmcclel1,IsBipartite,53,eval_input,2020-04-10 16:14:12,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A + A->B
}",false,,,,,
jmcclel1,IsBipartite,54,quiz_answer,2020-04-10 16:14:44,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
jmcclel1,IsBipartite,55,quiz_answer,2020-04-10 16:14:47,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
jmcclel1,IsBipartite,56,quiz_answer,2020-04-10 16:14:51,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,true,false,,
jmcclel1,IsBipartite,57,eval_input,2020-04-10 16:14:58,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A + A->B
}",false,,,,,
jmcclel1,IsBipartite,58,quiz_answer,2020-04-10 16:15:37,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
jmcclel1,IsBipartite,59,quiz_answer,2020-04-10 16:15:47,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
jmcclel1,IsBipartite,60,quiz_answer,2020-04-10 16:15:55,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
jmcclel1,IsBipartite,61,quiz_answer,2020-04-10 16:16:00,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
jmcclel1,IsBipartite,62,quiz_answer,2020-04-10 16:16:06,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,false,false,,
jmcclel1,IsBipartite,63,eval_input,2020-04-10 16:16:41,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",false,,,,,
mheller6,IsBipartite,37,eval_input,2020-04-10 16:16:46,"inst myInst {
  Node = A
       + B
       + C
  edges = C->A
}",true,,,,,
jmcclel1,IsBipartite,64,eval_input,2020-04-10 16:16:53,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A + A->A
}",false,,,,,
mheller6,IsBipartite,38,eval_input,2020-04-10 16:16:57,"inst myInst {
  Node = A
       + B
       + C
  edges = C->A
}",true,,,,,
jmcclel1,IsBipartite,65,eval_input,2020-04-10 16:17:04,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
jmcclel1,IsBipartite,66,eval_input,2020-04-10 16:17:26,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
jmcclel1,IsBipartite,67,quiz_answer,2020-04-10 16:17:57,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
jmcclel1,IsBipartite,68,quiz_answer,2020-04-10 16:18:01,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
jmcclel1,IsBipartite,69,quiz_answer,2020-04-10 16:18:06,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
jmcclel1,IsBipartite,70,quiz_answer,2020-04-10 16:18:11,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
jmcclel1,IsBipartite,72,quiz_answer,2020-04-10 16:18:30,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
jmcclel1,IsBipartite,73,quiz_answer,2020-04-10 16:18:35,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
jmcclel1,IsBipartite,74,quiz_answer,2020-04-10 16:18:38,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
jmcclel1,IsBipartite,75,quiz_answer,2020-04-10 16:18:42,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
jmcclel1,IsBipartite,76,quiz_answer,2020-04-10 16:18:48,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
jmcclel1,IsBipartite,77,quiz_answer,2020-04-10 16:18:56,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
jmcclel1,IsBipartite,78,quiz_answer,2020-04-10 16:19:00,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
jmcclel1,IsBipartite,79,final_answer,2020-04-10 16:19:01,,,,,,no cycle with an odd number of edges,
mheller6,IsBipartite,39,eval_input,2020-04-10 16:22:38,"inst myInst {
  Node = A
       + B
       + C
  edges = C->A + B->A
}",true,,,,,
mheller6,IsBipartite,40,eval_input,2020-04-10 16:22:50,"inst myInst {
  Node = A
       + B
       + C
  edges = C->A + A->C
}",true,,,,,
mheller6,IsBipartite,41,eval_input,2020-04-10 16:23:16,"inst myInst {
  Node = A
       + B
       + C
  edges = A->C + C->B + B->A
}",false,,,,,
mheller6,IsBipartite,42,quiz_answer,2020-04-10 16:23:59,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mheller6,IsBipartite,43,quiz_answer,2020-04-10 16:24:04,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mheller6,IsBipartite,44,quiz_answer,2020-04-10 16:24:11,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mheller6,IsBipartite,45,quiz_answer,2020-04-10 16:24:19,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mheller6,IsBipartite,46,quiz_answer,2020-04-10 16:24:24,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mheller6,IsBipartite,47,quiz_answer,2020-04-10 16:24:29,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mheller6,IsBipartite,48,quiz_answer,2020-04-10 16:24:38,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,true,false,,
mheller6,IsBipartite,49,final_answer,2020-04-10 16:24:42,,,,,,"I want to say it returns true if the graph is acyclic, unless the cycle contains two nodes",
mheller6,ThreeCycle,50,eval_input,2020-04-10 16:25:21,"inst myInst {
  Node = A
       + B
       + C
  edges = A->C + C->B + B->A
}",true,,,,,
mheller6,ThreeCycle,51,eval_input,2020-04-10 16:25:31,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
mheller6,ThreeCycle,52,eval_input,2020-04-10 16:25:36,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A
}",false,,,,,
mheller6,ThreeCycle,53,eval_input,2020-04-10 16:25:39,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",false,,,,,
mheller6,ThreeCycle,54,eval_input,2020-04-10 16:25:44,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
}",false,,,,,
mheller6,ThreeCycle,55,eval_input,2020-04-10 16:25:58,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + A->C
}",false,,,,,
mheller6,ThreeCycle,56,eval_input,2020-04-10 16:26:15,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->C + C->A
}",true,,,,,
mheller6,ThreeCycle,57,eval_input,2020-04-10 16:26:20,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->C
}",false,,,,,
mheller6,ThreeCycle,58,quiz_answer,2020-04-10 16:26:35,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mheller6,ThreeCycle,59,quiz_answer,2020-04-10 16:26:38,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
mheller6,ThreeCycle,60,quiz_answer,2020-04-10 16:26:44,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,false,false,,
mheller6,ThreeCycle,61,final_answer,2020-04-10 16:26:49,,,,,,Returns true if the graph is connected,
tamor,IsDag,0,eval_input,2020-04-10 16:34:29,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
tamor,IsDag,1,eval_input,2020-04-10 16:34:58,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
tamor,IsDag,2,eval_input,2020-04-10 16:35:09,"inst myInst {
  Node = A+B
  edges = none
}",true,,,,,
tamor,IsDag,3,eval_input,2020-04-10 16:35:24,"inst myInst {
  Node = A+B+C
  edges = none
}",true,,,,,
tamor,IsDag,4,eval_input,2020-04-10 16:35:53,"inst myInst {
  Node = A+B+C
  edges = A->B
}",true,,,,,
tamor,IsDag,5,eval_input,2020-04-10 16:36:12,"inst myInst {
  Node = A+B+C
  edges = A->B + A->C
}",true,,,,,
tamor,IsDag,6,eval_input,2020-04-10 16:36:32,"inst myInst {
  Node = A+B+C
  edges = A->B + A->C + B->C
}",true,,,,,
tamor,IsDag,7,eval_input,2020-04-10 16:36:44,"inst myInst {
  Node = A+B+C
  edges = A->B + A->C + B->C + B->A
}",false,,,,,
tamor,IsDag,8,eval_input,2020-04-10 16:36:54,"inst myInst {
  Node = A+B+C
  edges = A->B + B->A
}",false,,,,,
tamor,IsDag,9,eval_input,2020-04-10 16:37:00,"inst myInst {
  Node = A+B
  edges = A->B + B->A
}",false,,,,,
tamor,IsDag,10,eval_input,2020-04-10 16:37:30,"inst myInst {
  Node = A+B+C
  edges = A->B + B->A 
}",false,,,,,
tamor,IsDag,11,eval_input,2020-04-10 16:37:35,"inst myInst {
  Node = A+B+C
  edges = A->B + C->A 
}",true,,,,,
tamor,IsDag,12,eval_input,2020-04-10 16:38:02,"inst myInst {
  Node = A+B+C
  edges = A->B + C->A + B->C
}",false,,,,,
tamor,IsDag,13,eval_input,2020-04-10 16:38:18,"inst myInst {
  Node = A+B+C
  edges = A->B + C->A + B->C + B->A
}",false,,,,,
tamor,IsDag,14,eval_input,2020-04-10 16:38:28,"inst myInst {
  Node = A+B+C
  edges =  C->A + B->C + B->A
}",true,,,,,
tamor,IsDag,15,eval_input,2020-04-10 16:38:41,"inst myInst {
  Node = A+B+C
  edges =  C->C
}",false,,,,,
tamor,IsDag,16,eval_input,2020-04-10 16:38:52,"inst myInst {
  Node = A+B+C
  edges =  C->C+C->B
}",false,,,,,
tamor,IsDag,17,eval_input,2020-04-10 16:38:59,"inst myInst {
  Node = A+B+C
  edges =  C->B
}",true,,,,,
tamor,IsDag,18,eval_input,2020-04-10 16:39:28,"inst myInst {
  Node = A+B+C
  edges =  C->B + B->C + B->A
}",false,,,,,
tamor,IsDag,19,eval_input,2020-04-10 16:39:37,"inst myInst {
  Node = A+B+C
  edges =  C->B + B->A
}",true,,,,,
tamor,IsDag,20,eval_input,2020-04-10 16:39:47,"inst myInst {
  Node = A+B+C
  edges =  C->B + B->A + A->C
}",false,,,,,
tamor,IsDag,21,quiz_answer,2020-04-10 16:40:24,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
tamor,IsDag,22,quiz_answer,2020-04-10 16:40:36,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
tamor,IsDag,23,quiz_answer,2020-04-10 16:40:43,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
tamor,IsDag,24,quiz_answer,2020-04-10 16:41:03,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
tamor,IsDag,25,quiz_answer,2020-04-10 16:41:23,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
tamor,IsDag,26,quiz_answer,2020-04-10 16:41:38,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
tamor,IsDag,27,quiz_answer,2020-04-10 16:41:50,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
tamor,IsDag,28,quiz_answer,2020-04-10 16:42:02,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
tamor,IsDag,29,final_answer,2020-04-10 16:42:07,,,,,,The predicate returns false if the graph contains cycles,
tamor,IsBipartite,30,eval_input,2020-04-10 16:42:35,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
tamor,IsBipartite,31,eval_input,2020-04-10 16:42:42,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
tamor,IsBipartite,32,eval_input,2020-04-10 16:42:47,"inst myInst {
  Node = A+B
  edges = none
}",true,,,,,
tamor,IsBipartite,33,eval_input,2020-04-10 16:42:51,"inst myInst {
  Node = A+B+C
  edges = none
}",true,,,,,
tamor,IsBipartite,34,eval_input,2020-04-10 16:43:02,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
tamor,IsBipartite,35,eval_input,2020-04-10 16:43:12,"inst myInst {
  Node = A+B
  edges = A->B
}",true,,,,,
tamor,IsBipartite,36,eval_input,2020-04-10 16:43:20,"inst myInst {
  Node = A+B
  edges = A->B+B->A
}",true,,,,,
tamor,IsBipartite,37,eval_input,2020-04-10 16:43:31,"inst myInst {
  Node = A+B
  edges = A->B+B->A+B->B
}",false,,,,,
tamor,IsBipartite,38,eval_input,2020-04-10 16:43:48,"inst myInst {
  Node = A+B+C
  edges = A->B+B->A
}",true,,,,,
tamor,IsBipartite,39,eval_input,2020-04-10 16:43:58,"inst myInst {
  Node = A+B+C
  edges = A->B+B->C+C->A
}",false,,,,,
tamor,IsBipartite,40,eval_input,2020-04-10 16:45:13,"inst myInst {
  Node = A+B+C+D
  edges = A->B+B->C+D->A
}",true,,,,,
tamor,IsBipartite,41,eval_input,2020-04-10 16:46:11,"inst myInst {
  Node = A+B+C+D
  edges = A->B+B->C+C->D+D->A
}",true,,,,,
tamor,IsBipartite,42,eval_input,2020-04-10 16:46:43,"inst myInst {
  Node = A+B+C+D
  edges = A->B+B->A
}",true,,,,,
tamor,IsBipartite,43,eval_input,2020-04-10 16:47:39,"inst myInst {
  Node = A+B+C+D
  edges = A->B+B->C+C->D
}",true,,,,,
tamor,IsBipartite,44,eval_input,2020-04-10 16:48:14,"inst myInst {
  Node = A+B+C+D+E
  edges = A->B+B->C+C->D+D->E+E->A
}",false,,,,,
tamor,IsBipartite,45,eval_input,2020-04-10 16:48:22,"inst myInst {
  Node = A+B+C+D+E
  edges = A->B+B->C+C->D+D->E+E->B
}",true,,,,,
tamor,IsBipartite,46,eval_input,2020-04-10 16:49:04,"inst myInst {
  Node = A+B+C+D+E
  edges = A->B+C->E+E->D+D->C
}",false,,,,,
tamor,IsBipartite,47,eval_input,2020-04-10 16:53:06,"inst myInst {
  Node = A+B+C+D+E
  edges = B->B
}",false,,,,,
tamor,IsBipartite,48,eval_input,2020-04-10 16:53:24,"inst myInst {
  Node = A+B+C+D+E
  edges = B->B +C->D
}",false,,,,,
tamor,IsBipartite,49,eval_input,2020-04-10 16:54:09,"inst myInst {
  Node = A+B+C+D+E
  edges = B->C +C->D
}",true,,,,,
tamor,IsBipartite,50,eval_input,2020-04-10 16:54:36,"inst myInst {
  Node = A+B+C+D+E
  edges = B->B+C->D+D->E+E->C
}",false,,,,,
tamor,IsBipartite,51,eval_input,2020-04-10 16:54:43,"inst myInst {
  Node = A+B+C+D+E
  edges = A->B+C->D+D->E+E->C
}",false,,,,,
tamor,IsBipartite,52,eval_input,2020-04-10 16:55:05,"inst myInst {
  Node = A+B+C+D+E
  edges = A->B+B->C+C->D+D->E+E->A
}",false,,,,,
tamor,IsBipartite,53,eval_input,2020-04-10 16:55:17,"inst myInst {
  Node = A+B+C+D+E
  edges = A->B+B->C+C->D+D->A
}",true,,,,,
tamor,IsBipartite,54,eval_input,2020-04-10 16:55:20,"inst myInst {
  Node = A+B+C+D+E
  edges = A->B+B->C+C->D+D->A
}",true,,,,,
tamor,IsBipartite,55,quiz_answer,2020-04-10 16:55:52,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
tamor,IsBipartite,56,quiz_answer,2020-04-10 16:56:00,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
tamor,IsBipartite,57,quiz_answer,2020-04-10 16:56:08,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
tamor,IsBipartite,58,quiz_answer,2020-04-10 16:56:19,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
tamor,IsBipartite,59,quiz_answer,2020-04-10 16:56:28,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
tamor,IsBipartite,60,quiz_answer,2020-04-10 16:56:37,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
tamor,IsBipartite,61,quiz_answer,2020-04-10 16:56:46,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
tamor,IsBipartite,62,quiz_answer,2020-04-10 16:56:56,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
tamor,IsBipartite,63,final_answer,2020-04-10 16:56:58,,,,,,"The predicate returns false if there is a cycle with an odd number of nodes in it, and true otherwise",
tamor,ThreeCycle,64,eval_input,2020-04-10 16:57:54,"inst myInst {
  Node = none
  edges = none
}",false,,,,,
tamor,ThreeCycle,65,eval_input,2020-04-10 16:58:06,"inst myInst {
  Node = A
  edges = none
}",false,,,,,
tamor,ThreeCycle,66,eval_input,2020-04-10 16:58:10,"inst myInst {
  Node = A+B
  edges = none
}",false,,,,,
tamor,ThreeCycle,67,eval_input,2020-04-10 16:58:15,"inst myInst {
  Node = A+B+C
  edges = none
}",false,,,,,
tamor,ThreeCycle,68,eval_input,2020-04-10 16:58:24,"inst myInst {
  Node = A+B+C
  edges = A->A
}",false,,,,,
tamor,ThreeCycle,69,eval_input,2020-04-10 16:58:30,"inst myInst {
  Node = A+B+C
  edges = A->B
}",false,,,,,
tamor,ThreeCycle,70,eval_input,2020-04-10 16:58:43,"inst myInst {
  Node = A+B+C
  edges = A->B+B->C
}",false,,,,,
tamor,ThreeCycle,71,eval_input,2020-04-10 16:58:54,"inst myInst {
  Node = A+B+C
  edges = A->B+B->C+C->A
}",true,,,,,
tamor,ThreeCycle,72,eval_input,2020-04-10 16:59:07,"inst myInst {
  Node = A+B+C
  edges = A->A+B->B+C->C
}",false,,,,,
tamor,ThreeCycle,73,eval_input,2020-04-10 16:59:30,"inst myInst {
  Node = A+B+C
  edges = A->B+B->C+C->C
}",false,,,,,
tamor,ThreeCycle,74,eval_input,2020-04-10 16:59:52,"inst myInst {
  Node = A+B
  edges = A->B+B->A
}",false,,,,,
tamor,ThreeCycle,75,eval_input,2020-04-10 17:00:37,"inst myInst {
  Node = A+B+C+D
  edges = A->B+B->A+C->D+D->C
}",false,,,,,
tamor,ThreeCycle,76,eval_input,2020-04-10 17:00:51,"inst myInst {
  Node = A+B+C+D
  edges = A->B+B->C+C->D+D->A
}",false,,,,,
tamor,ThreeCycle,77,eval_input,2020-04-10 17:01:04,"inst myInst {
  Node = A+B+C+D+E
  edges = A->B+B->C+C->D+D->E+E->A
}",false,,,,,
tamor,ThreeCycle,78,eval_input,2020-04-10 17:01:43,"inst myInst {
  Node = A+B+C+D+E
  edges = A->B+B->C+C->A+D->E+E->A
}",true,,,,,
tamor,ThreeCycle,79,eval_input,2020-04-10 17:01:57,"inst myInst {
  Node = A+B+C+D+E
  edges = A->B+B->C+C->D+D->A+E->A
}",false,,,,,
tamor,ThreeCycle,80,eval_input,2020-04-10 17:02:20,"inst myInst {
  Node = A+B+C+D+E
  edges = A->A+B->B+C->C+D->D
}",false,,,,,
tamor,ThreeCycle,81,eval_input,2020-04-10 17:02:26,"inst myInst {
  Node = A+B+C+D+E
  edges = A->A+B->B+C->C+D->D+E->E
}",false,,,,,
tamor,ThreeCycle,82,eval_input,2020-04-10 17:03:03,"inst myInst {
  Node = A+B+C+D+E
  edges = A->B+B->C+C->A+D->D+E->E
}",true,,,,,
tamor,ThreeCycle,83,eval_input,2020-04-10 17:03:13,"inst myInst {
  Node = A+B+C+D+E
  edges = A->B+B->C+C->D+D->D+E->E
}",false,,,,,
tamor,ThreeCycle,84,eval_input,2020-04-10 17:03:17,"inst myInst {
  Node = A+B+C+D+E
  edges = A->B+B->C+C->D+D->A+E->E
}",false,,,,,
tamor,ThreeCycle,85,eval_input,2020-04-10 17:04:09,"inst myInst {
  Node = A+B+C+D+E
  edges = A->B+B->C+C->A+A->C+C->B+B->A
}",true,,,,,
tamor,ThreeCycle,86,eval_input,2020-04-10 17:04:16,"inst myInst {
  Node = A+B+C+D+E
  edges = A->B+B->C+A->C+C->B+B->A
}",true,,,,,
tamor,ThreeCycle,87,eval_input,2020-04-10 17:04:34,"inst myInst {
  Node = A+B+C+D+E
  edges = A->B+B->C+A->C+C->B
}",false,,,,,
tamor,ThreeCycle,88,eval_input,2020-04-10 17:04:44,"inst myInst {
  Node = A+B+C+D+E
  edges = A->A
}",false,,,,,
tamor,ThreeCycle,89,quiz_answer,2020-04-10 17:05:29,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
tamor,ThreeCycle,90,quiz_answer,2020-04-10 17:05:33,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
tamor,ThreeCycle,91,quiz_answer,2020-04-10 17:05:39,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
tamor,ThreeCycle,92,quiz_answer,2020-04-10 17:05:50,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
tamor,ThreeCycle,93,quiz_answer,2020-04-10 17:05:59,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
tamor,ThreeCycle,94,quiz_answer,2020-04-10 17:06:04,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
tamor,ThreeCycle,95,quiz_answer,2020-04-10 17:06:13,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
tamor,ThreeCycle,96,quiz_answer,2020-04-10 17:06:31,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
tamor,ThreeCycle,97,final_answer,2020-04-10 17:06:34,,,,,,"returns true if there is a cycle containing exactly 3 nodes, false otherwise",
gbramley,IsBipartite,0,eval_input,2020-04-10 20:36:49,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
gbramley,IsBipartite,1,eval_input,2020-04-10 20:36:58,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
  
}",true,,,,,
gbramley,IsBipartite,2,eval_input,2020-04-10 20:37:04,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
  
}",true,,,,,
gbramley,IsBipartite,3,eval_input,2020-04-10 20:37:10,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + C->B
  
}",true,,,,,
gbramley,IsBipartite,4,eval_input,2020-04-10 20:37:18,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
  
}",false,,,,,
gbramley,IsBipartite,5,eval_input,2020-04-10 20:37:25,"inst myInst {
  Node = A
       + B
       + C
  edges = C->A
  
}",true,,,,,
gbramley,IsBipartite,6,eval_input,2020-04-10 20:37:36,"inst myInst {
  Node = A
       + B
       + C
  edges = C->A + B->A
  
}",true,,,,,
gbramley,IsBipartite,7,eval_input,2020-04-10 20:37:36,"inst myInst {
  Node = A
       + B
       + C
  edges = C->A + B->A
  
}",true,,,,,
gbramley,IsBipartite,8,eval_input,2020-04-10 20:37:46,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A
  
}",false,,,,,
gbramley,IsBipartite,9,eval_input,2020-04-10 20:38:22,"inst myInst {
  Node = A
  edges = A->A
  
}",false,,,,,
gbramley,IsBipartite,10,eval_input,2020-04-10 20:38:32,"inst myInst {
  Node = A + B
  edges = A->B + B->A
  
}",true,,,,,
gbramley,IsBipartite,11,eval_input,2020-04-10 20:39:03,"inst myInst {
  Node = A + B
  edges = A->B + B->B
  
}",false,,,,,
gbramley,IsBipartite,12,eval_input,2020-04-10 20:39:10,"inst myInst {
  Node = A + B
  edges = A->A+ B->B
  
}",false,,,,,
gbramley,IsBipartite,13,eval_input,2020-04-10 20:39:49,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
  
}",true,,,,,
gbramley,IsBipartite,14,eval_input,2020-04-10 20:39:55,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
  
}",false,,,,,
gbramley,IsBipartite,15,eval_input,2020-04-10 20:39:56,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
  
}",false,,,,,
gbramley,IsBipartite,16,eval_input,2020-04-10 20:40:19,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->D
  
}",true,,,,,
gbramley,IsBipartite,17,eval_input,2020-04-10 20:40:26,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->D + B->D
  
}",true,,,,,
gbramley,IsBipartite,18,eval_input,2020-04-10 20:41:05,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->D + B->D + B->C
  
}",true,,,,,
gbramley,IsBipartite,19,eval_input,2020-04-10 20:41:29,"inst myInst {
  Node = A + B + C 
  edges = A->A + B->B + C->C
  
}",false,,,,,
gbramley,IsBipartite,20,eval_input,2020-04-10 20:41:32,"inst myInst {
  Node = A + B + C 
  edges = A->A + B->B 
  
}",false,,,,,
gbramley,IsBipartite,21,eval_input,2020-04-10 20:41:35,"inst myInst {
  Node = A + B + C 
  edges = A->A 
  
}",false,,,,,
gbramley,IsBipartite,22,eval_input,2020-04-10 20:41:36,"inst myInst {
  Node = A + B + C 
  edges = A->A 
  
}",false,,,,,
gbramley,IsBipartite,23,eval_input,2020-04-10 20:41:53,"inst myInst {
  Node = A + B + C 
  edges = A->B
  
}",true,,,,,
dmutako,ThreeCycle,0,eval_input,2020-04-10 20:42:04,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
gbramley,IsBipartite,24,eval_input,2020-04-10 20:42:06,"inst myInst {
  Node = A + B + C 
  edges = A->B + B->C
  
}",true,,,,,
gbramley,IsBipartite,25,eval_input,2020-04-10 20:42:11,"inst myInst {
  Node = A + B + C 
  edges = A->B + B->C + C->B
  
}",true,,,,,
dmutako,ThreeCycle,1,eval_input,2020-04-10 20:42:11,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> B
}",false,,,,,
dmutako,ThreeCycle,2,eval_input,2020-04-10 20:42:26,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> B + B -> C
  
}",false,,,,,
gbramley,IsBipartite,26,eval_input,2020-04-10 20:42:33,"inst myInst {
  Node = A + B + C 
  edges = A->B + B->C + C->A
  
}",false,,,,,
dmutako,ThreeCycle,3,eval_input,2020-04-10 20:42:37,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> B + B -> A
  
}",false,,,,,
dmutako,ThreeCycle,4,eval_input,2020-04-10 20:42:41,"inst myInst {
  Node = A
       + B
       
  edges = A -> B + B -> A
  
}",false,,,,,
gbramley,IsBipartite,27,eval_input,2020-04-10 20:42:54,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
  
}",false,,,,,
gbramley,IsBipartite,28,eval_input,2020-04-10 20:42:58,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->A
  
}",true,,,,,
gbramley,IsBipartite,29,eval_input,2020-04-10 20:43:38,"inst myInst {
  Node = A + B + C + D + E
  edges = A->A + A->B + B->A
  
}",false,,,,,
gbramley,IsBipartite,30,eval_input,2020-04-10 20:43:57,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->A + C->A
  
}",true,,,,,
dmutako,ThreeCycle,5,eval_input,2020-04-10 20:44:04,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> B + B -> C + C -> A
  
}",true,,,,,
gbramley,IsBipartite,31,eval_input,2020-04-10 20:44:05,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->A + C->A + B->C
  
}",false,,,,,
gbramley,IsBipartite,32,eval_input,2020-04-10 20:44:22,"inst myInst {
  Node = A + B + C + D + E
  edges = A->A
  
}",false,,,,,
dmutako,ThreeCycle,6,eval_input,2020-04-10 20:44:26,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> B + B-> A
  
}",false,,,,,
dmutako,ThreeCycle,7,eval_input,2020-04-10 20:44:31,"inst myInst {
  Node = A
       + B
       
  edges = A -> B + B-> A
  
}",false,,,,,
gbramley,IsBipartite,33,eval_input,2020-04-10 20:44:51,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + C->A + D->E + E->A
  
}",true,,,,,
dmutako,ThreeCycle,8,eval_input,2020-04-10 20:44:53,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> B + B-> A + A -> C
  
}",false,,,,,
dmutako,ThreeCycle,9,eval_input,2020-04-10 20:45:02,"inst myInst {
  Node = A
       + B
       + C
  edges = A -> B + B-> A + C-> A
  
}",false,,,,,
gbramley,IsBipartite,34,quiz_answer,2020-04-10 20:45:09,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
gbramley,IsBipartite,35,quiz_answer,2020-04-10 20:45:14,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
gbramley,IsBipartite,36,quiz_answer,2020-04-10 20:45:19,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
gbramley,IsBipartite,37,quiz_answer,2020-04-10 20:45:25,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
dmutako,ThreeCycle,10,eval_input,2020-04-10 20:45:32,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges = A -> B + B-> A + C-> A
  
}",false,,,,,
gbramley,IsBipartite,38,eval_input,2020-04-10 20:45:34,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + C->A + D->E + E->A
  
}",true,,,,,
dmutako,ThreeCycle,11,eval_input,2020-04-10 20:45:37,"inst myInst {
  Node = A
       + B
       + C 
       
  edges = A -> B + B-> A + C-> A
  
}",false,,,,,
dmutako,ThreeCycle,12,eval_input,2020-04-10 20:45:49,"inst myInst {
  Node = A
       + B
       + C 
       
  edges = A -> B + B-> A + C -> B
  
}",false,,,,,
gbramley,IsBipartite,39,eval_input,2020-04-10 20:45:52,"inst myInst {
  Node = A + B + C 
  edges = A->B + C->A + B->C
  
}",false,,,,,
dmutako,ThreeCycle,13,eval_input,2020-04-10 20:45:55,"inst myInst {
  Node = A
       + B
       + C 
       
  edges = A -> B + B-> A + B -> C
  
}",false,,,,,
gbramley,IsBipartite,40,quiz_answer,2020-04-10 20:46:05,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
gbramley,IsBipartite,41,quiz_answer,2020-04-10 20:46:19,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
gbramley,IsBipartite,42,quiz_answer,2020-04-10 20:46:23,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
gbramley,IsBipartite,43,quiz_answer,2020-04-10 20:46:28,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
gbramley,IsBipartite,44,quiz_answer,2020-04-10 20:46:35,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
dmutako,ThreeCycle,14,eval_input,2020-04-10 20:46:41,"inst myInst {
  Node = A
       + B
       + C 
       
  edges = A -> C + B-> A + B -> C
  
}",false,,,,,
gbramley,IsBipartite,45,quiz_answer,2020-04-10 20:46:41,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
gbramley,IsBipartite,46,quiz_answer,2020-04-10 20:46:47,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
dmutako,ThreeCycle,15,eval_input,2020-04-10 20:46:51,"inst myInst {
  Node = A
       + B
       + C 
       
  edges = A -> C + B-> A + C -> B
  
}",true,,,,,
gbramley,IsBipartite,47,quiz_answer,2020-04-10 20:46:54,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
gbramley,IsBipartite,48,quiz_answer,2020-04-10 20:47:00,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
gbramley,IsBipartite,49,final_answer,2020-04-10 20:47:01,,,,,,no cycles of odd length,
dmutako,ThreeCycle,16,eval_input,2020-04-10 20:47:16,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges = A -> C + B-> A + C -> B
  
}",true,,,,,
dmutako,ThreeCycle,17,eval_input,2020-04-10 20:47:26,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges = A -> C + B-> A + C -> B + C-> D
  
}",true,,,,,
dmutako,ThreeCycle,18,eval_input,2020-04-10 20:47:32,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges = A -> C + B-> A + C -> D + C-> D
  
}",false,,,,,
dmutako,ThreeCycle,19,eval_input,2020-04-10 20:47:38,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges = A -> C + B-> A + C -> B + C-> D
  
}",true,,,,,
dmutako,ThreeCycle,20,eval_input,2020-04-10 20:48:50,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges = A -> C + B-> A + C -> D + D -> B
  
}",false,,,,,
gbramley,IsDag,50,eval_input,2020-04-10 20:51:53,"inst myInst {
  Node = A + B + C 
  edges = A->B + C->A + B->C
  
}",false,,,,,
dmutako,ThreeCycle,21,quiz_answer,2020-04-10 20:51:55,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
gbramley,IsDag,51,eval_input,2020-04-10 20:51:59,"inst myInst {
  Node = A + B + C 
  edges = A->A
  
}",false,,,,,
dmutako,ThreeCycle,22,quiz_answer,2020-04-10 20:52:02,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
gbramley,IsDag,52,eval_input,2020-04-10 20:52:04,"inst myInst {
  Node = A + B + C 
  edges = A->B
  
}",true,,,,,
gbramley,IsDag,53,eval_input,2020-04-10 20:52:10,"inst myInst {
  Node = A + B + C 
  edges = A->B + B->A
  
}",false,,,,,
dmutako,ThreeCycle,23,quiz_answer,2020-04-10 20:52:13,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
gbramley,IsDag,54,eval_input,2020-04-10 20:52:25,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C
  
}",true,,,,,
dmutako,ThreeCycle,24,quiz_answer,2020-04-10 20:52:25,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
gbramley,IsDag,55,eval_input,2020-04-10 20:52:29,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D
  
}",true,,,,,
dmutako,ThreeCycle,25,quiz_answer,2020-04-10 20:52:32,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,true,false,,
gbramley,IsDag,56,eval_input,2020-04-10 20:52:44,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->B
  
}",false,,,,,
dmutako,ThreeCycle,26,final_answer,2020-04-10 20:52:45,,,,,,A predicate that detects cycles?,
gbramley,IsDag,57,eval_input,2020-04-10 20:52:54,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->C
  
}",false,,,,,
gbramley,IsDag,58,eval_input,2020-04-10 20:52:57,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
  
}",false,,,,,
dmutako,IsDag,27,eval_input,2020-04-10 20:53:01,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges = A -> C + B-> A + C -> D + D -> B
  
}",false,,,,,
gbramley,IsDag,59,eval_input,2020-04-10 20:53:09,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->D
  
}",true,,,,,
gbramley,IsDag,60,eval_input,2020-04-10 20:53:15,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->B
  
}",false,,,,,
gbramley,IsDag,61,quiz_answer,2020-04-10 20:53:24,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
gbramley,IsDag,62,quiz_answer,2020-04-10 20:53:30,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
gbramley,IsDag,63,quiz_answer,2020-04-10 20:53:35,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
gbramley,IsDag,64,quiz_answer,2020-04-10 20:53:39,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
gbramley,IsDag,65,quiz_answer,2020-04-10 20:53:52,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
gbramley,IsDag,66,quiz_answer,2020-04-10 20:53:55,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
gbramley,IsDag,67,quiz_answer,2020-04-10 20:54:00,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
gbramley,IsDag,68,quiz_answer,2020-04-10 20:54:06,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
gbramley,IsDag,69,quiz_answer,2020-04-10 20:54:11,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
gbramley,IsDag,70,quiz_answer,2020-04-10 20:54:15,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
gbramley,IsDag,71,quiz_answer,2020-04-10 20:54:20,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
gbramley,IsDag,72,quiz_answer,2020-04-10 20:54:23,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
gbramley,IsDag,73,final_answer,2020-04-10 20:54:24,,,,,,no cycles,
gbramley,ThreeCycle,74,eval_input,2020-04-10 20:54:36,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->B
  
}",false,,,,,
gbramley,ThreeCycle,75,eval_input,2020-04-10 20:54:43,"inst myInst {
  Node = A + B + C + D
  edges = A->B 
  
}",false,,,,,
gbramley,ThreeCycle,76,eval_input,2020-04-10 20:54:49,"inst myInst {
  Node = A + B + C + D
  edges = A->A
  
}",false,,,,,
gbramley,ThreeCycle,77,eval_input,2020-04-10 20:54:53,"inst myInst {
  Node = A + B + C + D
  edges = none
  
}",false,,,,,
gbramley,ThreeCycle,78,eval_input,2020-04-10 20:55:09,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
  
}",false,,,,,
gbramley,ThreeCycle,79,eval_input,2020-04-10 20:55:13,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D 
  
}",false,,,,,
gbramley,ThreeCycle,80,eval_input,2020-04-10 20:55:17,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C
  
}",false,,,,,
gbramley,ThreeCycle,81,eval_input,2020-04-10 20:55:27,"inst myInst {
  Node = A + B
  edges = A->B 
  
}",false,,,,,
gbramley,ThreeCycle,82,eval_input,2020-04-10 20:55:33,"inst myInst {
  Node = A + B
  edges = A->B + B->A
  
}",false,,,,,
gbramley,ThreeCycle,83,eval_input,2020-04-10 20:55:39,"inst myInst {
  Node = A + B
  edges = A->B + A->A
  
}",false,,,,,
gbramley,ThreeCycle,84,eval_input,2020-04-10 20:55:46,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C
  
}",false,,,,,
gbramley,ThreeCycle,85,eval_input,2020-04-10 20:55:51,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + B->C
  
}",false,,,,,
gbramley,ThreeCycle,86,eval_input,2020-04-10 20:56:34,"inst myInst {
  Node = A + B + C
  edges = A->A + B->B + C->C
  
}",false,,,,,
gbramley,ThreeCycle,87,eval_input,2020-04-10 20:56:47,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
  
}",true,,,,,
gbramley,ThreeCycle,88,eval_input,2020-04-10 20:57:13,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
  
}",false,,,,,
gbramley,ThreeCycle,89,eval_input,2020-04-10 20:57:21,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->A
  
}",false,,,,,
gbramley,ThreeCycle,90,eval_input,2020-04-10 20:57:28,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->A
  
}",true,,,,,
gbramley,ThreeCycle,91,eval_input,2020-04-10 20:57:39,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->A
  
}",false,,,,,
gbramley,ThreeCycle,92,eval_input,2020-04-10 20:57:48,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->A + D->A
  
}",true,,,,,
gbramley,ThreeCycle,93,eval_input,2020-04-10 20:58:18,"inst myInst {
  Node = A + B + C + D + E
  edges = D->E + E->C + C->D + A->B
  
}",true,,,,,
gbramley,ThreeCycle,94,eval_input,2020-04-10 20:58:22,"inst myInst {
  Node = A + B + C + D + E
  edges = D->E + E->C + C->D 
  
}",true,,,,,
gbramley,ThreeCycle,95,quiz_answer,2020-04-10 20:58:31,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
gbramley,ThreeCycle,96,quiz_answer,2020-04-10 20:58:35,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
gbramley,ThreeCycle,97,quiz_answer,2020-04-10 20:58:37,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
gbramley,ThreeCycle,98,quiz_answer,2020-04-10 20:58:43,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
gbramley,ThreeCycle,99,quiz_answer,2020-04-10 20:58:47,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
gbramley,ThreeCycle,100,quiz_answer,2020-04-10 20:58:50,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
gbramley,ThreeCycle,101,quiz_answer,2020-04-10 20:58:54,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
gbramley,ThreeCycle,102,quiz_answer,2020-04-10 20:58:57,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
gbramley,ThreeCycle,103,final_answer,2020-04-10 20:58:58,,,,,,Cycle of size 3,
dmutako,IsDag,28,eval_input,2020-04-10 21:04:39,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges = A -> C + B-> A + C -> D + D -> B
  
}",false,,,,,
dmutako,IsDag,29,eval_input,2020-04-10 21:05:41,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges = A -> C + B-> A + C -> B
  
}",false,,,,,
dmutako,IsDag,30,eval_input,2020-04-10 21:05:49,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges = A -> C + B-> A + C -> D + D -> A
  
}",false,,,,,
dmutako,IsDag,31,eval_input,2020-04-10 21:06:10,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges = A -> C + B-> A + C -> D + D -> A+ A-> A
  
}",false,,,,,
dmutako,IsDag,32,eval_input,2020-04-10 21:06:20,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges = A -> A
  
}",false,,,,,
dmutako,IsDag,33,eval_input,2020-04-10 21:06:51,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges = A -> D + B-> A + C -> D + D -> A+ A-> A
  
}",false,,,,,
dmutako,IsDag,34,eval_input,2020-04-10 21:07:26,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges = A -> D + B-> A + D-> B
  
}",false,,,,,
dmutako,IsDag,35,quiz_answer,2020-04-10 21:07:52,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
dmutako,IsDag,36,quiz_answer,2020-04-10 21:07:58,"inst myInst {
      Node = A
      edges = none
    }",false,1,true,false,,
dmutako,IsDag,37,final_answer,2020-04-10 21:08:00,,,,,,"Not sure, couldn't get a true instance :(",
dmutako,IsBipartite,38,eval_input,2020-04-10 21:08:20,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges = A -> D + B-> A + D-> B
  
}",false,,,,,
dmutako,IsBipartite,39,eval_input,2020-04-10 21:08:28,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges = none
  
}",true,,,,,
dmutako,IsBipartite,40,eval_input,2020-04-10 21:08:36,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges =  A-> B
  
}",true,,,,,
dmutako,IsBipartite,41,eval_input,2020-04-10 21:08:47,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges =  A-> B + B->A
  
}",true,,,,,
dmutako,IsBipartite,42,eval_input,2020-04-10 21:08:57,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges =  A-> B + B-> C
  
}",true,,,,,
dmutako,IsBipartite,43,eval_input,2020-04-10 21:09:10,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges =  A-> A
  
}",false,,,,,
dmutako,IsBipartite,44,eval_input,2020-04-10 21:09:28,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges =  A-> B + B -> A
  
}",true,,,,,
dmutako,IsBipartite,45,eval_input,2020-04-10 21:09:38,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges =  A-> B + B -> C + C->A
  
}",false,,,,,
dmutako,IsBipartite,46,eval_input,2020-04-10 21:09:49,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges =  B -> B
  
}",false,,,,,
dmutako,IsBipartite,47,eval_input,2020-04-10 21:10:00,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges =  A -> A
  
}",false,,,,,
dmutako,IsBipartite,48,eval_input,2020-04-10 21:10:10,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges =  A -> B + B-> A
  
}",true,,,,,
dmutako,IsBipartite,49,eval_input,2020-04-10 21:16:43,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges =  A -> B + B-> C + C -> A
  
}",false,,,,,
dmutako,IsBipartite,50,eval_input,2020-04-10 21:17:17,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges =  A -> B + B-> C + D -> A + C -> D
  
}",true,,,,,
dmutako,IsBipartite,51,eval_input,2020-04-10 21:17:32,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges =  A -> B + B-> C + D -> A + C -> D + A-> D
  
}",true,,,,,
dmutako,IsBipartite,52,eval_input,2020-04-10 21:18:02,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges =  A -> A
  
}",false,,,,,
dmutako,IsBipartite,53,eval_input,2020-04-10 21:18:10,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges =  A -> C
  
}",true,,,,,
dmutako,IsBipartite,54,eval_input,2020-04-10 21:18:25,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges =  A -> C + C-> D
  
}",true,,,,,
dmutako,IsBipartite,55,eval_input,2020-04-10 21:18:50,"inst myInst {
  Node = A
       + B
       + C 
       + D
  edges =  A -> C + C-> D + D->B
  
}",true,,,,,
dmutako,IsBipartite,56,quiz_answer,2020-04-10 21:19:38,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
dmutako,IsBipartite,57,quiz_answer,2020-04-10 21:19:46,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
dmutako,IsBipartite,58,quiz_answer,2020-04-10 21:19:53,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
dmutako,IsBipartite,59,quiz_answer,2020-04-10 21:20:02,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
dmutako,IsBipartite,60,final_answer,2020-04-10 21:20:10,,,,,,returns false when there are no cycles with 3 or 1 nodes,
vkalev,ThreeCycle,0,eval_input,2020-04-11 15:41:40,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
vkalev,ThreeCycle,1,eval_input,2020-04-11 15:41:53,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",false,,,,,
vkalev,ThreeCycle,2,eval_input,2020-04-11 15:42:11,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
}",false,,,,,
vkalev,ThreeCycle,3,eval_input,2020-04-11 15:42:18,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + A->C
}",false,,,,,
vkalev,ThreeCycle,4,eval_input,2020-04-11 15:43:51,"inst myInst {
  Node = A
       + B
  edges = A->B + B->A
}",false,,,,,
vkalev,ThreeCycle,5,eval_input,2020-04-11 15:43:55,"inst myInst {
  Node = A
       + B
  edges = A->B
}",false,,,,,
vkalev,ThreeCycle,6,eval_input,2020-04-11 15:44:15,"inst myInst {
  Node = A
       + B
  edges = none
}",false,,,,,
vkalev,ThreeCycle,7,eval_input,2020-04-11 15:45:07,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",true,,,,,
vkalev,ThreeCycle,8,quiz_answer,2020-04-11 15:45:49,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
vkalev,ThreeCycle,9,eval_input,2020-04-11 15:46:23,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
vkalev,ThreeCycle,10,eval_input,2020-04-11 15:46:36,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
vkalev,ThreeCycle,11,eval_input,2020-04-11 15:47:08,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->A
}",true,,,,,
vkalev,ThreeCycle,12,quiz_answer,2020-04-11 15:47:24,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
vkalev,ThreeCycle,13,quiz_answer,2020-04-11 15:47:29,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
vkalev,ThreeCycle,14,quiz_answer,2020-04-11 15:47:33,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
vkalev,ThreeCycle,15,quiz_answer,2020-04-11 15:47:40,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
vkalev,ThreeCycle,16,quiz_answer,2020-04-11 15:47:44,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
vkalev,ThreeCycle,17,quiz_answer,2020-04-11 15:47:52,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
vkalev,ThreeCycle,18,quiz_answer,2020-04-11 15:48:01,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
vkalev,ThreeCycle,19,quiz_answer,2020-04-11 15:48:09,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
vkalev,ThreeCycle,20,final_answer,2020-04-11 15:48:11,,,,,,must be a 3 node cycle,
vkalev,IsDag,21,eval_input,2020-04-11 15:48:36,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->A
}",false,,,,,
vkalev,IsDag,22,eval_input,2020-04-11 15:49:13,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
vkalev,IsDag,23,eval_input,2020-04-11 15:49:24,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = none
}",true,,,,,
vkalev,IsDag,24,eval_input,2020-04-11 15:49:32,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B
}",true,,,,,
vkalev,IsDag,25,eval_input,2020-04-11 15:49:35,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->C
}",true,,,,,
vkalev,IsDag,26,eval_input,2020-04-11 15:49:42,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + B->C
}",true,,,,,
vkalev,IsDag,27,eval_input,2020-04-11 15:50:00,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",false,,,,,
vkalev,IsDag,28,eval_input,2020-04-11 15:50:08,"inst myInst {
  Node = A
       + B
  edges = A->B + B->A
}",false,,,,,
vkalev,IsDag,29,quiz_answer,2020-04-11 15:50:30,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
vkalev,IsDag,30,quiz_answer,2020-04-11 15:50:34,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
vkalev,IsDag,31,quiz_answer,2020-04-11 15:50:38,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
vkalev,IsDag,32,quiz_answer,2020-04-11 15:50:47,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
vkalev,IsDag,33,quiz_answer,2020-04-11 15:50:53,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
vkalev,IsDag,34,quiz_answer,2020-04-11 15:50:57,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
vkalev,IsDag,35,quiz_answer,2020-04-11 15:51:03,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
vkalev,IsDag,36,quiz_answer,2020-04-11 15:51:10,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
vkalev,IsDag,37,final_answer,2020-04-11 15:51:11,,,,,,"returns false when there is a cycle, true otherwise",
vkalev,IsBipartite,38,eval_input,2020-04-11 15:51:26,"inst myInst {
  Node = A
       + B
  edges = A->B + B->A
}",true,,,,,
vkalev,IsBipartite,39,eval_input,2020-04-11 15:51:46,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",false,,,,,
vkalev,IsBipartite,40,eval_input,2020-04-11 15:51:52,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
vkalev,IsBipartite,41,eval_input,2020-04-11 15:52:01,"inst myInst {
  Node = A
       + B
  edges = none
}",true,,,,,
vkalev,IsBipartite,42,eval_input,2020-04-11 15:52:33,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
vkalev,IsBipartite,43,quiz_answer,2020-04-11 15:53:08,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
vkalev,IsBipartite,44,quiz_answer,2020-04-11 15:53:12,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
vkalev,IsBipartite,45,quiz_answer,2020-04-11 15:53:15,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
vkalev,IsBipartite,46,quiz_answer,2020-04-11 15:53:19,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
vkalev,IsBipartite,47,quiz_answer,2020-04-11 15:53:22,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
vkalev,IsBipartite,48,quiz_answer,2020-04-11 15:53:25,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
vkalev,IsBipartite,49,quiz_answer,2020-04-11 15:53:30,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
vkalev,IsBipartite,50,quiz_answer,2020-04-11 15:53:34,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
vkalev,IsBipartite,51,final_answer,2020-04-11 15:53:35,,,,,,"false if there is a cycle with an odd number of nodes, true otherwise",
ksang1,IsBipartite,0,eval_input,2020-04-11 16:15:59,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
ksang1,IsBipartite,1,eval_input,2020-04-11 16:16:13,"inst myInst {
  Node = A+ B + C
  edges = A -> B
}",true,,,,,
ksang1,IsBipartite,2,eval_input,2020-04-11 16:16:20,"inst myInst {
  Node = A+ B + C
  edges = A -> B + B->C
}",true,,,,,
ksang1,IsBipartite,3,eval_input,2020-04-11 16:16:28,"inst myInst {
  Node = A+ B + C
  edges = A -> B + B->C + A->C
}",true,,,,,
ksang1,IsBipartite,4,eval_input,2020-04-11 16:16:35,"inst myInst {
  Node = A+ B 
  edges = A -> B
}",true,,,,,
ksang1,IsBipartite,5,eval_input,2020-04-11 16:16:39,"inst myInst {
  Node = A+ B 
  edges = A -> B + B->A
}",true,,,,,
ksang1,IsBipartite,6,eval_input,2020-04-11 16:16:45,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
ksang1,IsBipartite,7,eval_input,2020-04-11 16:16:53,"inst myInst {
  Node = A + B
  edges = none
}",true,,,,,
ksang1,IsBipartite,8,eval_input,2020-04-11 16:16:59,"inst myInst {
  Node = A + B
  edges = B->A
}",true,,,,,
ksang1,IsBipartite,9,eval_input,2020-04-11 16:17:10,"inst myInst {
  Node = A + B
  edges = B->A + A->B
}",true,,,,,
ksang1,IsBipartite,10,eval_input,2020-04-11 16:17:24,"inst myInst {
  Node = A + B + C
  edges = B->A + A->B
}",true,,,,,
ksang1,IsBipartite,11,eval_input,2020-04-11 16:17:30,"inst myInst {
  Node = A + B + C
  edges = B->A + A->B + C->C
}",false,,,,,
ksang1,IsBipartite,12,eval_input,2020-04-11 16:17:34,"inst myInst {
  Node = A + B + C
  edges = B->A + A-> A
}",false,,,,,
ksang1,IsBipartite,13,eval_input,2020-04-11 16:17:38,"inst myInst {
  Node = A + B + C
  edges = B->B
}",false,,,,,
ksang1,IsBipartite,14,eval_input,2020-04-11 16:17:43,"inst myInst {
  Node = A + B + C
  edges = B->B + A->A
}",false,,,,,
ksang1,IsBipartite,15,quiz_answer,2020-04-11 16:18:15,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ksang1,IsBipartite,16,quiz_answer,2020-04-11 16:18:18,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
ksang1,IsBipartite,17,quiz_answer,2020-04-11 16:18:21,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
ksang1,IsBipartite,18,quiz_answer,2020-04-11 16:18:25,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
ksang1,IsBipartite,19,quiz_answer,2020-04-11 16:18:28,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,false,false,,
ksang1,IsBipartite,20,quiz_answer,2020-04-11 16:18:53,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ksang1,IsBipartite,21,quiz_answer,2020-04-11 16:18:56,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
ksang1,IsBipartite,22,quiz_answer,2020-04-11 16:18:58,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
ksang1,IsBipartite,23,quiz_answer,2020-04-11 16:19:03,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
ksang1,IsBipartite,24,quiz_answer,2020-04-11 16:19:09,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
ksang1,IsBipartite,25,quiz_answer,2020-04-11 16:19:20,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
ksang1,IsBipartite,26,quiz_answer,2020-04-11 16:19:26,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,true,false,,
ksang1,IsBipartite,27,final_answer,2020-04-11 16:19:31,,,,,,"If there is a node pointing to itself (X->X), return false.",
ksang1,IsDag,28,eval_input,2020-04-11 16:19:48,"inst myInst {
  Node = A + B + C
  edges = B->B + A->A
}",false,,,,,
ksang1,IsDag,29,eval_input,2020-04-11 16:19:52,"inst myInst {
  Node = A + B + C
  edges = B->B 
}",false,,,,,
ksang1,IsDag,30,eval_input,2020-04-11 16:19:56,"inst myInst {
  Node = A + B + C
  edges = A->B
}",true,,,,,
ksang1,IsDag,31,eval_input,2020-04-11 16:20:01,"inst myInst {
  Node = A + B + C
  edges = A->B
}",true,,,,,
ksang1,IsDag,32,eval_input,2020-04-11 16:20:01,"inst myInst {
  Node = A + B + C
  edges = A->B
}",true,,,,,
ksang1,IsDag,33,eval_input,2020-04-11 16:20:07,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",false,,,,,
ksang1,IsDag,34,eval_input,2020-04-11 16:20:19,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
ksang1,IsDag,35,quiz_answer,2020-04-11 16:20:31,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
ksang1,IsDag,36,quiz_answer,2020-04-11 16:20:58,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ksang1,IsDag,37,quiz_answer,2020-04-11 16:21:02,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
ksang1,IsDag,38,quiz_answer,2020-04-11 16:21:05,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
ksang1,IsDag,39,quiz_answer,2020-04-11 16:21:29,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
ksang1,IsDag,40,quiz_answer,2020-04-11 16:21:35,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
ksang1,IsDag,41,quiz_answer,2020-04-11 16:21:40,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
ksang1,IsDag,42,quiz_answer,2020-04-11 16:21:47,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
ksang1,IsDag,43,quiz_answer,2020-04-11 16:21:52,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
ksang1,IsDag,44,final_answer,2020-04-11 16:21:54,,,,,,false when there's a cycle,
ksang1,ThreeCycle,45,eval_input,2020-04-11 16:22:24,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",false,,,,,
ksang1,ThreeCycle,46,eval_input,2020-04-11 16:22:29,"inst myInst {
  Node = A + B + C
  edges = A->A
}",false,,,,,
ksang1,ThreeCycle,47,eval_input,2020-04-11 16:22:35,"inst myInst {
  Node = A + B + C
  edges = none
}",false,,,,,
ksang1,ThreeCycle,48,eval_input,2020-04-11 16:22:43,"inst myInst {
  Node = A + B + C
  edges = A -> C + C->A
}",false,,,,,
ksang1,ThreeCycle,49,eval_input,2020-04-11 16:22:51,"inst myInst {
  Node = A + B + C
  edges = A -> C + B ->C + C->A
}",false,,,,,
ksang1,ThreeCycle,50,eval_input,2020-04-11 16:22:58,"inst myInst {
  Node = A + B + C
  edges = A->C + B->C
}",false,,,,,
ksang1,ThreeCycle,51,eval_input,2020-04-11 16:23:02,"inst myInst {
  Node = A + B + C
  edges = A->A
}",false,,,,,
ksang1,ThreeCycle,52,eval_input,2020-04-11 16:23:06,"inst myInst {
  Node = A + B + C
  edges = A->A + B->B
}",false,,,,,
ksang1,ThreeCycle,53,eval_input,2020-04-11 16:23:10,"inst myInst {
  Node = A + B + C
  edges = A->A + B->B + C->C
}",false,,,,,
ksang1,ThreeCycle,54,eval_input,2020-04-11 16:23:26,"inst myInst {
  Node = A + B + C
  edges = A->A + B->B + C->C
}",false,,,,,
ksang1,ThreeCycle,55,eval_input,2020-04-11 16:23:32,"inst myInst {
  Node = A + B + C
  edges = A->C + B->C
}",false,,,,,
ksang1,ThreeCycle,56,eval_input,2020-04-11 16:23:41,"inst myInst {
  Node = A + B + C
  edges = A->C + B->C + C->A + C->B
}",false,,,,,
ksang1,ThreeCycle,57,eval_input,2020-04-11 16:23:49,"inst myInst {
  Node = A + B + C
  edges = A->A + B->B
}",false,,,,,
ksang1,ThreeCycle,58,eval_input,2020-04-11 16:23:58,"inst myInst {
  Node = A + B 
  edges = A->A + B->B
}",false,,,,,
ksang1,ThreeCycle,59,eval_input,2020-04-11 16:24:05,"inst myInst {
  Node = none
  edges = none
}",false,,,,,
ksang1,ThreeCycle,60,eval_input,2020-04-11 16:24:08,"inst myInst {
  Node = A + B 
  edges = A->A + B->B
}",false,,,,,
ksang1,ThreeCycle,61,eval_input,2020-04-11 16:24:28,"inst myInst {
  Node = A + B  + C
  edges = A->C + C->B + B->A
}",true,,,,,
ksang1,ThreeCycle,62,quiz_answer,2020-04-11 16:24:41,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ksang1,ThreeCycle,63,quiz_answer,2020-04-11 16:24:45,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
ksang1,ThreeCycle,64,quiz_answer,2020-04-11 16:24:49,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,false,false,,
ksang1,ThreeCycle,65,eval_input,2020-04-11 16:25:02,"inst myInst {
  Node = A + B  + C
  edges = A->B + B->A
}",false,,,,,
ksang1,ThreeCycle,66,quiz_answer,2020-04-11 16:25:13,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ksang1,ThreeCycle,67,quiz_answer,2020-04-11 16:25:16,"inst myInst {
      Node = A
      edges = none
    }",true,1,false,false,,
ksang1,ThreeCycle,68,eval_input,2020-04-11 16:25:23,"inst myInst {
  Node = A + B  + C
  edges = A->A
}",false,,,,,
ksang1,ThreeCycle,69,eval_input,2020-04-11 16:25:33,"inst myInst {
  Node = A + B  + C
  edges = A->B  + B->C + C->A
}",true,,,,,
ksang1,ThreeCycle,70,eval_input,2020-04-11 16:25:38,"inst myInst {
  Node = A + B  + C
  edges = A->B  + B->C + C->A + C->B
}",true,,,,,
ksang1,ThreeCycle,71,eval_input,2020-04-11 16:25:51,"inst myInst {
  Node = A + B  + C
  edges = A->B  + C->A + C->B
}",false,,,,,
ksang1,ThreeCycle,72,eval_input,2020-04-11 16:26:02,"inst myInst {
  Node = A + B  + C
  edges = A->A
}",false,,,,,
ksang1,ThreeCycle,73,eval_input,2020-04-11 16:26:05,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
ksang1,ThreeCycle,74,eval_input,2020-04-11 16:26:21,"inst myInst {
  Node = A + B
  edges = A->B  + B->A
}",false,,,,,
ksang1,ThreeCycle,75,quiz_answer,2020-04-11 16:26:32,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ksang1,ThreeCycle,76,quiz_answer,2020-04-11 16:26:36,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
ksang1,ThreeCycle,77,quiz_answer,2020-04-11 16:26:39,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
ksang1,ThreeCycle,78,quiz_answer,2020-04-11 16:26:46,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
ksang1,ThreeCycle,79,quiz_answer,2020-04-11 16:26:50,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
ksang1,ThreeCycle,80,quiz_answer,2020-04-11 16:26:56,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
ksang1,ThreeCycle,81,quiz_answer,2020-04-11 16:27:01,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,false,false,,
ksang1,ThreeCycle,82,final_answer,2020-04-11 16:27:02,,,,,,exists a ring > 3,
yhuang96,ThreeCycle,0,eval_input,2020-04-11 17:39:40,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
yhuang96,ThreeCycle,1,quiz_answer,2020-04-11 17:41:02,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
yhuang96,ThreeCycle,2,eval_input,2020-04-11 17:42:25,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
yhuang96,ThreeCycle,3,eval_input,2020-04-11 17:42:28,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
yhuang96,ThreeCycle,4,eval_input,2020-04-11 17:42:28,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
yhuang96,IsBipartite,5,eval_input,2020-04-11 17:42:59,"inst myInst {
      Node = A 
      edges = A->A
    }",false,,,,,
yhuang96,IsBipartite,6,eval_input,2020-04-11 17:43:04,"inst myInst {
  Node = A 
  edges = A->A
}",false,,,,,
yhuang96,ThreeCycle,7,quiz_answer,2020-04-11 17:43:08,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yhuang96,IsBipartite,8,eval_input,2020-04-11 17:43:19,"inst myInst {
  Node = A 
  edges = none
}",true,,,,,
yhuang96,ThreeCycle,9,quiz_answer,2020-04-11 17:43:22,"inst myInst {
      Node = A
      edges = none
    }",true,1,false,false,,
yhuang96,ThreeCycle,10,eval_input,2020-04-11 17:43:41,"inst myInst {
  Node = A 
  edges = none
}",false,,,,,
yhuang96,IsBipartite,11,quiz_answer,2020-04-11 17:43:58,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yhuang96,IsBipartite,12,quiz_answer,2020-04-11 17:44:04,"inst myInst {
      Node = A
      edges = none
    }",false,1,true,false,,
yhuang96,IsBipartite,13,eval_input,2020-04-11 17:44:10,"inst myInst {
  Node = A 
  edges = none
}",true,,,,,
yhuang96,IsBipartite,14,quiz_answer,2020-04-11 17:44:18,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yhuang96,IsBipartite,15,quiz_answer,2020-04-11 17:44:22,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
yhuang96,ThreeCycle,16,eval_input,2020-04-11 17:44:49,"inst myInst {
  Node = A + B 
  edges = A->B + B->A
}",false,,,,,
yhuang96,ThreeCycle,17,eval_input,2020-04-11 17:44:59,"inst myInst {
  Node = A + B 
  edges = A->B + B->A
}",false,,,,,
yhuang96,IsBipartite,18,quiz_answer,2020-04-11 17:45:08,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,true,false,,
yhuang96,IsBipartite,19,eval_input,2020-04-11 17:45:13,"inst myInst {
  Node = A + B 
  edges = A->B + B->A
}",true,,,,,
yhuang96,IsBipartite,20,quiz_answer,2020-04-11 17:45:24,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yhuang96,IsBipartite,21,quiz_answer,2020-04-11 17:45:27,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
yhuang96,IsBipartite,22,quiz_answer,2020-04-11 17:45:30,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
yhuang96,IsBipartite,23,quiz_answer,2020-04-11 17:45:37,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
yhuang96,IsBipartite,24,quiz_answer,2020-04-11 17:45:44,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,false,false,,
yhuang96,IsBipartite,25,eval_input,2020-04-11 17:46:08,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
yhuang96,IsBipartite,26,quiz_answer,2020-04-11 17:46:22,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yhuang96,IsBipartite,27,quiz_answer,2020-04-11 17:46:26,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
yhuang96,IsBipartite,28,quiz_answer,2020-04-11 17:46:29,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
yhuang96,IsBipartite,29,quiz_answer,2020-04-11 17:46:33,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
yhuang96,IsBipartite,30,quiz_answer,2020-04-11 17:46:42,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
yhuang96,IsBipartite,31,quiz_answer,2020-04-11 17:47:09,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
yhuang96,IsBipartite,32,quiz_answer,2020-04-11 17:47:16,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,true,false,,
yhuang96,IsBipartite,33,quiz_answer,2020-04-11 17:47:46,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yhuang96,IsBipartite,34,quiz_answer,2020-04-11 17:47:49,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
yhuang96,IsBipartite,35,quiz_answer,2020-04-11 17:48:02,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
yhuang96,IsBipartite,36,quiz_answer,2020-04-11 17:48:18,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
yhuang96,IsBipartite,37,quiz_answer,2020-04-11 17:48:30,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
yhuang96,IsBipartite,38,quiz_answer,2020-04-11 17:48:44,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,true,false,,
yhuang96,IsBipartite,39,quiz_answer,2020-04-11 17:49:01,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yhuang96,IsBipartite,40,quiz_answer,2020-04-11 17:49:06,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
yhuang96,IsBipartite,41,quiz_answer,2020-04-11 17:49:09,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
yhuang96,IsBipartite,42,quiz_answer,2020-04-11 17:49:12,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
yhuang96,IsBipartite,43,quiz_answer,2020-04-11 17:49:15,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
yhuang96,IsBipartite,44,quiz_answer,2020-04-11 17:49:19,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
yhuang96,IsBipartite,45,quiz_answer,2020-04-11 17:49:36,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
yhuang96,IsBipartite,46,quiz_answer,2020-04-11 17:49:54,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
yhuang96,IsBipartite,47,final_answer,2020-04-11 17:49:56,,,,,,true,
yhuang96,IsDag,48,eval_input,2020-04-11 17:51:02,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
yhuang96,ThreeCycle,49,eval_input,2020-04-11 17:57:54,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
yhuang96,IsDag,50,quiz_answer,2020-04-11 17:58:09,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yhuang96,IsDag,51,quiz_answer,2020-04-11 17:58:12,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
yhuang96,IsDag,52,quiz_answer,2020-04-11 17:58:17,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,false,false,,
yhuang96,IsDag,53,quiz_answer,2020-04-11 17:58:35,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
yhuang96,IsDag,54,quiz_answer,2020-04-11 17:58:45,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yhuang96,IsDag,55,quiz_answer,2020-04-11 17:58:49,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
yhuang96,IsDag,56,quiz_answer,2020-04-11 17:58:52,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
yhuang96,IsDag,57,quiz_answer,2020-04-11 17:58:57,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
yhuang96,IsDag,58,quiz_answer,2020-04-11 17:59:05,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
yhuang96,IsDag,59,quiz_answer,2020-04-11 17:59:24,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
yhuang96,IsDag,60,quiz_answer,2020-04-11 17:59:30,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,false,false,,
yhuang96,IsDag,61,quiz_answer,2020-04-11 17:59:57,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yhuang96,IsDag,62,quiz_answer,2020-04-11 18:00:00,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
yhuang96,IsDag,63,quiz_answer,2020-04-11 18:00:07,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
yhuang96,IsDag,64,quiz_answer,2020-04-11 18:00:14,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
yhuang96,IsDag,65,quiz_answer,2020-04-11 18:00:18,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
yhuang96,IsDag,66,quiz_answer,2020-04-11 18:00:23,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
yhuang96,IsDag,67,quiz_answer,2020-04-11 18:00:30,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
yhuang96,IsDag,68,quiz_answer,2020-04-11 18:00:45,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
yhuang96,IsDag,69,final_answer,2020-04-11 18:00:50,,,,,,?,
yhuang96,ThreeCycle,70,eval_input,2020-04-11 18:02:43,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,,,,,
yhuang96,ThreeCycle,71,eval_input,2020-04-11 18:02:58,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,,,,,
yhuang96,ThreeCycle,72,eval_input,2020-04-11 18:03:11,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,,,,,
yhuang96,ThreeCycle,73,eval_input,2020-04-11 18:03:34,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + A->C
    }",false,,,,,
yhuang96,ThreeCycle,74,eval_input,2020-04-11 18:03:48,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,,,,,
yhuang96,ThreeCycle,75,eval_input,2020-04-11 18:03:58,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,,,,,
yhuang96,ThreeCycle,76,eval_input,2020-04-11 18:04:09,"inst myInst {
      Node = A
      edges = A->A
    }",false,,,,,
yhuang96,ThreeCycle,77,eval_input,2020-04-11 18:04:15,"inst myInst {
      Node = A
      edges = none
    }",false,,,,,
yhuang96,ThreeCycle,78,quiz_answer,2020-04-11 18:05:11,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
yhuang96,ThreeCycle,79,quiz_answer,2020-04-11 18:05:15,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
yhuang96,ThreeCycle,80,quiz_answer,2020-04-11 18:05:20,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
yhuang96,ThreeCycle,81,quiz_answer,2020-04-11 18:05:25,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
yhuang96,ThreeCycle,82,quiz_answer,2020-04-11 18:05:28,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
yhuang96,ThreeCycle,83,quiz_answer,2020-04-11 18:05:34,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
yhuang96,ThreeCycle,84,quiz_answer,2020-04-11 18:05:39,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
yhuang96,ThreeCycle,85,quiz_answer,2020-04-11 18:05:43,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
yhuang96,ThreeCycle,86,final_answer,2020-04-11 18:05:44,,,,,,?,
ewang29,IsDag,0,eval_input,2020-04-11 21:15:45,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
ewang29,IsDag,1,eval_input,2020-04-11 21:15:52,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
ewang29,IsDag,2,eval_input,2020-04-11 21:17:14,"inst myInst {
  Node = A 
       + B
       + C
  edges = A->B
}",true,,,,,
ewang29,IsDag,3,eval_input,2020-04-11 21:17:16,"inst myInst {
  Node = A 
       + B
       + C
  edges = A->B
}",true,,,,,
ewang29,IsDag,4,eval_input,2020-04-11 21:17:39,"inst myInst {
  Node = A 
       + B
       + C
  edges = A->B
  
}",true,,,,,
ewang29,IsDag,5,eval_input,2020-04-11 21:18:21,"inst myInst {
  Node = A 
       + B
       + C
  edges = A->A
  
}",false,,,,,
ewang29,IsDag,6,eval_input,2020-04-11 21:18:54,"inst myInst {
  Node = A 
       + B
       + C
  edges = A->A
  
}",false,,,,,
ewang29,IsDag,7,eval_input,2020-04-11 21:19:02,"inst myInst {
  Node = A 
       + B
       + C
  edges = A->B
  
}",true,,,,,
ewang29,IsDag,8,eval_input,2020-04-11 21:19:31,"inst myInst {
  Node = A 
       + B
       + C
  edges = B->C
  
}",true,,,,,
ewang29,IsDag,9,eval_input,2020-04-11 21:28:02,"inst myInst {
  Node = A 
       + B
       + C
  edges = B->C + C->B
  
}",false,,,,,
ewang29,IsDag,10,eval_input,2020-04-11 21:28:22,"inst myInst {
  Node = A 
       + B
       + C
  edges = B->C + A->B
  
}",true,,,,,
ewang29,IsDag,11,eval_input,2020-04-11 21:29:05,"inst myInst {
  Node = A 
       + B
       + C
  edges = B->C + A->B + B->A
  
}",false,,,,,
ewang29,IsDag,12,eval_input,2020-04-11 21:29:14,"inst myInst {
  Node = A 
       + B
       + C
  edges = B->C + A->B + A->C
  
}",true,,,,,
ewang29,IsDag,13,eval_input,2020-04-11 21:29:54,"inst myInst {
  Node = A 
       + B
       + C
  edges = B->C + A->B + A->C + A->A
  
}",false,,,,,
ewang29,IsDag,14,eval_input,2020-04-11 21:31:22,"inst myInst {
  Node = A 
       + B
       + C
  edges = B->C + A->B + A->C + B->A
  
}",false,,,,,
ewang29,IsDag,15,eval_input,2020-04-11 21:31:30,"inst myInst {
  Node = A 
       + B
       + C
  edges = B->C + A->B + A->C
  
}",true,,,,,
ewang29,IsDag,16,eval_input,2020-04-11 21:32:25,"inst myInst {
  Node = A 
       + B
       + C
       + D
  edges = B->C + A->B + A->C + A->D
  
}",true,,,,,
ewang29,IsDag,17,eval_input,2020-04-11 21:32:34,"inst myInst {
  Node = A 
       + B
       + C
       + D
  edges = B->C + A->B + A->C + A->D + B->D
  
}",true,,,,,
ewang29,IsDag,18,eval_input,2020-04-11 21:32:48,"inst myInst {
  Node = A 
       + B
       + C
       + D
  edges = B->C + A->B + A->C + A->D + B->D + D->A
  
}",false,,,,,
ewang29,IsDag,19,eval_input,2020-04-11 21:32:55,"inst myInst {
  Node = A 
       + B
       + C
       + D
  edges = B->C + A->B + A->C + A->D + B->D
  
}",true,,,,,
ewang29,IsDag,20,eval_input,2020-04-11 21:33:40,"inst myInst {
  Node = A 
       + B
       + C
       + D
  edges = B->C + A->B + A->C + A->D + B->D
  
}",true,,,,,
ewang29,IsDag,21,quiz_answer,2020-04-11 21:37:34,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
ewang29,IsDag,22,quiz_answer,2020-04-11 21:37:59,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ewang29,IsDag,23,quiz_answer,2020-04-11 21:38:38,"inst myInst {
      Node = A
      edges = none
    }",false,1,true,false,,
ewang29,IsDag,24,quiz_answer,2020-04-11 21:39:28,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ewang29,IsDag,25,quiz_answer,2020-04-11 21:39:39,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
ewang29,IsDag,26,quiz_answer,2020-04-11 21:39:46,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
ewang29,IsDag,27,quiz_answer,2020-04-11 21:40:12,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
ewang29,IsDag,28,quiz_answer,2020-04-11 21:40:19,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,false,false,,
ewang29,IsDag,29,final_answer,2020-04-11 21:40:56,,,,,,transitive closure without identity,
carwood,ThreeCycle,0,eval_input,2020-04-11 21:41:35,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
carwood,ThreeCycle,1,eval_input,2020-04-11 21:41:47,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",false,,,,,
carwood,ThreeCycle,2,eval_input,2020-04-11 21:41:54,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
}",false,,,,,
carwood,ThreeCycle,3,eval_input,2020-04-11 21:41:55,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
}",false,,,,,
carwood,ThreeCycle,4,eval_input,2020-04-11 21:42:01,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",true,,,,,
carwood,ThreeCycle,5,eval_input,2020-04-11 21:42:10,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + C->A
}",false,,,,,
carwood,ThreeCycle,6,eval_input,2020-04-11 21:42:17,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + C->A + C-> B
}",false,,,,,
carwood,ThreeCycle,7,eval_input,2020-04-11 21:42:25,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A
}",false,,,,,
carwood,ThreeCycle,8,eval_input,2020-04-11 21:42:38,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A + B->B + C->C
}",false,,,,,
ewang29,ThreeCycle,30,eval_input,2020-04-11 21:42:45,"inst myInst {
  Node = A 
       + B
       + C
       + D
  edges = B->C + A->B + A->C + A->D + B->D
  
}",false,,,,,
carwood,ThreeCycle,9,eval_input,2020-04-11 21:42:53,"inst myInst {
  Node = A
       + B
       
  edges = A->B + A->A
}",false,,,,,
carwood,ThreeCycle,10,eval_input,2020-04-11 21:43:00,"inst myInst {
  Node = A
       + B
       
  edges = A->B + B->A
}",false,,,,,
carwood,ThreeCycle,11,eval_input,2020-04-11 21:43:23,"inst myInst {
  Node = A
       + B
       + C
       + D
       
  edges = A->B + B->C + C->A
}",true,,,,,
ewang29,ThreeCycle,31,eval_input,2020-04-11 21:43:49,"inst myInst {
  Node = A 
       + B
       + C
  edges = A->B + B->C + C->A
  
}",true,,,,,
carwood,ThreeCycle,12,eval_input,2020-04-11 21:43:54,"inst myInst {
  Node = A
       + B
       + C
       + D
       
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
carwood,ThreeCycle,13,eval_input,2020-04-11 21:44:21,"inst myInst {
  Node = A
       + B
       + C
       + D
       
  edges = A->B + B->A + A->A + B->B
}",false,,,,,
ewang29,ThreeCycle,32,eval_input,2020-04-11 21:44:38,"inst myInst {
  Node = A 
       + B
       + C
  edges = C->A + A->B + B->C
  
}",true,,,,,
ewang29,ThreeCycle,33,eval_input,2020-04-11 21:44:45,"inst myInst {
  Node = A 
       + B
       + C
  edges = C->A + A->B
  
}",false,,,,,
carwood,ThreeCycle,14,eval_input,2020-04-11 21:45:10,"inst myInst {
  Node = A
       + B
       + C
       + D
       
  edges = A->B + B->C + C->A + C->D + D->B + D->A
}",true,,,,,
ewang29,ThreeCycle,34,quiz_answer,2020-04-11 21:45:12,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
ewang29,ThreeCycle,35,quiz_answer,2020-04-11 21:45:41,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ewang29,ThreeCycle,36,quiz_answer,2020-04-11 21:45:48,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
ewang29,ThreeCycle,37,quiz_answer,2020-04-11 21:45:54,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
ewang29,ThreeCycle,38,quiz_answer,2020-04-11 21:46:22,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
ewang29,ThreeCycle,39,quiz_answer,2020-04-11 21:46:30,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
ewang29,ThreeCycle,40,quiz_answer,2020-04-11 21:46:41,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
ewang29,ThreeCycle,41,quiz_answer,2020-04-11 21:47:54,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,false,false,,
carwood,ThreeCycle,15,eval_input,2020-04-11 21:48:04,"inst myInst {
  Node = A
       + B
       + C
       + D
       
  edges = A->B + A->C + A->D + B->C + B->D + C->D
}",false,,,,,
ewang29,ThreeCycle,42,quiz_answer,2020-04-11 21:48:13,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ewang29,ThreeCycle,43,quiz_answer,2020-04-11 21:48:17,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
ewang29,ThreeCycle,44,quiz_answer,2020-04-11 21:48:22,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
ewang29,ThreeCycle,45,quiz_answer,2020-04-11 21:48:31,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
ewang29,ThreeCycle,46,quiz_answer,2020-04-11 21:48:37,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
ewang29,ThreeCycle,47,quiz_answer,2020-04-11 21:48:42,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
ewang29,ThreeCycle,48,quiz_answer,2020-04-11 21:48:46,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
carwood,ThreeCycle,16,eval_input,2020-04-11 21:48:53,"inst myInst {
  Node = A
       + B
       + C
       + D
       
  edges = A->B + B->C + C->A
}",true,,,,,
ewang29,ThreeCycle,49,quiz_answer,2020-04-11 21:48:53,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
ewang29,ThreeCycle,50,final_answer,2020-04-11 21:48:55,,,,,,cycle but with three nodes,
ewang29,IsBipartite,51,eval_input,2020-04-11 21:49:21,"inst myInst {
  Node = A 
       + B
       + C
  edges = C->A + A->B
  
}",true,,,,,
ewang29,IsBipartite,52,eval_input,2020-04-11 21:49:49,"inst myInst {
  Node = A 
       + B
       + C
  edges = A->A
  
}",false,,,,,
ewang29,IsBipartite,53,eval_input,2020-04-11 21:50:17,"inst myInst {
  Node = A 
       + B
       + C
  edges = A->B + B->A
  
}",true,,,,,
carwood,ThreeCycle,17,eval_input,2020-04-11 21:50:37,"inst myInst {
  Node = A
       + B
       + C
       + D
       
  edges = A->A
}",false,,,,,
carwood,ThreeCycle,18,eval_input,2020-04-11 21:51:06,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
ewang29,IsBipartite,54,eval_input,2020-04-11 21:51:13,"inst myInst {
  Node = A 
       + B
       + C
  edges = A->B + B->A + A->C + C->A
  
}",true,,,,,
ewang29,IsBipartite,55,eval_input,2020-04-11 21:51:25,"inst myInst {
  Node = A 
       + B
       + C
  edges = A->B + B->A + A->C + C->A + B->C
  
}",false,,,,,
ewang29,IsBipartite,56,eval_input,2020-04-11 21:51:32,"inst myInst {
  Node = A 
       + B
       + C
  edges = A->B + B->A + A->C + C->A
  
}",true,,,,,
carwood,ThreeCycle,19,eval_input,2020-04-11 21:51:42,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->C
}",false,,,,,
ewang29,IsBipartite,57,eval_input,2020-04-11 21:51:44,"inst myInst {
  Node = A 
       + B
       + C
  edges = A->A
  
}",false,,,,,
ewang29,IsBipartite,58,eval_input,2020-04-11 21:51:50,"inst myInst {
  Node = A 
       + B
       + C
  edges = A->B
  
}",true,,,,,
carwood,ThreeCycle,20,eval_input,2020-04-11 21:51:50,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->C + C->A
}",true,,,,,
carwood,ThreeCycle,21,eval_input,2020-04-11 21:51:58,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->C + C->A + D->C
}",true,,,,,
carwood,ThreeCycle,22,eval_input,2020-04-11 21:52:34,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->A + A->A
}",false,,,,,
ewang29,IsBipartite,59,eval_input,2020-04-11 21:53:34,"inst myInst {
  Node = A 
       + B
       + C
  edges = A->B + B->C
  
}",true,,,,,
carwood,ThreeCycle,23,eval_input,2020-04-11 21:53:48,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->A + B->C + C->A
}",true,,,,,
ewang29,IsBipartite,60,eval_input,2020-04-11 21:53:57,"inst myInst {
  Node = A 
       + B
       + C
  edges = A->B + B->C + C->B
  
}",true,,,,,
carwood,ThreeCycle,24,eval_input,2020-04-11 21:53:58,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->A + B->C + C->A + C->B
}",true,,,,,
carwood,ThreeCycle,25,eval_input,2020-04-11 21:54:09,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->A + B->C + C->A + C->B + A->C
}",true,,,,,
ewang29,IsBipartite,61,quiz_answer,2020-04-11 21:54:33,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ewang29,IsBipartite,62,quiz_answer,2020-04-11 21:54:39,"inst myInst {
      Node = A
      edges = none
    }",false,1,true,false,,
ewang29,IsBipartite,63,eval_input,2020-04-11 21:56:34,"inst myInst {
  Node = A 
       + B
       + C
  edges = A->B + B->C + C->A
  
}",false,,,,,
carwood,ThreeCycle,26,quiz_answer,2020-04-11 21:56:47,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
carwood,ThreeCycle,27,quiz_answer,2020-04-11 21:56:53,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
carwood,ThreeCycle,28,quiz_answer,2020-04-11 21:56:59,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
carwood,ThreeCycle,29,quiz_answer,2020-04-11 21:57:05,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
carwood,ThreeCycle,30,quiz_answer,2020-04-11 21:57:12,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
ewang29,IsBipartite,64,quiz_answer,2020-04-11 21:57:14,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
carwood,ThreeCycle,31,quiz_answer,2020-04-11 21:57:17,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
ewang29,IsBipartite,65,quiz_answer,2020-04-11 21:57:21,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
carwood,ThreeCycle,32,quiz_answer,2020-04-11 21:57:22,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
ewang29,IsBipartite,66,quiz_answer,2020-04-11 21:57:29,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,true,false,,
carwood,ThreeCycle,33,quiz_answer,2020-04-11 21:57:30,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
carwood,ThreeCycle,34,final_answer,2020-04-11 21:57:31,,,,,,I think that this checks to see if there is a cycle of nodes that is 3 long. I'm not sure because I just have a feeling its a little more but every instance I defined adheres to that,
carwood,IsBipartite,35,eval_input,2020-04-11 21:57:39,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->A + B->C + C->A + C->B + A->C
}",false,,,,,
carwood,IsBipartite,36,eval_input,2020-04-11 21:57:49,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = none
}",true,,,,,
carwood,IsBipartite,37,eval_input,2020-04-11 21:57:58,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->A
}",false,,,,,
carwood,IsBipartite,38,eval_input,2020-04-11 21:58:01,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B
}",true,,,,,
carwood,IsBipartite,39,eval_input,2020-04-11 21:58:06,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->C
}",true,,,,,
carwood,IsBipartite,40,eval_input,2020-04-11 21:58:12,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->C + C->D
}",true,,,,,
carwood,IsBipartite,41,eval_input,2020-04-11 21:58:20,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
carwood,IsBipartite,42,eval_input,2020-04-11 21:58:27,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->A
}",true,,,,,
carwood,IsBipartite,43,eval_input,2020-04-11 21:58:34,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->A + B->B
}",false,,,,,
carwood,IsBipartite,44,eval_input,2020-04-11 21:58:37,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->A + B->C
}",true,,,,,
carwood,IsBipartite,45,eval_input,2020-04-11 21:58:47,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->A + B->C + C->A
}",false,,,,,
ewang29,IsBipartite,67,quiz_answer,2020-04-11 21:59:39,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ewang29,IsBipartite,68,quiz_answer,2020-04-11 21:59:46,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
ewang29,IsBipartite,69,quiz_answer,2020-04-11 21:59:51,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,true,false,,
carwood,IsBipartite,46,eval_input,2020-04-11 21:59:58,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->C + C->A
}",false,,,,,
carwood,IsBipartite,47,eval_input,2020-04-11 22:00:11,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
carwood,IsBipartite,48,eval_input,2020-04-11 22:00:20,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->C + C->D + D->A + C->A
}",false,,,,,
ewang29,IsBipartite,70,quiz_answer,2020-04-11 22:00:25,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ewang29,IsBipartite,71,quiz_answer,2020-04-11 22:00:29,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
ewang29,IsBipartite,72,quiz_answer,2020-04-11 22:00:37,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,true,false,,
carwood,IsBipartite,49,quiz_answer,2020-04-11 22:00:42,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
carwood,IsBipartite,50,quiz_answer,2020-04-11 22:00:52,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
carwood,IsBipartite,51,quiz_answer,2020-04-11 22:00:58,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
carwood,IsBipartite,52,quiz_answer,2020-04-11 22:01:05,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
carwood,IsBipartite,53,final_answer,2020-04-11 22:01:20,,,,,,Checks to see if there are no 3-cycles in graph,
carwood,IsDag,54,eval_input,2020-04-11 22:01:48,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->C + C->D + D->A + C->A
}",false,,,,,
carwood,IsDag,55,eval_input,2020-04-11 22:01:54,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = none
}",true,,,,,
carwood,IsDag,56,eval_input,2020-04-11 22:02:03,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B
}",true,,,,,
carwood,IsDag,57,eval_input,2020-04-11 22:02:09,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->A
}",false,,,,,
ewang29,IsBipartite,73,quiz_answer,2020-04-11 22:02:16,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
carwood,IsDag,58,eval_input,2020-04-11 22:02:17,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->C + C->A
}",false,,,,,
ewang29,IsBipartite,74,quiz_answer,2020-04-11 22:02:20,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
carwood,IsDag,59,eval_input,2020-04-11 22:02:26,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->A
}",false,,,,,
ewang29,IsBipartite,75,quiz_answer,2020-04-11 22:02:27,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
carwood,IsDag,60,eval_input,2020-04-11 22:02:52,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
carwood,IsDag,61,eval_input,2020-04-11 22:02:58,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + C->D + D->E + E->A
}",true,,,,,
carwood,IsDag,62,eval_input,2020-04-11 22:03:07,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + C->D + D->E + E->A + C->A
}",true,,,,,
carwood,IsDag,63,eval_input,2020-04-11 22:03:24,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + C->D + D->E + E->A + C->A
          + D->A
}",true,,,,,
ewang29,IsBipartite,76,quiz_answer,2020-04-11 22:03:26,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
carwood,IsDag,64,eval_input,2020-04-11 22:03:33,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + C->D + D->E + E->A + C->A
          + D->A  + A -> C
}",false,,,,,
ewang29,IsBipartite,77,quiz_answer,2020-04-11 22:03:43,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ewang29,IsBipartite,78,quiz_answer,2020-04-11 22:03:47,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
carwood,IsDag,65,quiz_answer,2020-04-11 22:03:49,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ewang29,IsBipartite,79,quiz_answer,2020-04-11 22:03:51,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
carwood,IsDag,66,quiz_answer,2020-04-11 22:03:56,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
ewang29,IsBipartite,80,quiz_answer,2020-04-11 22:04:00,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
carwood,IsDag,67,quiz_answer,2020-04-11 22:04:01,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
carwood,IsDag,68,quiz_answer,2020-04-11 22:04:08,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
ewang29,IsBipartite,81,quiz_answer,2020-04-11 22:04:08,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
carwood,IsDag,69,quiz_answer,2020-04-11 22:04:12,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
ewang29,IsBipartite,82,quiz_answer,2020-04-11 22:04:17,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
carwood,IsDag,70,quiz_answer,2020-04-11 22:04:18,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,true,false,,
ewang29,IsBipartite,83,quiz_answer,2020-04-11 22:04:23,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,true,false,,
ewang29,IsBipartite,84,quiz_answer,2020-04-11 22:04:42,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
carwood,IsDag,71,eval_input,2020-04-11 22:04:42,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + B->C + A->C
}",true,,,,,
ewang29,IsBipartite,85,quiz_answer,2020-04-11 22:04:47,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
ewang29,IsBipartite,86,quiz_answer,2020-04-11 22:04:52,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
carwood,IsDag,72,eval_input,2020-04-11 22:04:56,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + C->B + A->C
}",true,,,,,
ewang29,IsBipartite,87,quiz_answer,2020-04-11 22:04:58,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
ewang29,IsBipartite,88,quiz_answer,2020-04-11 22:05:01,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
ewang29,IsBipartite,89,quiz_answer,2020-04-11 22:05:05,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
carwood,IsDag,73,quiz_answer,2020-04-11 22:05:06,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ewang29,IsBipartite,90,quiz_answer,2020-04-11 22:05:11,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
carwood,IsDag,74,quiz_answer,2020-04-11 22:05:11,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
ewang29,IsBipartite,91,quiz_answer,2020-04-11 22:05:15,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",true,7,false,false,,
carwood,IsDag,75,quiz_answer,2020-04-11 22:05:17,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
carwood,IsDag,76,quiz_answer,2020-04-11 22:05:27,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
ewang29,IsBipartite,92,quiz_answer,2020-04-11 22:05:43,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
carwood,IsDag,77,eval_input,2020-04-11 22:06:33,"inst myInst {
  Node = A
       + B
       + C
       + D + E
       
  edges = A->B + A->C + B->C
}",true,,,,,
ewang29,IsBipartite,93,quiz_answer,2020-04-11 22:07:03,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
ewang29,IsBipartite,94,quiz_answer,2020-04-11 22:07:07,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
ewang29,IsBipartite,95,quiz_answer,2020-04-11 22:07:12,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
ewang29,IsBipartite,96,quiz_answer,2020-04-11 22:07:15,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
ewang29,IsBipartite,97,quiz_answer,2020-04-11 22:07:18,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
ewang29,IsBipartite,98,quiz_answer,2020-04-11 22:07:23,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
ewang29,IsBipartite,99,quiz_answer,2020-04-11 22:07:27,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
ewang29,IsBipartite,100,final_answer,2020-04-11 22:07:28,,,,,,no cycles with odd number of nodes,
carwood,IsDag,78,quiz_answer,2020-04-11 22:08:21,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
carwood,IsDag,79,quiz_answer,2020-04-11 22:08:25,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
carwood,IsDag,80,quiz_answer,2020-04-11 22:08:28,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
carwood,IsDag,81,quiz_answer,2020-04-11 22:08:38,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
carwood,IsDag,82,quiz_answer,2020-04-11 22:08:45,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
carwood,IsDag,83,quiz_answer,2020-04-11 22:08:52,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
carwood,IsDag,84,quiz_answer,2020-04-11 22:09:00,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
carwood,IsDag,85,quiz_answer,2020-04-11 22:09:06,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
carwood,IsDag,86,final_answer,2020-04-11 22:09:08,,,,,,acyclic,
mloukidi,IsDag,0,eval_input,2020-04-11 22:51:17,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
mloukidi,IsDag,1,eval_input,2020-04-11 22:51:29,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
mloukidi,IsDag,2,eval_input,2020-04-11 22:51:32,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
mloukidi,IsDag,3,eval_input,2020-04-11 22:51:41,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A
}",false,,,,,
mloukidi,IsDag,4,eval_input,2020-04-11 22:51:53,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A
}",false,,,,,
mloukidi,IsDag,5,eval_input,2020-04-11 22:52:04,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
}",true,,,,,
mloukidi,IsDag,6,eval_input,2020-04-11 22:52:13,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",false,,,,,
mloukidi,IsDag,7,eval_input,2020-04-11 22:52:25,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + C->A
}",true,,,,,
mloukidi,IsDag,8,eval_input,2020-04-11 22:52:48,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + C->D
}",true,,,,,
mloukidi,IsDag,9,eval_input,2020-04-11 22:52:51,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + C->D
}",true,,,,,
mloukidi,IsDag,10,eval_input,2020-04-11 22:53:00,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B + C->D + D->C
}",false,,,,,
mloukidi,IsDag,11,eval_input,2020-04-11 22:53:32,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = none
}",true,,,,,
mloukidi,IsDag,12,quiz_answer,2020-04-11 22:54:39,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mloukidi,IsDag,13,quiz_answer,2020-04-11 22:54:46,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mloukidi,IsDag,14,quiz_answer,2020-04-11 22:54:56,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mloukidi,IsDag,15,quiz_answer,2020-04-11 22:55:09,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mloukidi,IsDag,16,quiz_answer,2020-04-11 22:55:17,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mloukidi,IsDag,17,quiz_answer,2020-04-11 22:55:26,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mloukidi,IsDag,18,quiz_answer,2020-04-11 22:55:38,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mloukidi,IsDag,19,quiz_answer,2020-04-11 22:55:47,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mloukidi,IsDag,20,final_answer,2020-04-11 22:55:49,,,,,,no cycles,
mloukidi,ThreeCycle,21,eval_input,2020-04-11 22:56:13,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = none
}",false,,,,,
mloukidi,ThreeCycle,22,eval_input,2020-04-11 22:56:23,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = A->B
}",false,,,,,
mloukidi,ThreeCycle,23,eval_input,2020-04-11 22:56:42,"inst myInst {
  Node = A
        + B
  edges = A->B
}",false,,,,,
mloukidi,ThreeCycle,24,eval_input,2020-04-11 22:56:54,"inst myInst {
  Node = A
       + B
  edges = A->B + B->A
}",false,,,,,
mloukidi,ThreeCycle,25,eval_input,2020-04-11 22:57:18,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + A->C
}",false,,,,,
mloukidi,ThreeCycle,26,eval_input,2020-04-11 22:57:37,"inst myInst {
  Node = A
       + B
       + C
       + D
       + E
  edges = A->B + A->C
}",false,,,,,
mloukidi,ThreeCycle,27,eval_input,2020-04-11 22:57:51,"inst myInst {
  Node = none
  edges = none
}",false,,,,,
mloukidi,ThreeCycle,28,eval_input,2020-04-11 22:58:31,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
mloukidi,ThreeCycle,29,eval_input,2020-04-11 22:59:25,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
mloukidi,ThreeCycle,30,eval_input,2020-04-11 22:59:46,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->A + A->C + A->D
}",false,,,,,
mloukidi,ThreeCycle,31,eval_input,2020-04-11 22:59:50,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->A + A->C + A->D
}",false,,,,,
mloukidi,ThreeCycle,32,eval_input,2020-04-11 23:05:48,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->A + A->C + A->D
}",false,,,,,
mloukidi,ThreeCycle,33,eval_input,2020-04-11 23:06:06,"inst myInst {
  Node = A + B
  edges = none
}",false,,,,,
mloukidi,ThreeCycle,34,eval_input,2020-04-11 23:06:29,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B
}",false,,,,,
mloukidi,ThreeCycle,35,eval_input,2020-04-11 23:06:40,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B
}",false,,,,,
mloukidi,ThreeCycle,36,eval_input,2020-04-11 23:06:41,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B
}",false,,,,,
mloukidi,ThreeCycle,37,eval_input,2020-04-11 23:06:50,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B + B->A
}",false,,,,,
mloukidi,ThreeCycle,38,eval_input,2020-04-11 23:07:12,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B + A->C
}",false,,,,,
mloukidi,ThreeCycle,39,eval_input,2020-04-11 23:07:21,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C
}",false,,,,,
mloukidi,ThreeCycle,40,eval_input,2020-04-11 23:07:34,"inst myInst {
  Node = A + B + C
  edges = A->B
}",false,,,,,
mloukidi,ThreeCycle,41,eval_input,2020-04-11 23:07:53,"inst myInst {
  Node = A + B + C
  edges = A->B
}",false,,,,,
mloukidi,ThreeCycle,42,eval_input,2020-04-11 23:08:03,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",true,,,,,
mloukidi,ThreeCycle,43,eval_input,2020-04-11 23:08:14,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
}",true,,,,,
mloukidi,ThreeCycle,44,eval_input,2020-04-11 23:08:34,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
mloukidi,ThreeCycle,45,eval_input,2020-04-11 23:08:41,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D
}",false,,,,,
mloukidi,ThreeCycle,46,eval_input,2020-04-11 23:09:05,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
}",true,,,,,
mloukidi,ThreeCycle,47,eval_input,2020-04-11 23:09:07,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
}",true,,,,,
mloukidi,ThreeCycle,48,eval_input,2020-04-11 23:09:11,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A + A->D
}",true,,,,,
mloukidi,ThreeCycle,49,eval_input,2020-04-11 23:09:36,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A + B->A
}",true,,,,,
mloukidi,ThreeCycle,50,eval_input,2020-04-11 23:10:02,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A + B->D
}",true,,,,,
mloukidi,ThreeCycle,51,eval_input,2020-04-11 23:11:04,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D
}",false,,,,,
mloukidi,ThreeCycle,52,eval_input,2020-04-11 23:11:09,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D
}",false,,,,,
mloukidi,ThreeCycle,53,eval_input,2020-04-11 23:11:19,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->B
}",true,,,,,
mloukidi,ThreeCycle,54,eval_input,2020-04-11 23:12:05,"inst myInst {
  Node = A + B + C + D
  edges = A->A + B->C + C->D + D->B
}",true,,,,,
mloukidi,ThreeCycle,55,eval_input,2020-04-11 23:12:20,"inst myInst {
  Node = A + B + C + D
  edges = A->A + A->B + B->A
}",false,,,,,
mloukidi,ThreeCycle,56,eval_input,2020-04-11 23:13:16,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->A + D->E + E->F + F->D
}",true,,,,,
mloukidi,ThreeCycle,57,eval_input,2020-04-11 23:13:17,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->A + D->E + E->F + F->D
}",true,,,,,
mloukidi,ThreeCycle,58,quiz_answer,2020-04-11 23:14:20,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mloukidi,ThreeCycle,59,quiz_answer,2020-04-11 23:14:26,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
mloukidi,ThreeCycle,60,quiz_answer,2020-04-11 23:14:31,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mloukidi,ThreeCycle,61,quiz_answer,2020-04-11 23:14:38,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
mloukidi,ThreeCycle,62,quiz_answer,2020-04-11 23:14:45,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
mloukidi,ThreeCycle,63,quiz_answer,2020-04-11 23:14:49,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
mloukidi,ThreeCycle,64,quiz_answer,2020-04-11 23:14:55,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mloukidi,ThreeCycle,65,quiz_answer,2020-04-11 23:15:03,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mloukidi,ThreeCycle,66,final_answer,2020-04-11 23:15:04,,,,,,"Triangle detection: True if there exists at least one cycle with exactly three nodes, false otherwise.",
mloukidi,IsBipartite,67,eval_input,2020-04-11 23:15:16,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->A + D->E + E->F + F->D
}",false,,,,,
mloukidi,IsBipartite,68,eval_input,2020-04-11 23:15:40,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
mloukidi,IsBipartite,69,eval_input,2020-04-11 23:15:46,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
mloukidi,IsBipartite,70,eval_input,2020-04-11 23:15:57,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
mloukidi,IsBipartite,71,eval_input,2020-04-11 23:16:07,"inst myInst {
  Node = A + B
  edges = A->B
}",true,,,,,
mloukidi,IsBipartite,72,eval_input,2020-04-11 23:16:10,"inst myInst {
  Node = A + B
  edges = A->B
}",true,,,,,
mloukidi,IsBipartite,73,eval_input,2020-04-11 23:16:10,"inst myInst {
  Node = A + B
  edges = A->B
}",true,,,,,
mloukidi,IsBipartite,74,eval_input,2020-04-11 23:16:15,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",true,,,,,
mloukidi,IsBipartite,75,eval_input,2020-04-11 23:16:26,"inst myInst {
  Node = A + B
  edges = A->B + B->B
}",false,,,,,
mloukidi,IsBipartite,76,eval_input,2020-04-11 23:16:47,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B
}",true,,,,,
mloukidi,IsBipartite,77,eval_input,2020-04-11 23:17:49,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C
}",true,,,,,
mloukidi,IsBipartite,78,eval_input,2020-04-11 23:17:56,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + A->C
}",true,,,,,
mloukidi,IsBipartite,79,eval_input,2020-04-11 23:18:03,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + A->C + C->C
}",false,,,,,
mloukidi,IsBipartite,80,eval_input,2020-04-11 23:18:10,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + A->C + C->D
}",true,,,,,
mloukidi,IsBipartite,81,eval_input,2020-04-11 23:18:20,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
}",false,,,,,
mloukidi,IsBipartite,82,eval_input,2020-04-11 23:18:50,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->A
}",true,,,,,
mloukidi,IsBipartite,83,eval_input,2020-04-11 23:19:06,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",true,,,,,
mloukidi,IsBipartite,84,eval_input,2020-04-11 23:19:29,"inst myInst {
  Node = A + B
  edges = A->B
}",true,,,,,
mloukidi,IsBipartite,85,eval_input,2020-04-11 23:19:57,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
mloukidi,IsBipartite,86,eval_input,2020-04-11 23:20:40,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
mloukidi,IsBipartite,87,eval_input,2020-04-11 23:20:55,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
mloukidi,IsBipartite,88,eval_input,2020-04-11 23:21:19,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->C
}",false,,,,,
mloukidi,IsBipartite,89,eval_input,2020-04-11 23:23:12,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
mloukidi,IsBipartite,90,eval_input,2020-04-11 23:23:36,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A + A->A
}",false,,,,,
mloukidi,IsBipartite,91,eval_input,2020-04-11 23:24:40,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
mloukidi,IsBipartite,92,eval_input,2020-04-11 23:25:12,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A + A->A
}",false,,,,,
mloukidi,IsBipartite,93,eval_input,2020-04-11 23:26:16,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D
}",true,,,,,
mloukidi,IsBipartite,94,eval_input,2020-04-11 23:26:55,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + B->C
}",true,,,,,
mloukidi,IsBipartite,95,eval_input,2020-04-11 23:27:15,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + B->C + C->A
}",false,,,,,
mloukidi,IsBipartite,96,eval_input,2020-04-11 23:27:19,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + B->C + B->A
}",true,,,,,
mloukidi,IsBipartite,97,eval_input,2020-04-11 23:30:23,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C
}",true,,,,,
mloukidi,IsBipartite,98,eval_input,2020-04-11 23:30:32,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + B->A
}",true,,,,,
mloukidi,IsBipartite,99,eval_input,2020-04-11 23:30:51,"inst myInst {
  Node = A + B + C
  edges = A->B + A->C + B->A + C->A
}",true,,,,,
mloukidi,IsBipartite,100,eval_input,2020-04-11 23:34:27,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->D
}",true,,,,,
mloukidi,IsBipartite,101,eval_input,2020-04-11 23:34:40,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->A + C->D + D->C
}",true,,,,,
mloukidi,IsBipartite,102,eval_input,2020-04-11 23:34:47,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->A + C->D + D->A
}",true,,,,,
mloukidi,IsBipartite,103,eval_input,2020-04-11 23:34:54,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
mloukidi,IsBipartite,104,eval_input,2020-04-11 23:35:39,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A + A->A
}",false,,,,,
mloukidi,IsBipartite,105,eval_input,2020-04-11 23:38:34,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A + C->A
}",false,,,,,
mloukidi,IsBipartite,106,eval_input,2020-04-11 23:38:45,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A + B->A
}",true,,,,,
mloukidi,IsBipartite,107,eval_input,2020-04-11 23:39:37,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A + D->B
}",false,,,,,
mloukidi,IsBipartite,108,eval_input,2020-04-11 23:40:38,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
mloukidi,IsBipartite,109,eval_input,2020-04-11 23:42:57,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->D + D->E + E->F + F->A
}",true,,,,,
mloukidi,IsBipartite,110,eval_input,2020-04-11 23:43:23,"inst myInst {
  Node = A + B + C + D + E + F + G + H
  edges = A->A
}",false,,,,,
mloukidi,IsBipartite,111,eval_input,2020-04-11 23:43:28,"inst myInst {
  Node = A + B + C + D + E + F + G + H
  edges = none
}",true,,,,,
mloukidi,IsBipartite,112,eval_input,2020-04-11 23:43:36,"inst myInst {
  Node = A + B + C + D + E + F + G + H
  edges = A->B + B->A
}",true,,,,,
mloukidi,IsBipartite,113,eval_input,2020-04-11 23:43:38,"inst myInst {
  Node = A + B + C + D + E + F + G + H
  edges = A->B + B->A
}",true,,,,,
mloukidi,IsBipartite,114,eval_input,2020-04-11 23:43:47,"inst myInst {
  Node = A + B + C + D + E + F + G + H
  edges = A->B + B->C + C->A
}",false,,,,,
mloukidi,IsBipartite,115,eval_input,2020-04-11 23:43:53,"inst myInst {
  Node = A + B + C + D + E + F + G + H
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
mloukidi,IsBipartite,116,eval_input,2020-04-11 23:45:48,"inst myInst {
  Node = A + B + C + D + E + F + G + H
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
mloukidi,IsBipartite,117,eval_input,2020-04-11 23:45:55,"inst myInst {
  Node = A + B + C + D + E + F + G + H
  edges = A->B + B->C + C->D + D->E + E->F + F->A
}",true,,,,,
mloukidi,IsBipartite,118,eval_input,2020-04-11 23:46:10,"inst myInst {
  Node = A + B + C + D + E + F + G + H
  edges = A->B + B->C + C->D + D->E + E->F + F->G + G->A
}",false,,,,,
mloukidi,IsBipartite,119,eval_input,2020-04-11 23:46:19,"inst myInst {
  Node = A + B + C + D + E + F + G + H
  edges = A->B + B->C + C->D + D->E + E->F + F->G + G->H + H->A
}",true,,,,,
mloukidi,IsBipartite,120,quiz_answer,2020-04-11 23:47:10,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mloukidi,IsBipartite,121,quiz_answer,2020-04-11 23:47:22,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mloukidi,IsBipartite,122,quiz_answer,2020-04-11 23:47:28,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mloukidi,IsBipartite,123,quiz_answer,2020-04-11 23:47:43,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mloukidi,IsBipartite,124,quiz_answer,2020-04-11 23:47:47,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mloukidi,IsBipartite,125,quiz_answer,2020-04-11 23:47:58,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mloukidi,IsBipartite,126,quiz_answer,2020-04-11 23:48:07,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
mloukidi,IsBipartite,127,quiz_answer,2020-04-11 23:48:12,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mloukidi,IsBipartite,128,final_answer,2020-04-11 23:48:14,,,,,,"False if there is at least one cycle with an odd number of nodes, true otherwise",
kpal1,ThreeCycle,0,eval_input,2020-04-12 00:14:50,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->B
}",false,,,,,
kpal1,ThreeCycle,1,eval_input,2020-04-12 00:14:58,"inst myInst {
  Node = A + B + C
  edges = none
}",false,,,,,
kpal1,ThreeCycle,2,eval_input,2020-04-12 00:15:10,"inst myInst {
  Node = A + B + C
  edges = A->B
}",false,,,,,
kpal1,ThreeCycle,3,eval_input,2020-04-12 00:15:32,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->B + A->C
}",false,,,,,
kpal1,ThreeCycle,4,eval_input,2020-04-12 00:15:44,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",false,,,,,
kpal1,ThreeCycle,5,eval_input,2020-04-12 00:15:49,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
kpal1,ThreeCycle,6,eval_input,2020-04-12 00:16:15,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + B->C + C->B
}",false,,,,,
kpal1,ThreeCycle,7,eval_input,2020-04-12 00:16:26,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + B->C + C->B + A->C + C->A
}",true,,,,,
kpal1,ThreeCycle,8,eval_input,2020-04-12 00:17:01,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",false,,,,,
kpal1,ThreeCycle,9,eval_input,2020-04-12 00:17:10,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C
}",false,,,,,
kpal1,ThreeCycle,10,eval_input,2020-04-12 00:17:30,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
kpal1,ThreeCycle,11,eval_input,2020-04-12 00:17:55,"inst myInst {
  Node = none
  edges = none
}",false,,,,,
kpal1,ThreeCycle,12,eval_input,2020-04-12 00:18:06,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
kpal1,ThreeCycle,13,eval_input,2020-04-12 00:18:15,"inst myInst {
  Node = A + B
  edges = A->A + A->B
}",false,,,,,
kpal1,ThreeCycle,14,eval_input,2020-04-12 00:18:25,"inst myInst {
  Node = A + B
  edges = A->B
}",false,,,,,
kpal1,ThreeCycle,15,eval_input,2020-04-12 00:18:41,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
kpal1,ThreeCycle,16,eval_input,2020-04-12 00:18:56,"inst myInst {
  Node = A + B + C
  edges = A->C
}",false,,,,,
kpal1,ThreeCycle,17,eval_input,2020-04-12 00:19:03,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",false,,,,,
kpal1,ThreeCycle,18,eval_input,2020-04-12 00:19:13,"inst myInst {
  Node = A + B + C
  edges = C->C
}",false,,,,,
kpal1,ThreeCycle,19,eval_input,2020-04-12 00:19:55,"inst myInst {
  Node = A + B + C
  edges = C->C
}",false,,,,,
kpal1,ThreeCycle,20,eval_input,2020-04-12 00:20:25,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",false,,,,,
kpal1,ThreeCycle,21,eval_input,2020-04-12 00:20:35,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + B->C + C->B + A->C + C->A
}",true,,,,,
kpal1,ThreeCycle,22,eval_input,2020-04-12 00:20:45,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + B->C + C->B + A->C
}",true,,,,,
kpal1,ThreeCycle,23,eval_input,2020-04-12 00:21:43,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + C->B + A->C
}",true,,,,,
kpal1,ThreeCycle,24,eval_input,2020-04-12 00:21:56,"inst myInst {
  Node = A + B + C
  edges = A->B
}",false,,,,,
kpal1,ThreeCycle,25,eval_input,2020-04-12 00:23:03,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",false,,,,,
kpal1,ThreeCycle,26,eval_input,2020-04-12 00:23:09,"inst myInst {
  Node = A + B
  edges = A->B
}",false,,,,,
kpal1,ThreeCycle,27,eval_input,2020-04-12 00:23:10,"inst myInst {
  Node = A + B
  edges = A->B
}",false,,,,,
kpal1,ThreeCycle,28,eval_input,2020-04-12 00:23:22,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->A + B->C + C->B + A->C
}",true,,,,,
kpal1,ThreeCycle,29,eval_input,2020-04-12 00:24:04,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->A + B->C + A->C
}",false,,,,,
kpal1,ThreeCycle,30,eval_input,2020-04-12 00:24:12,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->A + B->C + C->B
}",false,,,,,
kpal1,ThreeCycle,31,eval_input,2020-04-12 00:24:16,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->A + B->C + C->B + A->C
}",true,,,,,
kpal1,ThreeCycle,32,eval_input,2020-04-12 00:24:23,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->C + C->B + A->C
}",false,,,,,
kpal1,ThreeCycle,33,eval_input,2020-04-12 00:24:31,"inst myInst {
  Node = A + B + C
  edges = B->A + B->C + C->B + A->C
}",true,,,,,
kpal1,ThreeCycle,34,eval_input,2020-04-12 00:25:28,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->A + A->C
}",false,,,,,
kpal1,ThreeCycle,35,eval_input,2020-04-12 00:25:36,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->A + A->C + C->A
}",false,,,,,
kpal1,ThreeCycle,36,eval_input,2020-04-12 00:26:17,"inst myInst {
  Node = A + B + C
  edges =  B->A + B->C + C->B + A->C + C->A
}",true,,,,,
kpal1,ThreeCycle,37,eval_input,2020-04-12 00:26:24,"inst myInst {
  Node = A + B + C
  edges =  B->C + C->B + A->C + C->A
}",false,,,,,
kpal1,ThreeCycle,38,eval_input,2020-04-12 00:26:41,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->C + C->B + A->C + C->A
}",true,,,,,
kpal1,ThreeCycle,39,eval_input,2020-04-12 00:26:47,"inst myInst {
  Node = A + B + C
  edges =  B->A + B->C + C->B + A->C + C->A
}",true,,,,,
kpal1,ThreeCycle,40,eval_input,2020-04-12 00:27:23,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->C + C->B + A->C + C->A
}",true,,,,,
kpal1,ThreeCycle,41,eval_input,2020-04-12 00:28:31,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->B + B->C
}",false,,,,,
kpal1,ThreeCycle,42,eval_input,2020-04-12 00:28:45,"inst myInst {
  Node = A + B + C
  edges =  B->C + A->B
}",false,,,,,
kpal1,ThreeCycle,43,eval_input,2020-04-12 00:29:03,"inst myInst {
  Node = A + B + C
  edges =  A->B + C->B
}",false,,,,,
kpal1,ThreeCycle,44,eval_input,2020-04-12 00:29:10,"inst myInst {
  Node = A + B + C
  edges =  A->B + C->B + B->C
}",false,,,,,
kpal1,ThreeCycle,45,eval_input,2020-04-12 00:29:24,"inst myInst {
  Node = A + B + C
  edges =  A->B + C->B + B->C + B->A
}",false,,,,,
kpal1,ThreeCycle,46,eval_input,2020-04-12 00:29:38,"inst myInst {
  Node = A + B + C
  edges =  A->B + C->B + B->C + B->A + C->A
}",true,,,,,
kpal1,ThreeCycle,47,eval_input,2020-04-12 00:30:02,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->C + C->A
}",true,,,,,
kpal1,ThreeCycle,48,eval_input,2020-04-12 00:30:24,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->C
}",false,,,,,
kpal1,ThreeCycle,49,eval_input,2020-04-12 00:30:40,"inst myInst {
  Node = A + B + C
  edges =  A->C + C->B + B->A
}",true,,,,,
kpal1,ThreeCycle,50,eval_input,2020-04-12 00:31:28,"inst myInst {
  Node = A + B + C
  edges =  A->C + C->B + A->B
}",false,,,,,
kpal1,ThreeCycle,51,eval_input,2020-04-12 00:32:00,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->C + C->A + A->A
}",true,,,,,
kpal1,ThreeCycle,52,eval_input,2020-04-12 00:32:10,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->C + C->A + A->A + B->B + C->C
}",true,,,,,
kpal1,ThreeCycle,53,quiz_answer,2020-04-12 00:33:58,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kpal1,ThreeCycle,54,eval_input,2020-04-12 00:34:32,"inst myInst {
  Node = A
  edges =  A->A
}",false,,,,,
kpal1,ThreeCycle,55,eval_input,2020-04-12 00:34:40,"inst myInst {
  Node = A + B
  edges =  A->A + B->A
}",false,,,,,
kpal1,ThreeCycle,56,eval_input,2020-04-12 00:34:48,"inst myInst {
  Node = A + B
  edges =  A->A + A->B
}",false,,,,,
kpal1,ThreeCycle,57,eval_input,2020-04-12 00:35:42,"inst myInst {
  Node = A + B + C + D
  edges =  A->B + B->C + C->D + D->A
}",false,,,,,
kpal1,ThreeCycle,58,quiz_answer,2020-04-12 00:37:04,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kpal1,ThreeCycle,59,quiz_answer,2020-04-12 00:37:09,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
kpal1,ThreeCycle,60,quiz_answer,2020-04-12 00:37:11,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
kpal1,ThreeCycle,61,quiz_answer,2020-04-12 00:37:44,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
kpal1,ThreeCycle,62,quiz_answer,2020-04-12 00:37:52,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
kpal1,ThreeCycle,63,quiz_answer,2020-04-12 00:37:59,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
kpal1,ThreeCycle,64,quiz_answer,2020-04-12 00:38:10,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
kpal1,ThreeCycle,65,quiz_answer,2020-04-12 00:38:24,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
kpal1,ThreeCycle,66,final_answer,2020-04-12 00:38:28,,,,,,I think it checks whether all nodes can reach all other nodes but with only 3 nodes. (Reachability with exact 3 nodes),
kpal1,IsDag,67,eval_input,2020-04-12 00:39:03,"inst myInst {
  Node = A + B + C + D
  edges =  A->B + B->C + C->D + D->A
}",false,,,,,
kpal1,IsDag,68,eval_input,2020-04-12 00:39:41,"inst myInst {
  Node = A + B + C + D
  edges =  A->B + B->A + B->C + C->D + D->A
}",false,,,,,
kpal1,IsDag,69,eval_input,2020-04-12 00:39:47,"inst myInst {
  Node = A + B + C + D
  edges =  A->B + B->A + B->C + C->B + C->D + D->A
}",false,,,,,
kpal1,IsDag,70,eval_input,2020-04-12 00:39:53,"inst myInst {
  Node = A + B + C + D
  edges =  A->B + B->A + B->C + C->B + C->D + D->C + D->A
}",false,,,,,
kpal1,IsDag,71,eval_input,2020-04-12 00:39:58,"inst myInst {
  Node = A + B + C + D
  edges =  A->B + B->A + B->C + C->B + C->D + D->C + D->A + A->D
}",false,,,,,
kpal1,IsDag,72,eval_input,2020-04-12 00:40:04,"inst myInst {
  Node = A + B + C + D
  edges = A->A
}",false,,,,,
kpal1,IsDag,73,eval_input,2020-04-12 00:40:10,"inst myInst {
  Node = A + B + C + D
  edges = A->A + B->B
}",false,,,,,
kpal1,IsDag,74,eval_input,2020-04-12 00:40:14,"inst myInst {
  Node = A + B + C + D
  edges = A->A + B->B + C->C
}",false,,,,,
kpal1,IsDag,75,eval_input,2020-04-12 00:40:17,"inst myInst {
  Node = A + B + C + D
  edges = A->A + B->B + C->C + D->D
}",false,,,,,
kpal1,IsDag,76,eval_input,2020-04-12 00:40:24,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
kpal1,IsDag,77,eval_input,2020-04-12 00:40:33,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
kpal1,IsDag,78,eval_input,2020-04-12 00:40:42,"inst myInst {
  Node = A + B
  edges = A->B + A->A + B->B
}",false,,,,,
kpal1,IsDag,79,eval_input,2020-04-12 00:40:50,"inst myInst {
  Node = A + B
  edges = A->B + A->A + B->B + B->A
}",false,,,,,
kpal1,IsDag,80,eval_input,2020-04-12 00:42:02,"inst myInst {
  Node = A + B + C
  edges = A->B
}",true,,,,,
kpal1,IsDag,81,eval_input,2020-04-12 00:42:17,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
kpal1,IsDag,82,quiz_answer,2020-04-12 00:43:14,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kpal1,IsDag,83,quiz_answer,2020-04-12 00:43:18,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
kpal1,IsDag,84,quiz_answer,2020-04-12 00:43:22,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
kpal1,IsDag,85,quiz_answer,2020-04-12 00:44:26,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
kpal1,IsDag,86,quiz_answer,2020-04-12 00:44:35,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
kpal1,IsDag,87,quiz_answer,2020-04-12 00:45:23,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,true,false,,
kpal1,IsDag,88,eval_input,2020-04-12 00:45:29,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
kpal1,IsDag,89,quiz_answer,2020-04-12 00:45:59,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kpal1,IsDag,90,quiz_answer,2020-04-12 00:46:04,"inst myInst {
      Node = A
      edges = none
    }",false,1,true,false,,
kpal1,IsDag,91,eval_input,2020-04-12 00:46:07,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
kpal1,IsDag,92,eval_input,2020-04-12 00:46:08,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
kpal1,IsDag,93,quiz_answer,2020-04-12 00:46:20,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kpal1,IsDag,94,quiz_answer,2020-04-12 00:46:22,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
kpal1,IsDag,95,quiz_answer,2020-04-12 00:46:25,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
kpal1,IsDag,96,quiz_answer,2020-04-12 00:46:38,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
kpal1,IsDag,97,quiz_answer,2020-04-12 00:46:41,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
kpal1,IsDag,98,quiz_answer,2020-04-12 00:46:43,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
kpal1,IsDag,99,quiz_answer,2020-04-12 00:46:48,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
kpal1,IsDag,100,quiz_answer,2020-04-12 00:46:55,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
kpal1,IsDag,101,final_answer,2020-04-12 00:46:56,,,,,,checks whether the graph is acyclic,
kpal1,IsBipartite,102,eval_input,2020-04-12 00:47:05,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
kpal1,IsBipartite,103,eval_input,2020-04-12 00:47:31,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
kpal1,IsBipartite,104,eval_input,2020-04-12 00:47:44,"inst myInst {
  Node = A + B + C
  edges = B->C
}",true,,,,,
kpal1,IsBipartite,105,eval_input,2020-04-12 00:47:52,"inst myInst {
  Node = A + B + C
  edges = B->C + C->A
}",true,,,,,
kpal1,IsBipartite,106,eval_input,2020-04-12 00:48:04,"inst myInst {
  Node = A + B + C
  edges = C->A
}",true,,,,,
kpal1,IsBipartite,107,eval_input,2020-04-12 00:48:09,"inst myInst {
  Node = A + B + C
  edges = none
}",true,,,,,
kpal1,IsBipartite,108,eval_input,2020-04-12 00:48:25,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A
}",true,,,,,
kpal1,IsBipartite,109,eval_input,2020-04-12 00:48:34,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + C->A
}",true,,,,,
kpal1,IsBipartite,110,eval_input,2020-04-12 00:48:43,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
kpal1,IsBipartite,111,eval_input,2020-04-12 00:49:02,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->B
}",true,,,,,
kpal1,IsBipartite,112,eval_input,2020-04-12 00:49:16,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->B + B->A
}",true,,,,,
kpal1,IsBipartite,113,eval_input,2020-04-12 00:49:37,"inst myInst {
  Node = A + B + C
  edges = A->A
}",false,,,,,
kpal1,IsBipartite,114,eval_input,2020-04-12 00:49:48,"inst myInst {
  Node = A + B + C
  edges = A->A + A->B + B->C
}",false,,,,,
kpal1,IsBipartite,115,eval_input,2020-04-12 00:49:53,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
kpal1,IsBipartite,116,eval_input,2020-04-12 00:50:00,"inst myInst {
  Node = A + B + C
  edges = A->A
}",false,,,,,
kpal1,IsBipartite,117,eval_input,2020-04-12 00:50:05,"inst myInst {
  Node = A + B + C
  edges = B->B
}",false,,,,,
kpal1,IsBipartite,118,eval_input,2020-04-12 00:50:19,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D
}",true,,,,,
kpal1,IsBipartite,119,quiz_answer,2020-04-12 00:50:36,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kpal1,IsBipartite,120,quiz_answer,2020-04-12 00:50:39,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
kpal1,IsBipartite,121,quiz_answer,2020-04-12 00:50:42,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,true,false,,
kpal1,IsBipartite,122,eval_input,2020-04-12 00:50:57,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->A
}",true,,,,,
kpal1,IsBipartite,123,eval_input,2020-04-12 00:51:22,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
}",false,,,,,
kpal1,IsBipartite,124,eval_input,2020-04-12 00:51:35,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + D->A
}",true,,,,,
kpal1,IsBipartite,125,eval_input,2020-04-12 00:51:42,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + D->A + A->D
}",true,,,,,
kpal1,IsBipartite,126,eval_input,2020-04-12 00:51:47,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->B
}",true,,,,,
kpal1,IsBipartite,127,eval_input,2020-04-12 00:51:51,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->B + B->A
}",true,,,,,
kpal1,IsBipartite,128,eval_input,2020-04-12 00:52:51,"inst myInst {
  Node = A + B + C + D
  edges = A->A
}",false,,,,,
kpal1,IsBipartite,129,eval_input,2020-04-12 00:53:04,"inst myInst {
  Node = A + B + C + D
  edges = A->C
}",true,,,,,
kpal1,IsBipartite,130,eval_input,2020-04-12 00:53:30,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
kpal1,IsBipartite,131,eval_input,2020-04-12 00:54:07,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + D->A
}",true,,,,,
kpal1,IsBipartite,132,quiz_answer,2020-04-12 00:54:43,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
kpal1,IsBipartite,133,eval_input,2020-04-12 00:54:52,"inst myInst {
  Node = A + B + C + D + E
  edges = B->B
}",false,,,,,
kpal1,IsBipartite,134,eval_input,2020-04-12 00:55:07,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C
}",true,,,,,
kpal1,IsBipartite,135,eval_input,2020-04-12 00:55:14,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + A->A
}",false,,,,,
kpal1,IsBipartite,136,quiz_answer,2020-04-12 00:55:41,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kpal1,IsBipartite,137,quiz_answer,2020-04-12 00:55:46,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
kpal1,IsBipartite,138,quiz_answer,2020-04-12 00:55:50,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
kpal1,IsBipartite,139,quiz_answer,2020-04-12 00:56:01,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
kpal1,IsBipartite,140,quiz_answer,2020-04-12 00:56:28,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
kpal1,IsBipartite,141,quiz_answer,2020-04-12 00:56:32,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
kpal1,IsBipartite,142,quiz_answer,2020-04-12 00:56:37,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,true,false,,
kpal1,IsBipartite,143,quiz_answer,2020-04-12 00:56:59,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kpal1,IsBipartite,144,quiz_answer,2020-04-12 00:57:02,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
kpal1,IsBipartite,145,quiz_answer,2020-04-12 00:57:05,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
kpal1,IsBipartite,146,quiz_answer,2020-04-12 00:57:11,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
kpal1,IsBipartite,147,quiz_answer,2020-04-12 00:57:13,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
kpal1,IsBipartite,148,quiz_answer,2020-04-12 00:57:17,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
kpal1,IsBipartite,149,quiz_answer,2020-04-12 00:57:20,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
kpal1,IsBipartite,150,quiz_answer,2020-04-12 00:57:26,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",true,7,false,false,,
kpal1,IsBipartite,151,quiz_answer,2020-04-12 00:58:02,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
kpal1,IsBipartite,152,quiz_answer,2020-04-12 00:58:05,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
kpal1,IsBipartite,153,quiz_answer,2020-04-12 00:58:08,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
kpal1,IsBipartite,154,quiz_answer,2020-04-12 00:58:11,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
kpal1,IsBipartite,155,quiz_answer,2020-04-12 00:58:14,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
kpal1,IsBipartite,156,quiz_answer,2020-04-12 00:58:16,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
kpal1,IsBipartite,157,quiz_answer,2020-04-12 00:58:24,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
kpal1,IsBipartite,158,quiz_answer,2020-04-12 00:58:29,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
kpal1,IsBipartite,159,final_answer,2020-04-12 00:58:31,,,,,,this predicate checks whether there is no odd-length cycle.,
ekiziv,IsBipartite,0,eval_input,2020-04-12 09:27:39,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
ekiziv,IsBipartite,1,eval_input,2020-04-12 09:27:46,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
ekiziv,IsBipartite,2,eval_input,2020-04-12 09:27:52,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
ekiziv,IsBipartite,3,eval_input,2020-04-12 09:27:54,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
ekiziv,IsBipartite,4,eval_input,2020-04-12 09:28:10,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B+B->C
}",true,,,,,
ekiziv,IsBipartite,5,eval_input,2020-04-12 09:28:17,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B+B->C+C->A
}",false,,,,,
ekiziv,IsBipartite,6,eval_input,2020-04-12 09:28:30,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B+B->C
}",true,,,,,
ekiziv,IsBipartite,7,eval_input,2020-04-12 09:28:55,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B+B->C+A->C
}",true,,,,,
ekiziv,IsBipartite,8,eval_input,2020-04-12 09:29:06,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B+B->C+A->C+A->A
}",false,,,,,
ekiziv,IsBipartite,9,eval_input,2020-04-12 09:29:36,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A
}",false,,,,,
ekiziv,IsBipartite,10,eval_input,2020-04-12 09:29:47,"inst myInst {
  Node = A
       + B
       + C
  edges = B->B
}",false,,,,,
ekiziv,IsBipartite,11,eval_input,2020-04-12 09:29:51,"inst myInst {
  Node = A
       + B
       + C
  edges = C->C
}",false,,,,,
ekiziv,IsBipartite,12,eval_input,2020-04-12 09:30:13,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + A->C
}",true,,,,,
ekiziv,IsBipartite,13,eval_input,2020-04-12 09:30:32,"inst myInst {
  Node = A
       + B
       + C
  edges = B->A+B->C
}",true,,,,,
ekiziv,IsBipartite,14,eval_input,2020-04-12 09:30:53,"inst myInst {
  Node = A
       + B
       + C
  edges = C->A+C->B
}",true,,,,,
ekiziv,IsBipartite,15,eval_input,2020-04-12 09:31:53,"inst myInst {
  Node = A
       + B
       + C
       + D
  edges = D->A+D->B+D->C
}",true,,,,,
ekiziv,IsBipartite,16,quiz_answer,2020-04-12 09:32:41,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
ekiziv,IsBipartite,17,eval_input,2020-04-12 09:33:22,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
ekiziv,IsBipartite,18,quiz_answer,2020-04-12 09:33:50,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ekiziv,IsBipartite,19,quiz_answer,2020-04-12 09:34:10,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
ekiziv,IsBipartite,20,quiz_answer,2020-04-12 09:34:19,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
ekiziv,IsBipartite,21,quiz_answer,2020-04-12 09:34:30,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
ekiziv,IsBipartite,22,eval_input,2020-04-12 09:35:39,"inst myInst {
  Node = A+B+C
  edges = A->B+B->C+A->C
}",true,,,,,
ekiziv,IsBipartite,23,eval_input,2020-04-12 09:35:56,"inst myInst {
  Node = A+B+C
  edges = A->B+B->C
}",true,,,,,
ekiziv,IsBipartite,24,eval_input,2020-04-12 09:36:20,"inst myInst {
  Node = A+B+C
  edges = A->B
}",true,,,,,
ekiziv,IsBipartite,25,eval_input,2020-04-12 09:36:32,"inst myInst {
  Node = A+B+C
  edges = A->C
}",true,,,,,
ekiziv,IsBipartite,26,eval_input,2020-04-12 09:36:55,"inst myInst {
  Node = A+B+C
  edges = A->C+C->A
}",true,,,,,
ekiziv,IsBipartite,27,eval_input,2020-04-12 09:37:42,"inst myInst {
  Node = A+B+C
  edges = none
}",true,,,,,
ekiziv,IsBipartite,28,eval_input,2020-04-12 09:38:18,"inst myInst {
  Node = A+B+C
  edges = A->B+B->C+C->A
}",false,,,,,
ekiziv,IsBipartite,29,eval_input,2020-04-12 09:38:46,"inst myInst {
  Node = A+B+C
  edges = A->B+B->A
}",true,,,,,
ekiziv,IsBipartite,30,eval_input,2020-04-12 09:38:57,"inst myInst {
  Node = A+B+C+D
  edges = A->B+B->C+C->D
}",true,,,,,
ekiziv,IsBipartite,31,eval_input,2020-04-12 09:39:48,"inst myInst {
  Node = A+B+C+D
  edges = B->C+C->D+D->B
}",false,,,,,
ekiziv,IsBipartite,32,eval_input,2020-04-12 09:39:59,"inst myInst {
  Node = A+B+C+D
  edges = B->C+C->D+D->B+A->C
}",false,,,,,
ekiziv,IsBipartite,33,eval_input,2020-04-12 09:40:17,"inst myInst {
  Node = A+B+C+D
  edges = A->B+B->C+C->D+D->A
}",true,,,,,
ekiziv,IsBipartite,34,eval_input,2020-04-12 09:40:35,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+B->C+C->D+D->F+F->A
}",false,,,,,
ekiziv,IsBipartite,35,eval_input,2020-04-12 09:40:48,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+B->C+C->D+D->F+F->A
}",false,,,,,
ekiziv,IsBipartite,36,quiz_answer,2020-04-12 09:41:14,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ekiziv,IsBipartite,37,quiz_answer,2020-04-12 09:41:20,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
ekiziv,IsBipartite,38,quiz_answer,2020-04-12 09:41:28,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
ekiziv,IsBipartite,39,quiz_answer,2020-04-12 09:41:46,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
ekiziv,IsBipartite,40,quiz_answer,2020-04-12 09:41:51,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
ekiziv,IsBipartite,41,quiz_answer,2020-04-12 09:42:01,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
ekiziv,IsBipartite,42,quiz_answer,2020-04-12 09:42:09,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
ekiziv,IsBipartite,43,quiz_answer,2020-04-12 09:42:45,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
ekiziv,IsBipartite,44,final_answer,2020-04-12 09:42:47,,,,,,no cycles of odd length,
ekiziv,ThreeCycle,45,eval_input,2020-04-12 09:43:17,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+B->C+C->D+D->F+F->A
}",false,,,,,
ekiziv,ThreeCycle,46,eval_input,2020-04-12 09:44:12,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+B->C+C->D+D->A
}",false,,,,,
ekiziv,ThreeCycle,47,eval_input,2020-04-12 09:44:28,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+B->C+C->A
}",true,,,,,
ekiziv,ThreeCycle,48,eval_input,2020-04-12 09:44:44,"inst myInst {
  Node = A+B+C+D+F
  edges = none
}",false,,,,,
ekiziv,ThreeCycle,49,eval_input,2020-04-12 09:44:58,"inst myInst {
  Node = A+B+C+D+F
  edges = A->A
}",false,,,,,
ekiziv,ThreeCycle,50,eval_input,2020-04-12 09:45:07,"inst myInst {
  Node = A+B+C+D+F
  edges = B->B
}",false,,,,,
ekiziv,ThreeCycle,51,eval_input,2020-04-12 09:45:21,"inst myInst {
  Node = A+B+C+D+F
  edges = C->C
}",false,,,,,
ekiziv,ThreeCycle,52,eval_input,2020-04-12 09:45:25,"inst myInst {
  Node = A+B+C+D+F
  edges = D->D
}",false,,,,,
ekiziv,ThreeCycle,53,eval_input,2020-04-12 09:45:30,"inst myInst {
  Node = A+B+C+D+F
  edges = F->F
}",false,,,,,
ekiziv,ThreeCycle,54,eval_input,2020-04-12 09:45:30,"inst myInst {
  Node = A+B+C+D+F
  edges = F->F
}",false,,,,,
ekiziv,ThreeCycle,55,eval_input,2020-04-12 09:45:38,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B
}",false,,,,,
ekiziv,ThreeCycle,56,eval_input,2020-04-12 09:45:54,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+B->A
}",false,,,,,
ekiziv,ThreeCycle,57,eval_input,2020-04-12 09:46:19,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+B->C+C->A
}",true,,,,,
ekiziv,ThreeCycle,58,eval_input,2020-04-12 09:46:19,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+B->C+C->A
}",true,,,,,
ekiziv,ThreeCycle,59,eval_input,2020-04-12 09:46:20,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+B->C+C->A
}",true,,,,,
ekiziv,ThreeCycle,60,eval_input,2020-04-12 09:47:01,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+B->C+C->D+D->A
}",false,,,,,
ekiziv,ThreeCycle,61,eval_input,2020-04-12 09:47:10,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+B->C+C->D+D->F+F->A
}",false,,,,,
ekiziv,ThreeCycle,62,eval_input,2020-04-12 09:47:13,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+B->C+C->D+D->F+F->A
}",false,,,,,
ekiziv,ThreeCycle,63,eval_input,2020-04-12 09:48:13,"inst myInst {
  Node = A+B+C+D+F
  edges = B->C+C->D+D->F
}",false,,,,,
ekiziv,ThreeCycle,64,eval_input,2020-04-12 09:48:38,"inst myInst {
  Node = A+B+C+D+F
  edges = B->C+C->D+D->B
}",true,,,,,
ekiziv,ThreeCycle,65,eval_input,2020-04-12 09:48:53,"inst myInst {
  Node = A+B+C+D+F
  edges = B->C+C->D+D->B+A->B
}",true,,,,,
ekiziv,ThreeCycle,66,quiz_answer,2020-04-12 09:49:18,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ekiziv,ThreeCycle,67,quiz_answer,2020-04-12 09:49:27,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
ekiziv,ThreeCycle,68,quiz_answer,2020-04-12 09:49:33,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
ekiziv,ThreeCycle,69,quiz_answer,2020-04-12 09:49:49,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
ekiziv,ThreeCycle,70,quiz_answer,2020-04-12 09:50:01,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
ekiziv,ThreeCycle,71,quiz_answer,2020-04-12 09:50:12,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
ekiziv,ThreeCycle,72,quiz_answer,2020-04-12 09:50:24,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
ekiziv,ThreeCycle,73,quiz_answer,2020-04-12 09:50:30,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
ekiziv,ThreeCycle,74,final_answer,2020-04-12 09:50:31,,,,,,cycle of length 3,
ekiziv,IsDag,75,eval_input,2020-04-12 09:50:43,"inst myInst {
  Node = A+B+C+D+F
  edges = B->C+C->D+D->B+A->B
}",false,,,,,
ekiziv,IsDag,76,eval_input,2020-04-12 09:51:15,"inst myInst {
  Node = A+B+C+D+F
  edges = B->C+C->D+D->B
}",false,,,,,
ekiziv,IsDag,77,eval_input,2020-04-12 09:51:19,"inst myInst {
  Node = A+B+C+D+F
  edges = none
}",true,,,,,
ekiziv,IsDag,78,eval_input,2020-04-12 09:51:32,"inst myInst {
  Node = A+B+C+D+F
  edges = A->A
}",false,,,,,
ekiziv,IsDag,79,eval_input,2020-04-12 09:51:37,"inst myInst {
  Node = A+B+C+D+F
  edges = B->B
}",false,,,,,
ekiziv,IsDag,80,eval_input,2020-04-12 09:51:52,"inst myInst {
  Node = A+B+C+D+F
  edges = C->C
}",false,,,,,
ekiziv,IsDag,81,eval_input,2020-04-12 09:52:17,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+B->A
}",false,,,,,
ekiziv,IsDag,82,eval_input,2020-04-12 09:52:21,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B
}",true,,,,,
ekiziv,IsDag,83,eval_input,2020-04-12 09:52:36,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+C->D
}",true,,,,,
ekiziv,IsDag,84,eval_input,2020-04-12 09:52:51,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+C->D+B->D
}",true,,,,,
ekiziv,IsDag,85,eval_input,2020-04-12 09:53:03,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+C->D+B->D+A->C
}",true,,,,,
ekiziv,IsDag,86,eval_input,2020-04-12 09:53:49,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+B->D+D->C+C->A
}",false,,,,,
ekiziv,IsDag,87,eval_input,2020-04-12 09:54:07,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+B->C+C->A
}",false,,,,,
ekiziv,IsDag,88,eval_input,2020-04-12 09:54:14,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+B->A
}",false,,,,,
ekiziv,IsDag,89,eval_input,2020-04-12 09:54:40,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+C->B
}",true,,,,,
ekiziv,IsDag,90,eval_input,2020-04-12 09:54:49,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+B->C
}",true,,,,,
ekiziv,IsDag,91,eval_input,2020-04-12 09:54:57,"inst myInst {
  Node = A+B+C+D+F
  edges = A->B+B->C+C->A
}",false,,,,,
ekiziv,IsDag,92,quiz_answer,2020-04-12 09:55:39,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
ekiziv,IsDag,93,quiz_answer,2020-04-12 09:55:45,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
ekiziv,IsDag,94,quiz_answer,2020-04-12 09:55:52,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
ekiziv,IsDag,95,quiz_answer,2020-04-12 09:56:08,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
ekiziv,IsDag,96,quiz_answer,2020-04-12 09:56:17,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
ekiziv,IsDag,97,quiz_answer,2020-04-12 09:56:24,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
ekiziv,IsDag,98,quiz_answer,2020-04-12 09:56:33,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
ekiziv,IsDag,99,quiz_answer,2020-04-12 09:56:40,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
ekiziv,IsDag,100,final_answer,2020-04-12 09:56:41,,,,,,no cycles,
rthepumn,IsDag,0,eval_input,2020-04-12 13:25:24,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
rthepumn,IsDag,1,eval_input,2020-04-12 13:26:19,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C 
}",true,,,,,
rthepumn,IsDag,2,eval_input,2020-04-12 13:26:34,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + A->C
}",true,,,,,
rthepumn,IsDag,3,eval_input,2020-04-12 13:27:18,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
rthepumn,IsDag,4,eval_input,2020-04-12 13:28:58,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
rthepumn,IsDag,5,eval_input,2020-04-12 13:29:25,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
rthepumn,IsDag,6,eval_input,2020-04-12 13:29:47,"inst myInst {
  Node = A + B
  edges = A->A
}",false,,,,,
rthepumn,IsDag,7,eval_input,2020-04-12 13:30:25,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
rthepumn,IsDag,8,eval_input,2020-04-12 13:33:23,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B
  
}",true,,,,,
rthepumn,IsDag,9,quiz_answer,2020-04-12 13:34:35,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
rthepumn,IsDag,10,quiz_answer,2020-04-12 13:34:46,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
rthepumn,IsDag,11,quiz_answer,2020-04-12 13:34:52,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
rthepumn,IsDag,12,quiz_answer,2020-04-12 13:35:03,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
rthepumn,IsDag,13,quiz_answer,2020-04-12 13:35:10,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
rthepumn,IsDag,14,quiz_answer,2020-04-12 13:35:17,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
rthepumn,IsDag,15,quiz_answer,2020-04-12 13:35:25,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
rthepumn,IsDag,16,quiz_answer,2020-04-12 13:35:35,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
rthepumn,IsDag,17,final_answer,2020-04-12 13:35:37,,,,,,Acyclic,
rthepumn,ThreeCycle,18,eval_input,2020-04-12 13:36:03,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B
  
}",false,,,,,
rthepumn,ThreeCycle,19,eval_input,2020-04-12 13:36:48,"inst myInst {
  Node = A + B 
  edges = A->B + B->A
  
}",false,,,,,
rthepumn,ThreeCycle,20,eval_input,2020-04-12 13:37:04,"inst myInst {
  Node = A + B + C
  edges = none
  
}",false,,,,,
rthepumn,ThreeCycle,21,eval_input,2020-04-12 13:37:20,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
  
}",false,,,,,
rthepumn,ThreeCycle,22,eval_input,2020-04-12 13:37:27,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
  
}",false,,,,,
rthepumn,ThreeCycle,23,eval_input,2020-04-12 13:37:27,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
  
}",false,,,,,
rthepumn,ThreeCycle,24,eval_input,2020-04-12 13:37:35,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C
  
}",false,,,,,
rthepumn,ThreeCycle,25,eval_input,2020-04-12 13:37:52,"inst myInst {
  Node = none
  edges = none
  
}",false,,,,,
rthepumn,ThreeCycle,26,eval_input,2020-04-12 13:37:59,"inst myInst {
  Node = A
  edges = none
  
}",false,,,,,
rthepumn,ThreeCycle,27,eval_input,2020-04-12 13:38:15,"inst myInst {
  Node = A
  edges = A->A
  
}",false,,,,,
rthepumn,ThreeCycle,28,eval_input,2020-04-12 13:38:23,"inst myInst {
  Node = A + B
  edges = A->A
  
}",false,,,,,
rthepumn,ThreeCycle,29,eval_input,2020-04-12 13:38:58,"inst myInst {
  Node = A + B
  edges = A->A + A->B + B->A + B->B
  
}",false,,,,,
rthepumn,ThreeCycle,30,quiz_answer,2020-04-12 13:41:52,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
rthepumn,ThreeCycle,31,quiz_answer,2020-04-12 13:41:56,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
rthepumn,ThreeCycle,32,quiz_answer,2020-04-12 13:41:59,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
rthepumn,ThreeCycle,33,quiz_answer,2020-04-12 13:42:02,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
rthepumn,ThreeCycle,34,quiz_answer,2020-04-12 13:42:06,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,true,false,,
rthepumn,ThreeCycle,35,eval_input,2020-04-12 13:43:01,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
  
}",true,,,,,
rthepumn,ThreeCycle,36,eval_input,2020-04-12 13:43:13,"inst myInst {
  Node = A + B 
  edges = A->B + B->A
  
}",false,,,,,
rthepumn,ThreeCycle,37,eval_input,2020-04-12 13:43:36,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
  
}",false,,,,,
rthepumn,ThreeCycle,38,eval_input,2020-04-12 13:44:01,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
  
}",true,,,,,
rthepumn,ThreeCycle,39,quiz_answer,2020-04-12 13:44:24,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
rthepumn,ThreeCycle,40,quiz_answer,2020-04-12 13:44:29,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
rthepumn,ThreeCycle,41,quiz_answer,2020-04-12 13:44:32,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
rthepumn,ThreeCycle,42,quiz_answer,2020-04-12 13:44:36,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,false,false,,
rthepumn,ThreeCycle,43,quiz_answer,2020-04-12 13:44:57,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
rthepumn,ThreeCycle,44,quiz_answer,2020-04-12 13:45:02,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
rthepumn,ThreeCycle,45,quiz_answer,2020-04-12 13:45:06,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
rthepumn,ThreeCycle,46,quiz_answer,2020-04-12 13:45:12,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
rthepumn,ThreeCycle,47,quiz_answer,2020-04-12 13:45:16,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
rthepumn,ThreeCycle,48,quiz_answer,2020-04-12 13:45:20,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
rthepumn,ThreeCycle,49,quiz_answer,2020-04-12 13:45:25,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
rthepumn,ThreeCycle,50,quiz_answer,2020-04-12 13:45:29,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
rthepumn,ThreeCycle,51,final_answer,2020-04-12 13:45:30,,,,,,cycle with only 3 nodes in the cycle,
rthepumn,IsBipartite,52,eval_input,2020-04-12 13:46:28,"inst myInst {
  Node = none
  edges = none
  
}",true,,,,,
rthepumn,IsBipartite,53,eval_input,2020-04-12 13:46:36,"inst myInst {
  Node = A
  edges = none
  
}",true,,,,,
rthepumn,IsBipartite,54,eval_input,2020-04-12 13:46:43,"inst myInst {
  Node = A
  edges = A->A
  
}",false,,,,,
rthepumn,IsBipartite,55,eval_input,2020-04-12 13:46:52,"inst myInst {
  Node = A + B
  edges = A->A
  
}",false,,,,,
rthepumn,IsBipartite,56,eval_input,2020-04-12 13:47:02,"inst myInst {
  Node = A + B + C
  edges = none
  
}",true,,,,,
rthepumn,IsBipartite,57,eval_input,2020-04-12 13:47:21,"inst myInst {
  Node = A + B
  edges = A->B + B->A
  
}",true,,,,,
rthepumn,IsBipartite,58,eval_input,2020-04-12 13:47:33,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
  
}",true,,,,,
rthepumn,IsBipartite,59,eval_input,2020-04-12 13:47:42,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
  
}",true,,,,,
rthepumn,IsBipartite,60,eval_input,2020-04-12 13:47:43,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
  
}",true,,,,,
rthepumn,IsBipartite,61,eval_input,2020-04-12 13:47:47,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
  
}",false,,,,,
rthepumn,IsBipartite,62,eval_input,2020-04-12 13:48:00,"inst myInst {
  Node = A + B + C
  edges = A->B + C->B 
  
}",true,,,,,
rthepumn,IsBipartite,63,eval_input,2020-04-12 13:48:20,"inst myInst {
  Node = A + B 
  edges = A->B + B->B + B->A + A->A 
  
}",false,,,,,
rthepumn,IsBipartite,64,eval_input,2020-04-12 13:48:36,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A 
  
}",false,,,,,
rthepumn,IsBipartite,65,eval_input,2020-04-12 13:49:06,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
  
}",true,,,,,
rthepumn,IsBipartite,66,eval_input,2020-04-12 13:49:19,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D 
  
}",true,,,,,
rthepumn,IsBipartite,67,eval_input,2020-04-12 13:51:24,"inst myInst {
  Node = A + B + C 
  edges = A->B + C->B
  
}",true,,,,,
rthepumn,IsBipartite,68,eval_input,2020-04-12 13:51:36,"inst myInst {
  Node = A + B + C 
  edges = A->B + C->B + C->A
  
}",true,,,,,
rthepumn,IsBipartite,69,eval_input,2020-04-12 13:52:24,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->B + C->A
  
}",true,,,,,
rthepumn,IsBipartite,70,quiz_answer,2020-04-12 13:53:08,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
rthepumn,IsBipartite,71,quiz_answer,2020-04-12 13:53:14,"inst myInst {
      Node = A
      edges = none
    }",false,1,true,false,,
rthepumn,IsBipartite,72,quiz_answer,2020-04-12 13:53:30,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
rthepumn,IsBipartite,73,quiz_answer,2020-04-12 13:53:35,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
rthepumn,IsBipartite,74,quiz_answer,2020-04-12 13:53:40,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
rthepumn,IsBipartite,75,quiz_answer,2020-04-12 13:53:53,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
rthepumn,IsBipartite,76,eval_input,2020-04-12 13:54:32,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->B + C->A + A->C
  
}",true,,,,,
rthepumn,IsBipartite,77,eval_input,2020-04-12 13:54:51,"inst myInst {
  Node = A + B + C + D
  edges = A->B + C->B + D->B
  
}",true,,,,,
rthepumn,IsBipartite,78,eval_input,2020-04-12 13:55:14,"inst myInst {
  Node = A + B 
  edges = A->B + B->A 
  
}",true,,,,,
rthepumn,IsBipartite,79,eval_input,2020-04-12 13:55:29,"inst myInst {
  Node = A  
  edges = A->A
  
}",false,,,,,
rthepumn,IsBipartite,80,eval_input,2020-04-12 13:55:38,"inst myInst {
  Node = A+B
  edges = A->A
  
}",false,,,,,
rthepumn,IsBipartite,81,eval_input,2020-04-12 13:56:09,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
  
}",false,,,,,
rthepumn,IsBipartite,82,eval_input,2020-04-12 13:56:22,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
  
}",true,,,,,
rthepumn,IsBipartite,83,eval_input,2020-04-12 13:56:38,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
  
}",true,,,,,
rthepumn,IsBipartite,84,quiz_answer,2020-04-12 13:57:48,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
rthepumn,IsBipartite,85,quiz_answer,2020-04-12 13:57:53,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
rthepumn,IsBipartite,86,quiz_answer,2020-04-12 13:57:58,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
rthepumn,IsBipartite,87,quiz_answer,2020-04-12 13:58:14,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
rthepumn,IsBipartite,88,quiz_answer,2020-04-12 13:59:00,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
rthepumn,IsBipartite,89,quiz_answer,2020-04-12 13:59:03,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
rthepumn,IsBipartite,90,quiz_answer,2020-04-12 13:59:07,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
rthepumn,IsBipartite,91,quiz_answer,2020-04-12 13:59:11,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
rthepumn,IsBipartite,92,quiz_answer,2020-04-12 13:59:17,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,false,false,,
rthepumn,IsBipartite,93,eval_input,2020-04-12 13:59:49,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
  
}",false,,,,,
rthepumn,IsBipartite,94,quiz_answer,2020-04-12 14:00:15,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
rthepumn,IsBipartite,95,quiz_answer,2020-04-12 14:00:20,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
rthepumn,IsBipartite,96,quiz_answer,2020-04-12 14:00:25,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
rthepumn,IsBipartite,97,quiz_answer,2020-04-12 14:00:29,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
rthepumn,IsBipartite,98,quiz_answer,2020-04-12 14:00:36,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
rthepumn,IsBipartite,99,quiz_answer,2020-04-12 14:00:41,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
rthepumn,IsBipartite,100,quiz_answer,2020-04-12 14:00:47,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
rthepumn,IsBipartite,101,quiz_answer,2020-04-12 14:00:50,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
rthepumn,IsBipartite,102,final_answer,2020-04-12 14:00:52,,,,,,There can only be cycles with even number of nodes,
hbaackma,IsDag,0,eval_input,2020-04-12 16:47:34,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
hbaackma,IsDag,1,eval_input,2020-04-12 16:47:44,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
hbaackma,IsDag,2,eval_input,2020-04-12 16:47:54,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A
}",false,,,,,
hbaackma,IsDag,3,eval_input,2020-04-12 16:48:12,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C 
}",true,,,,,
hbaackma,IsDag,4,eval_input,2020-04-12 16:48:20,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",false,,,,,
hbaackma,IsDag,5,eval_input,2020-04-12 16:49:12,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",false,,,,,
hbaackma,IsDag,6,eval_input,2020-04-12 16:49:26,"inst myInst {
  Node = A
       + B
       + C
  edges = A->C + A->B
}",true,,,,,
hbaackma,IsDag,7,eval_input,2020-04-12 16:49:35,"inst myInst {
  Node = A
       + B
       + C
  edges = A->C + A->B + A->A
}",false,,,,,
hbaackma,IsDag,8,eval_input,2020-04-12 16:52:08,"inst myInst {
  Node = A
       + B
       + C
  edges = A->C + A->B + A->A
}",false,,,,,
hbaackma,IsDag,9,eval_input,2020-04-12 16:52:18,"inst myInst {
  Node = A
  edges =  A->A
}",false,,,,,
hbaackma,IsDag,10,quiz_answer,2020-04-12 16:52:42,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
hbaackma,IsDag,11,quiz_answer,2020-04-12 16:52:56,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
hbaackma,IsDag,12,quiz_answer,2020-04-12 16:53:02,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
hbaackma,IsDag,13,quiz_answer,2020-04-12 16:53:34,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,true,false,,
hbaackma,IsDag,14,eval_input,2020-04-12 16:54:18,"inst myInst {
  Node = A + B + C
  edges =  A->B + A->C + B->C
}",true,,,,,
hbaackma,IsDag,15,quiz_answer,2020-04-12 16:54:53,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
hbaackma,IsDag,16,quiz_answer,2020-04-12 16:54:59,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
hbaackma,IsDag,17,quiz_answer,2020-04-12 16:55:04,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
hbaackma,IsDag,18,quiz_answer,2020-04-12 16:55:07,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
hbaackma,IsDag,19,quiz_answer,2020-04-12 16:55:18,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
hbaackma,IsDag,20,quiz_answer,2020-04-12 16:55:27,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
hbaackma,IsDag,21,quiz_answer,2020-04-12 16:55:37,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
hbaackma,IsDag,22,quiz_answer,2020-04-12 16:55:49,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
hbaackma,IsDag,23,final_answer,2020-04-12 16:55:50,,,,,,"pred Acyclic{
     no edges^ and iden
}",
hbaackma,IsBipartite,24,eval_input,2020-04-12 16:56:03,"inst myInst {
  Node = A + B + C
  edges =  A->B + A->C + B->C
}",true,,,,,
hbaackma,IsBipartite,25,eval_input,2020-04-12 16:56:15,"inst myInst {
  Node = A + B + C
  edges =  none
}",true,,,,,
hbaackma,IsBipartite,26,eval_input,2020-04-12 16:56:26,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->C
}",true,,,,,
hbaackma,IsBipartite,27,eval_input,2020-04-12 16:56:35,"inst myInst {
  Node = A + B + C
  edges =  A->B 
}",true,,,,,
hbaackma,IsBipartite,28,eval_input,2020-04-12 16:56:46,"inst myInst {
  Node = A + B + C
  edges =  A->C + C->A
}",true,,,,,
hbaackma,IsBipartite,29,eval_input,2020-04-12 16:56:57,"inst myInst {
  Node = A + B + C
  edges =  A->A
}",false,,,,,
hbaackma,IsBipartite,30,eval_input,2020-04-12 16:57:19,"inst myInst {
  Node = A + B + C
  edges =  A->A + B->B
}",false,,,,,
hbaackma,IsBipartite,31,eval_input,2020-04-12 16:57:29,"inst myInst {
  Node = A + B + C
  edges =  A->A + B->C + C->A
}",false,,,,,
hbaackma,IsBipartite,32,quiz_answer,2020-04-12 16:58:25,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
hbaackma,IsBipartite,33,quiz_answer,2020-04-12 16:58:30,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
hbaackma,IsBipartite,34,quiz_answer,2020-04-12 16:58:34,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
hbaackma,IsBipartite,35,quiz_answer,2020-04-12 16:58:39,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
hbaackma,IsBipartite,36,quiz_answer,2020-04-12 16:58:42,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,false,false,,
hbaackma,IsBipartite,37,eval_input,2020-04-12 16:59:06,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->C + C->A
}",false,,,,,
hbaackma,IsBipartite,38,eval_input,2020-04-12 16:59:24,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->A
}",true,,,,,
hbaackma,IsBipartite,39,eval_input,2020-04-12 17:01:03,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->A + A->C
}",true,,,,,
hbaackma,IsBipartite,40,eval_input,2020-04-12 17:01:59,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->C + A->C
}",true,,,,,
hbaackma,IsBipartite,41,eval_input,2020-04-12 17:03:10,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->C 
}",true,,,,,
hbaackma,IsBipartite,42,eval_input,2020-04-12 17:03:25,"inst myInst {
  Node = A + B + C
  edges =  A->B + B->A
}",true,,,,,
hbaackma,IsBipartite,43,eval_input,2020-04-12 17:03:36,"inst myInst {
  Node = A + B 
  edges =  A->B + B->A
}",true,,,,,
hbaackma,IsBipartite,44,quiz_answer,2020-04-12 17:04:44,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
hbaackma,IsBipartite,45,quiz_answer,2020-04-12 17:04:48,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
hbaackma,IsBipartite,46,quiz_answer,2020-04-12 17:04:57,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
hbaackma,IsBipartite,47,quiz_answer,2020-04-12 17:05:20,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
hbaackma,IsBipartite,48,quiz_answer,2020-04-12 17:05:26,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
hbaackma,IsBipartite,49,quiz_answer,2020-04-12 17:05:33,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
hbaackma,IsBipartite,50,quiz_answer,2020-04-12 17:05:39,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,true,false,,
hbaackma,IsBipartite,51,final_answer,2020-04-12 17:05:54,,,,,,True if no self loops or cycles greater than 2,
hbaackma,ThreeCycle,52,eval_input,2020-04-12 17:10:48,"inst myInst {
  Node = A + B 
  edges =  A->B + B->A
}",false,,,,,
hbaackma,ThreeCycle,53,eval_input,2020-04-12 17:10:55,"inst myInst {
  Node = A + B 
  edges =  A->B 
}",false,,,,,
hbaackma,ThreeCycle,54,eval_input,2020-04-12 17:10:59,"inst myInst {
  Node = A + B 
  edges =  none
}",false,,,,,
hbaackma,ThreeCycle,55,eval_input,2020-04-12 17:11:05,"inst myInst {
  Node = A + B 
  edges =  A->A
}",false,,,,,
hbaackma,ThreeCycle,56,eval_input,2020-04-12 17:11:18,"inst myInst {
  Node = A + B 
  edges =  A->A + B->B
}",false,,,,,
hbaackma,ThreeCycle,57,eval_input,2020-04-12 17:11:35,"inst myInst {
  Node = A + B 
  edges =  A->A + A->B + B->A + B->B
}",false,,,,,
hbaackma,ThreeCycle,58,eval_input,2020-04-12 17:12:27,"inst myInst {
  Node = A + B 
  edges = B->B
}",false,,,,,
hbaackma,ThreeCycle,59,eval_input,2020-04-12 17:12:32,"inst myInst {
  Node = A + B + C
  edges = B->B
}",false,,,,,
hbaackma,ThreeCycle,60,eval_input,2020-04-12 17:12:45,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",true,,,,,
hbaackma,ThreeCycle,61,eval_input,2020-04-12 17:12:56,"inst myInst {
  Node = A + B 
  edges = A->B + B->A
}",false,,,,,
hbaackma,ThreeCycle,62,eval_input,2020-04-12 17:13:13,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
hbaackma,ThreeCycle,63,eval_input,2020-04-12 17:13:18,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D 
}",false,,,,,
hbaackma,ThreeCycle,64,eval_input,2020-04-12 17:13:30,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
hbaackma,ThreeCycle,65,eval_input,2020-04-12 17:13:40,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
hbaackma,ThreeCycle,66,eval_input,2020-04-12 17:14:08,"inst myInst {
  Node = A + B + C 
  edges = A->B + B->C + C->A
}",true,,,,,
hbaackma,ThreeCycle,67,eval_input,2020-04-12 17:14:13,"inst myInst {
  Node = A + B + C 
  edges = A->B + B->C + C->A + A->A
}",true,,,,,
hbaackma,ThreeCycle,68,eval_input,2020-04-12 17:15:14,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->A + D->E + E->F + F->D
}",true,,,,,
hbaackma,ThreeCycle,69,quiz_answer,2020-04-12 17:15:27,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
hbaackma,ThreeCycle,70,quiz_answer,2020-04-12 17:15:30,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
hbaackma,ThreeCycle,71,quiz_answer,2020-04-12 17:15:33,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
hbaackma,ThreeCycle,72,quiz_answer,2020-04-12 17:15:37,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
hbaackma,ThreeCycle,73,quiz_answer,2020-04-12 17:15:39,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
hbaackma,ThreeCycle,74,quiz_answer,2020-04-12 17:15:43,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
hbaackma,ThreeCycle,75,quiz_answer,2020-04-12 17:15:47,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
hbaackma,ThreeCycle,76,quiz_answer,2020-04-12 17:15:52,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
hbaackma,ThreeCycle,77,final_answer,2020-04-12 17:15:54,,,,,,graph contains cycle of size 3,
cli135,ThreeCycle,0,eval_input,2020-04-12 17:38:20,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",false,,,,,
cli135,ThreeCycle,1,eval_input,2020-04-12 17:38:45,"inst myInst {
  Node = none
  edges = none
}",false,,,,,
cli135,ThreeCycle,2,eval_input,2020-04-12 17:38:53,"inst myInst {
  Node = A
  edges = none
}",false,,,,,
cli135,ThreeCycle,3,eval_input,2020-04-12 17:39:04,"inst myInst {
  Node = A + B
  edges = none
}",false,,,,,
cli135,ThreeCycle,4,eval_input,2020-04-12 17:39:28,"inst myInst {
  Node = A + B
  edges = A -> B
}",false,,,,,
cli135,ThreeCycle,5,eval_input,2020-04-12 17:39:45,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C
}",false,,,,,
cli135,ThreeCycle,6,eval_input,2020-04-12 17:40:04,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + A -> C
}",false,,,,,
cli135,ThreeCycle,7,eval_input,2020-04-12 17:40:17,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + C -> A
}",true,,,,,
cli135,ThreeCycle,8,eval_input,2020-04-12 17:40:34,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + C -> A + A -> C
}",true,,,,,
cli135,ThreeCycle,9,eval_input,2020-04-12 17:40:53,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> A + A -> C
}",true,,,,,
cli135,ThreeCycle,10,eval_input,2020-04-12 17:41:31,"inst myInst {
  Node = A + B + C + D
  edges = A -> A
}",false,,,,,
cli135,ThreeCycle,11,eval_input,2020-04-12 17:41:41,"inst myInst {
  Node = A
  edges = A -> A
}",false,,,,,
cli135,ThreeCycle,12,eval_input,2020-04-12 17:42:01,"inst myInst {
  Node = A + B
  edges = A -> A + A -> B + B -> A
}",false,,,,,
cli135,ThreeCycle,13,eval_input,2020-04-12 17:42:37,"inst myInst {
  Node = A + B
  edges = A -> B + B -> A
}",false,,,,,
cli135,ThreeCycle,14,eval_input,2020-04-12 17:43:06,"inst myInst {
  Node = A + B + C
  edges = A -> C + C -> B + B -> A
}",true,,,,,
cli135,ThreeCycle,15,eval_input,2020-04-12 17:43:15,"inst myInst {
  Node = A + B + C + D
  edges = A -> C + C -> D + B -> A
}",false,,,,,
cli135,ThreeCycle,16,eval_input,2020-04-12 17:43:28,"inst myInst {
  Node = A + B + C + D
  edges = A -> C + C -> D + D -> A + B -> A
}",true,,,,,
cli135,ThreeCycle,17,eval_input,2020-04-12 17:43:40,"inst myInst {
  Node = A + B + C + D
  edges = A -> C + C -> D + D -> B + B -> A
}",false,,,,,
cli135,ThreeCycle,18,eval_input,2020-04-12 17:44:24,"inst myInst {
  Node = A + B + C + D
  edges = A -> C + C -> D + D -> B + B -> A + A -> B
}",false,,,,,
cli135,ThreeCycle,19,eval_input,2020-04-12 17:44:37,"inst myInst {
  Node = A + B + C + D
  edges = A -> C + C -> D + D -> B + B -> A + D -> A
}",true,,,,,
cli135,ThreeCycle,20,quiz_answer,2020-04-12 17:46:40,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
cli135,ThreeCycle,21,quiz_answer,2020-04-12 17:46:50,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
cli135,ThreeCycle,22,quiz_answer,2020-04-12 17:46:53,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
cli135,ThreeCycle,23,quiz_answer,2020-04-12 17:46:58,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
cli135,ThreeCycle,24,quiz_answer,2020-04-12 17:47:02,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
cli135,ThreeCycle,25,quiz_answer,2020-04-12 17:47:07,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
cli135,ThreeCycle,26,quiz_answer,2020-04-12 17:47:12,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
cli135,ThreeCycle,27,quiz_answer,2020-04-12 17:47:21,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
cli135,ThreeCycle,28,final_answer,2020-04-12 17:47:25,,,,,,Check whether the graph has a cycle of exactly three elements.,
cli135,IsBipartite,29,eval_input,2020-04-12 17:48:07,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
cli135,IsBipartite,30,eval_input,2020-04-12 17:48:20,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
cli135,IsBipartite,31,eval_input,2020-04-12 17:48:32,"inst myInst {
  Node = A
  edges = A -> A
}",false,,,,,
cli135,IsBipartite,32,eval_input,2020-04-12 17:48:50,"inst myInst {
  Node = A + B
  edges = A -> A
}",false,,,,,
cli135,IsBipartite,33,eval_input,2020-04-12 17:48:56,"inst myInst {
  Node = A + B
  edges = A -> B
}",true,,,,,
cli135,IsBipartite,34,eval_input,2020-04-12 17:50:22,"inst myInst {
  Node = A + B
  edges = A -> B + B -> A
}",true,,,,,
cli135,IsBipartite,35,eval_input,2020-04-12 17:50:49,"inst myInst {
  Node = A + B + C
  edges = A -> B
}",true,,,,,
cli135,IsBipartite,36,eval_input,2020-04-12 17:51:00,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C
}",true,,,,,
cli135,IsBipartite,37,eval_input,2020-04-12 17:51:16,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + C -> A
}",false,,,,,
cli135,IsBipartite,38,eval_input,2020-04-12 17:51:57,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + C -> A + A -> C
}",false,,,,,
cli135,IsBipartite,39,eval_input,2020-04-12 17:52:05,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + A -> C
}",true,,,,,
cli135,IsBipartite,40,eval_input,2020-04-12 17:52:29,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + A -> C + C -> A
}",false,,,,,
cli135,IsBipartite,41,eval_input,2020-04-12 17:53:50,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + A -> C + C -> A
}",false,,,,,
cli135,IsBipartite,42,eval_input,2020-04-12 17:53:58,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + A -> C
}",true,,,,,
cli135,IsBipartite,43,eval_input,2020-04-12 17:54:28,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> D + D -> A
}",true,,,,,
cli135,IsBipartite,44,eval_input,2020-04-12 18:00:11,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> D + A -> D
}",true,,,,,
cli135,IsBipartite,45,eval_input,2020-04-12 18:00:21,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + C -> D + D -> B
}",false,,,,,
cli135,IsBipartite,46,eval_input,2020-04-12 18:00:44,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + C -> D + D -> E + E -> A
}",false,,,,,
cli135,IsBipartite,47,eval_input,2020-04-12 18:00:53,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + C -> D + D -> A + E -> A
}",true,,,,,
cli135,IsBipartite,48,eval_input,2020-04-12 18:01:09,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + C -> D + D -> B + E -> A
}",false,,,,,
cli135,IsBipartite,49,eval_input,2020-04-12 18:02:20,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + C -> D + D -> A + E -> E
}",false,,,,,
cli135,IsBipartite,50,eval_input,2020-04-12 18:02:30,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + C -> D + D -> A + E -> D
}",true,,,,,
cli135,IsBipartite,51,eval_input,2020-04-12 18:02:58,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + C -> D + D -> A + D -> E + E -> C
}",false,,,,,
cli135,IsBipartite,52,eval_input,2020-04-12 18:03:36,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + C -> D + D -> A + D -> E + E -> C
  + D -> C + C -> E + E -> D
}",false,,,,,
cli135,IsBipartite,53,eval_input,2020-04-12 18:04:15,"inst myInst {
  Node = A + B + C + D + E + F + G
  edges = A -> B + B -> C + C -> D + D -> A + D -> E + F -> F
}",false,,,,,
cli135,IsBipartite,54,eval_input,2020-04-12 18:04:22,"inst myInst {
  Node = A + B + C + D + E + F + G
  edges = A -> B + B -> C + C -> D + D -> A + D -> E + F -> G
}",true,,,,,
cli135,IsBipartite,55,eval_input,2020-04-12 18:04:31,"inst myInst {
  Node = A + B + C + D + E + F + G
  edges = A -> B + B -> C + C -> D + D -> A + D -> E + F -> G + G -> F
}",true,,,,,
cli135,IsBipartite,56,quiz_answer,2020-04-12 18:05:08,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
cli135,IsBipartite,57,quiz_answer,2020-04-12 18:05:48,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
cli135,IsBipartite,58,quiz_answer,2020-04-12 18:05:52,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
cli135,IsBipartite,59,quiz_answer,2020-04-12 18:05:56,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
cli135,IsBipartite,60,quiz_answer,2020-04-12 18:06:01,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
cli135,IsBipartite,61,quiz_answer,2020-04-12 18:06:06,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
cli135,IsBipartite,62,quiz_answer,2020-04-12 18:06:11,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
cli135,IsBipartite,63,quiz_answer,2020-04-12 18:06:15,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
cli135,IsBipartite,64,quiz_answer,2020-04-12 18:06:23,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
cli135,IsBipartite,65,final_answer,2020-04-12 18:06:25,,,,,,Check if the graph does not contain an odd-cycle.,
cli135,IsDag,66,eval_input,2020-04-12 18:07:10,"inst myInst {
  Node = none
  edges = none
}",true,,,,,
cli135,IsDag,67,eval_input,2020-04-12 18:07:31,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
cli135,IsDag,68,eval_input,2020-04-12 18:07:37,"inst myInst {
  Node = A
  edges = A -> A
}",false,,,,,
cli135,IsDag,69,eval_input,2020-04-12 18:07:47,"inst myInst {
  Node = A + B
  edges = A -> A
}",false,,,,,
cli135,IsDag,70,eval_input,2020-04-12 18:07:56,"inst myInst {
  Node = A + B
  edges = A -> A + B -> B
}",false,,,,,
cli135,IsDag,71,eval_input,2020-04-12 18:08:04,"inst myInst {
  Node = A + B
  edges = A -> B
}",true,,,,,
cli135,IsDag,72,eval_input,2020-04-12 18:08:55,"inst myInst {
  Node = A + B
  edges = A -> B + B -> A
}",false,,,,,
cli135,IsDag,73,eval_input,2020-04-12 18:09:16,"inst myInst {
  Node = A + B
  edges = A -> B + B -> B
}",false,,,,,
cli135,IsDag,74,eval_input,2020-04-12 18:09:23,"inst myInst {
  Node = A + B
  edges = A -> B + A -> A
}",false,,,,,
cli135,IsDag,75,eval_input,2020-04-12 18:10:11,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + A -> C
}",true,,,,,
cli135,IsDag,76,eval_input,2020-04-12 18:10:26,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + A -> C + C -> A
}",false,,,,,
cli135,IsDag,77,eval_input,2020-04-12 18:10:31,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + A -> C + C -> B
}",false,,,,,
cli135,IsDag,78,eval_input,2020-04-12 18:10:43,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + A -> C + C -> C
}",false,,,,,
cli135,IsDag,79,eval_input,2020-04-12 18:10:53,"inst myInst {
  Node = A + B + C
  edges = A -> B + B -> C + A -> C + B -> A
}",false,,,,,
cli135,IsDag,80,eval_input,2020-04-12 18:11:00,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + A -> C
}",true,,,,,
cli135,IsDag,81,eval_input,2020-04-12 18:11:25,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + A -> C + D -> D
}",false,,,,,
cli135,IsDag,82,eval_input,2020-04-12 18:11:32,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + A -> C + D -> A
}",true,,,,,
cli135,IsDag,83,eval_input,2020-04-12 18:11:46,"inst myInst {
  Node = A + B + C + D
  edges = A -> B + B -> C + A -> C + D -> A + C -> D
}",false,,,,,
cli135,IsDag,84,eval_input,2020-04-12 18:11:58,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + A -> C + A -> D + C -> D
}",true,,,,,
cli135,IsDag,85,eval_input,2020-04-12 18:12:07,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + A -> C + A -> D + C -> D + A -> E
}",true,,,,,
cli135,IsDag,86,eval_input,2020-04-12 18:12:37,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + A -> C + A -> D + C -> D + D -> B
}",false,,,,,
cli135,IsDag,87,eval_input,2020-04-12 18:12:47,"inst myInst {
  Node = A + B + C + D + E
  edges = A -> B + B -> C + A -> C + A -> D + C -> D + D -> B
}",false,,,,,
cli135,IsDag,88,quiz_answer,2020-04-12 18:12:59,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
cli135,IsDag,89,quiz_answer,2020-04-12 18:13:03,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
cli135,IsDag,90,quiz_answer,2020-04-12 18:13:07,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
cli135,IsDag,91,quiz_answer,2020-04-12 18:13:11,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
cli135,IsDag,92,quiz_answer,2020-04-12 18:13:14,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
cli135,IsDag,93,quiz_answer,2020-04-12 18:13:22,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
cli135,IsDag,94,quiz_answer,2020-04-12 18:13:26,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
cli135,IsDag,95,quiz_answer,2020-04-12 18:13:31,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
cli135,IsDag,96,final_answer,2020-04-12 18:13:35,,,,,,Check if a graph is acyclic,
mroy6,IsDag,0,eval_input,2020-04-12 21:10:13,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
mroy6,IsDag,1,eval_input,2020-04-12 21:10:31,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B
}",true,,,,,
mroy6,IsDag,2,eval_input,2020-04-12 21:10:39,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C
}",true,,,,,
mroy6,IsDag,3,eval_input,2020-04-12 21:10:43,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->A
}",false,,,,,
mroy6,IsDag,4,eval_input,2020-04-12 21:10:59,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + A->C
}",true,,,,,
mroy6,IsDag,5,eval_input,2020-04-12 21:11:16,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A
}",false,,,,,
mroy6,IsDag,6,eval_input,2020-04-12 21:11:29,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + A->C
}",true,,,,,
mroy6,IsDag,7,eval_input,2020-04-12 21:11:46,"inst myInst {
  Node = A
       + B
       + C
  edges = A->B + B->C + C->A
}",false,,,,,
mroy6,IsDag,8,eval_input,2020-04-12 21:14:00,"inst myInst {
  Node = A
       + B
       + C
  edges = A->A
}",false,,,,,
mroy6,IsDag,9,eval_input,2020-04-12 21:14:06,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
mroy6,IsDag,10,quiz_answer,2020-04-12 21:14:38,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mroy6,IsDag,11,quiz_answer,2020-04-12 21:14:47,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mroy6,IsDag,12,quiz_answer,2020-04-12 21:14:52,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mroy6,IsDag,13,quiz_answer,2020-04-12 21:15:00,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mroy6,IsDag,14,quiz_answer,2020-04-12 21:15:07,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mroy6,IsDag,15,quiz_answer,2020-04-12 21:15:14,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mroy6,IsDag,16,quiz_answer,2020-04-12 21:15:21,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mroy6,IsDag,17,quiz_answer,2020-04-12 21:15:28,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mroy6,IsDag,18,final_answer,2020-04-12 21:15:29,,,,,,It determines if a graph is acyclic.,
mroy6,IsBipartite,19,eval_input,2020-04-12 21:15:47,"inst myInst {
  Node = A
  edges = A->A
}",false,,,,,
mroy6,IsBipartite,20,eval_input,2020-04-12 21:15:53,"inst myInst {
  Node = A
  edges = none
}",true,,,,,
mroy6,IsBipartite,21,eval_input,2020-04-12 21:16:03,"inst myInst {
  Node = A + B
  edges = A->B
}",true,,,,,
mroy6,IsBipartite,22,eval_input,2020-04-12 21:16:10,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",true,,,,,
mroy6,IsBipartite,23,eval_input,2020-04-12 21:16:12,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",true,,,,,
mroy6,IsBipartite,24,eval_input,2020-04-12 21:16:13,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",true,,,,,
mroy6,IsBipartite,25,eval_input,2020-04-12 21:16:18,"inst myInst {
  Node = A + B
  edges = A->B + B->A + B->B
}",false,,,,,
mroy6,IsBipartite,26,eval_input,2020-04-12 21:16:34,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + B->B + B->C
}",false,,,,,
mroy6,IsBipartite,27,eval_input,2020-04-12 21:16:40,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A + B->C
}",true,,,,,
mroy6,IsBipartite,28,quiz_answer,2020-04-12 21:17:16,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mroy6,IsBipartite,29,quiz_answer,2020-04-12 21:17:21,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mroy6,IsBipartite,30,quiz_answer,2020-04-12 21:17:25,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mroy6,IsBipartite,31,quiz_answer,2020-04-12 21:17:28,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mroy6,IsBipartite,32,quiz_answer,2020-04-12 21:17:33,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,false,false,,
mroy6,IsBipartite,33,eval_input,2020-04-12 21:17:58,"inst myInst {
  Node = A + B + C
  edges = A->B + B->A 
}",true,,,,,
mroy6,IsBipartite,34,eval_input,2020-04-12 21:18:14,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",true,,,,,
mroy6,IsBipartite,35,eval_input,2020-04-12 21:18:21,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",false,,,,,
mroy6,IsBipartite,36,eval_input,2020-04-12 21:18:50,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->B
}",true,,,,,
mroy6,IsBipartite,37,eval_input,2020-04-12 21:18:59,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->B + B->A
}",true,,,,,
mroy6,IsBipartite,38,quiz_answer,2020-04-12 21:23:17,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mroy6,IsBipartite,39,quiz_answer,2020-04-12 21:23:20,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mroy6,IsBipartite,40,quiz_answer,2020-04-12 21:23:25,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mroy6,IsBipartite,41,quiz_answer,2020-04-12 21:23:30,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mroy6,IsBipartite,42,quiz_answer,2020-04-12 21:23:34,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mroy6,IsBipartite,43,quiz_answer,2020-04-12 21:23:38,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mroy6,IsBipartite,44,quiz_answer,2020-04-12 21:23:44,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,true,false,,
mroy6,IsBipartite,45,eval_input,2020-04-12 21:24:58,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E
}",true,,,,,
mroy6,IsBipartite,46,eval_input,2020-04-12 21:25:05,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
mroy6,IsBipartite,47,eval_input,2020-04-12 21:25:11,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
mroy6,IsBipartite,48,eval_input,2020-04-12 21:25:17,"inst myInst {
  Node = A + B + C + D 
  edges = A->B + B->C + C->D + D->A
}",true,,,,,
mroy6,IsBipartite,49,quiz_answer,2020-04-12 21:25:53,"inst myInst {
      Node = A 
      edges = A->A
    }",true,0,false,false,,
mroy6,IsBipartite,50,quiz_answer,2020-04-12 21:26:13,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mroy6,IsBipartite,51,quiz_answer,2020-04-12 21:26:16,"inst myInst {
      Node = A
      edges = none
    }",true,1,true,true,,
mroy6,IsBipartite,52,quiz_answer,2020-04-12 21:26:20,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",true,2,true,true,,
mroy6,IsBipartite,53,quiz_answer,2020-04-12 21:26:27,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",true,3,true,true,,
mroy6,IsBipartite,54,quiz_answer,2020-04-12 21:26:32,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",false,4,false,true,,
mroy6,IsBipartite,55,quiz_answer,2020-04-12 21:26:36,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",true,5,true,true,,
mroy6,IsBipartite,56,quiz_answer,2020-04-12 21:26:45,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",true,6,true,true,,
mroy6,IsBipartite,57,quiz_answer,2020-04-12 21:26:48,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mroy6,IsBipartite,58,final_answer,2020-04-12 21:26:49,,,,,,outputs false if there is a cycle with an odd number of nodes,
mroy6,ThreeCycle,59,eval_input,2020-04-12 21:27:13,"inst myInst {
  Node = A + B + C + D 
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
mroy6,ThreeCycle,60,eval_input,2020-04-12 21:27:23,"inst myInst {
  Node = A + B + C + D 
  edges = A->B + B->C + C->D
}",false,,,,,
mroy6,ThreeCycle,61,eval_input,2020-04-12 21:27:29,"inst myInst {
  Node = A + B + C + D 
  edges = A->B 
}",false,,,,,
mroy6,ThreeCycle,62,eval_input,2020-04-12 21:27:33,"inst myInst {
  Node = A + B + C + D 
  edges = none
}",false,,,,,
mroy6,ThreeCycle,63,eval_input,2020-04-12 21:27:40,"inst myInst {
  Node = A + B + C + D 
  edges = A->A
}",false,,,,,
mroy6,ThreeCycle,64,eval_input,2020-04-12 21:27:51,"inst myInst {
  Node = A 
  edges = A->A
}",false,,,,,
mroy6,ThreeCycle,65,eval_input,2020-04-12 21:28:00,"inst myInst {
  Node = A + B
  edges = A->B + B->A
}",false,,,,,
mroy6,ThreeCycle,66,eval_input,2020-04-12 21:28:06,"inst myInst {
  Node = A + B
  edges = A->B + B->A + A->A
}",false,,,,,
mroy6,ThreeCycle,67,eval_input,2020-04-12 21:28:11,"inst myInst {
  Node = A + B
  edges = A->B + B->A + A->A + B->B
}",false,,,,,
mroy6,ThreeCycle,68,eval_input,2020-04-12 21:28:16,"inst myInst {
  Node = A + B
  edges = A->A + B->B
}",false,,,,,
mroy6,ThreeCycle,69,eval_input,2020-04-12 21:28:26,"inst myInst {
  Node = A + B
  edges = A->A + A->B
}",false,,,,,
mroy6,ThreeCycle,70,eval_input,2020-04-12 21:28:44,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C
}",false,,,,,
mroy6,ThreeCycle,71,eval_input,2020-04-12 21:28:49,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + A->C
}",false,,,,,
mroy6,ThreeCycle,72,eval_input,2020-04-12 21:28:59,"inst myInst {
  Node = A + B + C
  edges = A->B + B->C + C->A
}",true,,,,,
mroy6,ThreeCycle,73,eval_input,2020-04-12 21:29:10,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->A
}",true,,,,,
mroy6,ThreeCycle,74,eval_input,2020-04-12 21:29:16,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D
}",false,,,,,
mroy6,ThreeCycle,75,eval_input,2020-04-12 21:29:21,"inst myInst {
  Node = A + B + C + D
  edges = A->B + B->C + C->D + D->A
}",false,,,,,
mroy6,ThreeCycle,76,eval_input,2020-04-12 21:29:31,"inst myInst {
  Node = A + B + C + D + E
  edges = A->B + B->C + C->D + D->E + E->A
}",false,,,,,
mroy6,ThreeCycle,77,eval_input,2020-04-12 21:29:54,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->A
}",true,,,,,
mroy6,ThreeCycle,78,eval_input,2020-04-12 21:30:00,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->A + D->E
}",true,,,,,
mroy6,ThreeCycle,79,eval_input,2020-04-12 21:30:06,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->A + D->E + E->F
}",true,,,,,
mroy6,ThreeCycle,80,eval_input,2020-04-12 21:30:17,"inst myInst {
  Node = A + B + C + D + E + F
  edges = A->B + B->C + C->A + A->D
}",true,,,,,
mroy6,ThreeCycle,81,quiz_answer,2020-04-12 21:30:43,"inst myInst {
      Node = A 
      edges = A->A
    }",false,0,false,true,,
mroy6,ThreeCycle,82,quiz_answer,2020-04-12 21:30:48,"inst myInst {
      Node = A
      edges = none
    }",false,1,false,true,,
mroy6,ThreeCycle,83,quiz_answer,2020-04-12 21:30:51,"inst myInst {
      Node = A + B
      edges = A->B + B->A
    }",false,2,false,true,,
mroy6,ThreeCycle,84,quiz_answer,2020-04-12 21:30:54,"inst myInst {
      Node = A + B + C
      edges = A->B + A->C + B->C
    }",false,3,false,true,,
mroy6,ThreeCycle,85,quiz_answer,2020-04-12 21:30:58,"inst myInst {
      Node = A + B + C
      edges = A->B + B->C + C->A
    }",true,4,true,true,,
mroy6,ThreeCycle,86,quiz_answer,2020-04-12 21:31:01,"inst myInst {
      Node = A + B + C
      edges = A->B + C->B
    }",false,5,false,true,,
mroy6,ThreeCycle,87,quiz_answer,2020-04-12 21:31:05,"inst myInst {
      Node = A + B + C + D
      edges = A->B + B->C + C->D + D->A
    }",false,6,false,true,,
mroy6,ThreeCycle,88,quiz_answer,2020-04-12 21:31:08,"inst myInst {
      Node = A + B + C + D + E
      edges = A->B + B->C + C->D + D->E + E->A
    }",false,7,false,true,,
mroy6,ThreeCycle,89,final_answer,2020-04-12 21:31:09,,,,,,outputs true if there is a 3-node cycle in the graph,
olangley,IsBipartite,0,eval_input,2020-04-13 01:15:31,"inst myInst {
  Node = A
       + B
       + C
  edges = none
}",true,,,,,
